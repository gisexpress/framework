//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Geometries;
using System.Linq;
using System.Xml;

namespace System.Data
{
    public abstract class DataFeature : XmlFeatureElement, IFeature
    {
        protected internal DataFeature(XmlDocument document) : base(document)
        {
            State = DataRowState.Detached;
        }

        IGeometry Shape;
        IGeometry ShapeOriginal;

        DataCommand iCommand;
        PropertyNodeCollection iProperties;

        public DataCommand Command
        {
            get { return (DataCommand)ParentNode ?? iCommand; }
            set { iCommand = value; }
        }

        public PropertyNodeCollection Properties
        {
            get
            {
                if (iProperties == null)
                {
                    iProperties = new PropertyNodeCollection();
                    iProperties.PropertyValueChanged += OnPropertyValueChanged;
                    OnRegisterProperties(iProperties);
                }

                return iProperties;
            }
        }

        public virtual int FieldCount
        {
            get { return Properties.Count; }
        }

        public bool Detached
        {
            get { return State == DataRowState.Detached; }
        }

        public DataRowState State
        {
            get;
            set;
        }

        public bool Inverted
        {
            get;
            protected set;
        }

        public void Invert()
        {
            Inverted = !Inverted;
            State = Inverse(State);

            IGeometry g = Shape;
            Shape = ShapeOriginal;
            ShapeOriginal = g;
        }

        public void Execute()
        {
            switch (State)
            {
                case DataRowState.Added:
                    Command.ExecuteInsert(this);
                    break;

                case DataRowState.Modified:
                    SetGeometry(Shape);
                    Command.ExecuteUpdate(this);
                    break;

                case DataRowState.Deleted:
                    Command.ExecuteDelete(this);
                    break;
            }
        }

        DataRowState Inverse(DataRowState value)
        {
            switch (value)
            {
                case DataRowState.Added:
                    return DataRowState.Deleted;

                case DataRowState.Deleted:
                    return DataRowState.Added;
            }

            return value;
        }

        public virtual int GetFeatureId()
        {
            throw new NotImplementedException();
        }

        public virtual void SetFeatureId(object value)
        {
            throw new NotImplementedException();
        }

        public IGeometry GetGeometry()
        {
            return Shape ?? (Shape = OnGetGeometry());
        }

        public bool SetGeometry(IGeometry value)
        {
            OnSetGeometry(Shape = value);
            SetModified();
            return true;
        }

        public string GetName(int i)
        {
            return Properties[i].Name;
        }

        public virtual int GetOrdinal(string name)
        {
            return Properties.IndexOf(name);
        }

        public object this[int index]
        {
            get { return OnGetValue(GetName(index)); }
            set { OnSetValue(GetName(index), value); }
        }

        public object this[string name]
        {
            get { return OnGetValue(name); }
            set { OnSetValue(name, value); }
        }

        public string GetDataTypeName(int i)
        {
            return GetFieldType(i).Name;
        }

        public Type GetFieldType(int i)
        {
            return Properties[i].PropertyType;
        }

        public object GetValue(int i)
        {
            return OnGetValue(GetName(i));
        }

        public int GetValues(object[] values)
        {
            throw new NotImplementedException();
        }

        public bool GetBoolean(int i)
        {
            throw new NotImplementedException();
        }

        public byte GetByte(int i)
        {
            throw new NotImplementedException();
        }

        public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
        {
            throw new NotImplementedException();
        }

        public char GetChar(int i)
        {
            throw new NotImplementedException();
        }

        public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
        {
            throw new NotImplementedException();
        }

        public Guid GetGuid(int i)
        {
            throw new NotImplementedException();
        }

        public short GetInt16(int i)
        {
            throw new NotImplementedException();
        }

        public int GetInt32(int i)
        {
            throw new NotImplementedException();
        }

        public long GetInt64(int i)
        {
            throw new NotImplementedException();
        }

        public float GetFloat(int i)
        {
            throw new NotImplementedException();
        }

        public double GetDouble(int i)
        {
            throw new NotImplementedException();
        }

        public string GetString(int i)
        {
            throw new NotImplementedException();
        }

        public decimal GetDecimal(int i)
        {
            throw new NotImplementedException();
        }

        public DateTime GetDateTime(int i)
        {
            throw new NotImplementedException();
        }

        public IDataReader GetData(int i)
        {
            throw new NotImplementedException();
        }

        public bool IsDBNull(int i)
        {
            throw new NotImplementedException();
        }

        public IEnvelope GetBounds()
        {
            IGeometry g = GetGeometry();

            if (g == null)
            {
                return default;
            }

            return g.GetBounds();
        }

        public void AcceptChanges()
        {
            ShapeOriginal = null;
            State = DataRowState.Unchanged;
        }

        public void RejectChanges()
        {
            CancelEdit();
        }

        public void BeginEdit()
        {
            if (State == DataRowState.Detached)
            {
                return;
            }

            if (State == DataRowState.Unchanged)
            {
                ShapeOriginal = Shape.Clone();
            }
        }

        public void CancelEdit()
        {
            if (State == DataRowState.Modified)
            {
                State = DataRowState.Unchanged;

                if (ShapeOriginal == null)
                {
                    return;
                }

                Shape = ShapeOriginal;
                ShapeOriginal = null;
            }
        }

        public void EndEdit()
        {
            if (Detached)
            {
                State = DataRowState.Added;
            }

            switch (State)
            {
                case DataRowState.Added:
                    Command.ExecuteInsert(this);
                    break;
                case DataRowState.Modified:
                    Command.ExecuteUpdate(this);
                    break;
                case DataRowState.Deleted:
                    Command.ExecuteDelete(this);
                    break;
            }

            AcceptChanges();
        }

        public void SetAdded()
        {
            if (Detached)
            {
                return;
            }

            SetFeatureId(default(object));
            State = DataRowState.Added;
        }

        public void SetModified()
        {
            if (State == DataRowState.Unchanged)
            {
                State = DataRowState.Modified;
            }
        }

        public bool Delete()
        {
            if (Detached)
            {
                return false;
            }

            State = DataRowState.Deleted;
            return true;
        }

        protected void OnFieldsChanged()
        {

        }

        //string ISupportProperty.ComponentName
        //{
        //    get { return DataSource.Name; }
        //}

        //Type ISupportProperty.GetPropertyType(string name)
        //{
        //    SqlClauseField item = DataSource.Fields[name];

        //    if (item.HasValue())
        //    {
        //        return item.PropertyDescriptor.PropertyType;
        //    }

        //    switch (name.ToLowerInvariant())
        //    {
        //        case Constants.Data.FeatureIdLower:
        //            return DataSource.Fields.IdentityField.HasValue() ? DataSource.Fields.IdentityField.DbType.SystemType : default(Type);

        //        case Constants.Data.ShapeLower:
        //        case Constants.Data.GeometryLower:
        //            return GeometryFactory.ShapeType;
        //    }

        //    return default(Type);
        //}

        //object ISupportProperty.GetPropertyValue(string name)
        //{
        //    switch (name.ToLowerInvariant())
        //    {
        //        case Constants.Data.FeatureIdLower:
        //            return GetFeatureId();

        //        case Constants.Data.ShapeLower:
        //        case Constants.Data.GeometryLower:
        //            return GetGeometry();
        //    }

        //    return this[name];
        //}

        public void NotifyChanges(int newSize)
        {
            //var values = (object[])Items;
            //Array.Resize(ref values, newSize);
            //Items = values;

            //if (Command.Clause.Fields.Count != newSize)
            //{
            //    Command.Clause.Fields = default(SqlClauseFieldList);
            //}
        }

        public void CopyTo(IFeature feature)
        {
            CopyTo(this, feature);
        }

        public static void CopyTo(IFeatureRecord source, IFeature target)
        {
            throw new NotImplementedException();

            //for (int n = 0; n < source.DataSource.Fields.Count; n++)
            //{
            //    SqlClauseField item = source.DataSource.Fields[n];

            //    if (!item.IsIdentity && !item.IsShape && target.DataSource.Fields.Contains(item.Name))
            //    {
            //        target[item.Name] = source[item.Name];
            //    }
            //}

            //target.SetFeatureId(source.GetFeatureId());
            //target.SetGeometry(source.GetGeometry());
        }

        protected abstract object OnGetValue(string name);

        protected abstract void OnSetValue(string name, object value);

        protected abstract IGeometry OnGetGeometry();

        protected abstract void OnSetGeometry(IGeometry value);

        protected abstract void OnRegisterProperties(PropertyNodeCollection properties);

        protected virtual void OnPropertyValueChanged(IPropertyDescriptor property)
        {
            OnSetValue(property.Name, property.Value);
        }

        #region ICustomTypeDescriptor

        AttributeCollection ICustomTypeDescriptor.GetAttributes()
        {
            throw new NotImplementedException();
        }

        string ICustomTypeDescriptor.GetClassName()
        {
            throw new NotImplementedException();
        }

        string ICustomTypeDescriptor.GetComponentName()
        {
            throw new NotImplementedException();
        }

        TypeConverter ICustomTypeDescriptor.GetConverter()
        {
            throw new NotImplementedException();
        }

        EventDescriptor ICustomTypeDescriptor.GetDefaultEvent()
        {
            throw new NotImplementedException();
        }

        PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty()
        {
            throw new NotImplementedException();
        }

        object ICustomTypeDescriptor.GetEditor(Type editorBaseType)
        {
            throw new NotImplementedException();
        }

        EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
        {
            throw new NotImplementedException();
        }

        EventDescriptorCollection ICustomTypeDescriptor.GetEvents()
        {
            throw new NotImplementedException();
        }

        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties()
        {
            throw new NotImplementedException();
        }

        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
        {
            return new PropertyDescriptorCollection(Properties.Cast<PropertyDescriptor>().ToArray());
        }

        object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
        {
            return this;
        }

        #endregion

        public override bool Equals(object obj)
        {
            if (obj.IsNull())
            {
                return false;
            }

            return GetHashCode() == obj.GetHashCode();
        }

        public override int GetHashCode()
        {
            object featureId = GetFeatureId();

            if (featureId.HasValue())
            {
                return featureId.GetHashCode();
            }

            return base.GetHashCode();
        }

        public new IFeature Clone()
        {
            return (IFeature)base.Clone();
        }

        public void Dispose()
        {
            iProperties.DisposeSafely();
            iProperties = null;

            GC.SuppressFinalize(this);
        }
    }
}
