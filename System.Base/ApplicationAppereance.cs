//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Resources;
using System.Windows.Forms;

namespace System
{
    public class ApplicationAppereance
    {
        public const float PenWidth = 1F;

        public static readonly Cursor CursorCross;
        public static readonly Cursor CursorCancel;

        public static readonly Bitmap ActiveSnapImage;
        public static readonly Bitmap InactiveSnapImage;
        public static readonly Bitmap ClosestSnapImage;

        static ApplicationAppereance()
        {
            CursorCross = new Cursor(Images032.Cursor.GetHicon());
            CursorCancel = new Cursor(BitmapExtensions.NewImage(28, 28).DrawCancel(Color.Red).GetHicon());

            ActiveSnapImage = Images032.CollectGreen;
            InactiveSnapImage = Images032.CollectGray;
            ClosestSnapImage = Images032.CollectThinBlue;
        }

        public static class Icons
        {
            static Icons()
            {
                using (var img = new Bitmap(Images.SmallLogo))
                {
                    Application = Icon.FromHandle(img.GetHicon());
                }
            }

            public static Icon Application
            {
                get;
                private set;
            }
        }

        public static class Images
        {
            static Images()
            {
                SmallLogo = Images032.GisExpress;
                LargeLogo = ImagesCustom.Logo;
                Ico = BitmapExtensions.NewImage(SmallLogo, 20, 20);
            }

            public static Image Ico
            {
                get;
                private set;
            }

            public static Image SmallLogo
            {
                get;
                private set;
            }

            public static Image LargeLogo
            {
                get;
                private set;
            }
        }

        public static class Fonts
        {
            static Fonts()
            {
                DefaultFont = GetFont("Tahoma", "Arial");
                CaptionFont = new Font(DefaultFont.FontFamily, DefaultFont.Size + 0.5F, FontStyle.Regular, DefaultFont.Unit, DefaultFont.GdiCharSet);

                string.Concat("FontFamily : ", DefaultFont.FontFamily.Name).Print();
            }

            public static readonly Font DefaultFont;
            public static readonly Font CaptionFont;

            public static Font GetFont(params string[] familyNames)
            {
                Font font;

                foreach (string familyName in familyNames)
                {
                    font = new Font(familyName, Control.DefaultFont.SizeInPoints, FontStyle.Regular, GraphicsUnit.Point, 162);

                    if (font.FontFamily.Name.EqualsIgnoreCase(familyName))
                    {
                        return font;
                    }
                }

                return new Font(Control.DefaultFont.FontFamily, Control.DefaultFont.Size, FontStyle.Regular, GraphicsUnit.Point, 162);
            }
        }

        public static class Sizes
        {
            public static Size DialogMaximumSize
            {
                get { return new Size((int)(Screen.PrimaryScreen.WorkingArea.Width * 0.6), (int)(Screen.PrimaryScreen.WorkingArea.Height * 0.7)); }
            }
        }

        public static class Brushes
        {
            public static readonly Brush Border = new SolidBrush(Colors.Border);
            public static readonly Brush Window = new SolidBrush(Colors.Window);
            public static readonly Brush WindowCaption = new SolidBrush(Colors.WindowCaption);
            public static readonly Brush Control = new SolidBrush(Colors.Control);
            public static readonly Brush ControlHot = new SolidBrush(Colors.ControlHot);
            public static readonly Brush ControlHotChecked = new SolidBrush(Color.FromArgb(0x50, Colors.ControlHotChecked));
            public static readonly Brush ControlHotDisabled = new SolidBrush(Color.FromArgb(150, Colors.ControlDisabled));
            public static readonly Brush ControlPressed = new SolidBrush(Colors.ControlPressed);
            public static readonly Brush Highlight = new SolidBrush(Colors.ControlHot);
            public static readonly Brush HighlightTransparent = new SolidBrush(Color.FromArgb(50, Colors.ControlHot));

            public static readonly Brush Point = new SolidBrush(ColorTranslator.FromHtml("#F5F57A"));
            public static readonly Brush ActivePoint = new SolidBrush(Color.FromArgb(245, 202, 122));

            public static readonly Brush HotTrackPoint = new SolidBrush(ColorTranslator.FromHtml("#F1C40F"));
            public static readonly Brush HotTrackMidPoint = new SolidBrush(ColorTranslator.FromHtml("#99D6FF"));
        }

        public static class Pens
        {
            public static readonly Pen Border = new Pen(Colors.Border) { LineJoin = LineJoin.Round };
            public static readonly Pen BorderLight = new Pen(Color.FromArgb(0x50, Color.DimGray)) { LineJoin = LineJoin.Round };
            public static readonly Pen ControlHotBorder = new Pen(Colors.ControlHotBorder) { LineJoin = LineJoin.Round };
            public static readonly Pen ControlHotCheckedBorder = new Pen(Colors.ControlHotCheckedBorder) { LineJoin = LineJoin.Round };
            public static readonly Pen ControlPressedBorder = new Pen(Colors.ControlPressedBorder) { LineJoin = LineJoin.Round };
            public static readonly Pen ActiveBorder = new Pen(Colors.Highlight) { LineJoin = LineJoin.Round };
            public static readonly Pen HighlightBorder = new Pen(Colors.Highlight) { LineJoin = LineJoin.Round };
            public static readonly Pen BorderShadow1 = new Pen(Color.FromArgb(0x50, ApplicationAppereance.Colors.ButtonShadow), 3F) { LineJoin = LineJoin.Round };
            public static readonly Pen BorderShadow2 = new Pen(ApplicationAppereance.Colors.ButtonShadow) { LineJoin = LineJoin.Round };
            public static readonly Pen HotTrackCenterPoint = new Pen(ColorTranslator.FromHtml("#2ECC71"), PenWidth) { LineJoin = LineJoin.Round };
            public static readonly Pen HotTrackCenterPointShadow = new Pen(ColorTranslator.FromHtml("#95A5A6"), 3.4F) { LineJoin = LineJoin.Round };
            public static readonly Pen SnapHotTrack = new Pen(Color.FromArgb(200, ApplicationAppereance.Colors.HotTrack), PenWidth) { DashStyle = DashStyle.Dash, DashPattern = new float[] { 4F, 4F } };
            public static readonly Pen TextShadow = new Pen(Color.FromArgb(200, Color.DimGray), 2F) { LineJoin = LineJoin.Round };
        }

        public static class Colors
        {
            public static readonly Color Border = ColorTranslator.FromHtml("#B4B4B4");
            public static readonly Color Control = ColorTranslator.FromHtml("#F3F3F3");
            public static readonly Color ControlText = ColorTranslator.FromHtml("#000000");
            public static readonly Color ControlDisabled = ColorTranslator.FromHtml("#CCCCCC");
            public static readonly Color GrayText = ColorTranslator.FromHtml("#6D6D6D");
            public static readonly Color ButtonShadow = ColorTranslator.FromHtml("#A0A0A0");
            public static readonly Color Window = ColorTranslator.FromHtml("#FFFFFF");
            public static readonly Color WindowCaption = ColorTranslator.FromHtml("#D6D6D6");

            public static readonly Color HotTrack = ColorTranslator.FromHtml("#A8D08D");
            public static readonly Color Highlight = SystemColors.Highlight;
            public static readonly Color ControlHot = Color.FromArgb(200, ColorTranslator.FromHtml("#D8EDFF"));
            public static readonly Color ControlHotBorder = Color.FromArgb(200, ColorTranslator.FromHtml("#99D1FF"));
            public static readonly Color ControlHotChecked = Color.FromArgb(200, ColorTranslator.FromHtml("#CCE8FF"));
            public static readonly Color ControlHotCheckedBorder = Color.FromArgb(200, ColorTranslator.FromHtml("#7FC5FF"));
            public static readonly Color ControlPressed = ColorTranslator.FromHtml("#CCE8FF");
            public static readonly Color ControlPressedBorder = ColorTranslator.FromHtml("#99D1FF");
            public static readonly Color ControlHighlightText = ColorTranslator.FromHtml("#3B3B3B");
            public static readonly Color ControlHighlightBorder = ColorTranslator.FromHtml("#B4B4B4");

            public static readonly Color DocumentActiveCaption = ColorTranslator.FromHtml("#333333");
            public static readonly Color DocumentActiveCaptionText = ColorTranslator.FromHtml("#EFEFEF");
            public static readonly Color DocumentInactiveCaption = ColorTranslator.FromHtml("#F3F3F3");
            public static readonly Color DocumentInactiveCaptionText = ColorTranslator.FromHtml("#8E8A8F");
        }
    }
}
