//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows.Forms;

namespace System
{
    public static class ApplicationEnvironment
    {
        public const string @AssemblySuffix = ", Version=1.0.0.0, Culture=neutral, PublicKeyToken=1087cae7e38f1613";

        static ApplicationEnvironment()
        {
            try
            {
                File = new FileInfo(Application.ExecutablePath);
                FileVersion = FileVersionInfo.GetVersionInfo(File.FullName);

                EntryAssembly = File.GetAssemblyName();
                CompanyName = FileVersion.CompanyName;
                ProductName = FileVersion.ProductName;
                ProductVersion = FileVersion.FileVersion;

                if (DeveloperEnvironment.WindowsApplication)
                {
                    UserCompanyDataPath = new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), CompanyName));
                    UserProductDataPath = new DirectoryInfo(Path.Combine(UserCompanyDataPath.FullName, ProductName));

                    if (!UserCompanyDataPath.Exists)
                    {
                        UserCompanyDataPath.Create();
                    }

                    if (UserProductDataPath.Exists)
                    {
                        if (DeveloperEnvironment.CommandLineArguments.Contains("Clear"))
                        {
                            UserProductDataPath.Delete(true);
                            UserProductDataPath.Create();
                        }
                    }
                    else
                    {
                        UserProductDataPath.Create();
                    }
                }

                InvalidPathChars = new HashSet<char>(Path.GetInvalidPathChars().Concat(Path.GetInvalidFileNameChars()));
                InvalidPathChars.Remove(Path.DirectorySeparatorChar);
            }
            catch (Exception e)
            {
                e.Print();
            }
        }

        public static event Action Changed;

        private static string ProductLicenseValue;
        private static long Ticks = Environment.TickCount;

        public static readonly FileInfo File;
        public static readonly FileVersionInfo FileVersion;
        public static readonly AssemblyName EntryAssembly;

        public static readonly string CompanyName;
        public static readonly string ProductName;
        public static readonly string ProductVersion;

        public static string ProductLicense
        {
            get
            {
                if (DeveloperEnvironment.DesignMode)
                {
                    return string.Empty;
                }

                //if (ProductLicenseValue.IsNull())
                //{
                //    License license;

                //    if (LicenseManager.IsValid(typeof(ApplicationEnvironment), default(object), out license))
                //    {
                //        ProductLicenseValue = license.ToString();
                //    }
                //    else
                //    {
                //        ProductLicenseValue = string.Empty;
                //    }
                //}

                return ProductLicenseValue;
            }
        }

        public static DirectoryInfo UserCompanyDataPath;
        public static DirectoryInfo UserProductDataPath;

        public static HashSet<char> InvalidPathChars;

        public static string UserName
        {
            get { return Environment.UserName; }
        }

        public static string UserDomainName
        {
            get { return Environment.UserDomainName; }
        }

        public static string MachineName
        {
            get { return Environment.MachineName; }
        }

        public static string OSVersionString
        {
            get { return string.Concat(Environment.OSVersion.VersionString, ' ', Environment.Is64BitProcess ? "64" : "32", "-Bit (", Environment.Is64BitOperatingSystem ? "64" : "32", "-Bit OS)"); }
        }

        public static Control ActiveControl
        {
            get { return Form.ActiveForm.HasValue() ? Form.ActiveForm.ActiveControl : default(Control); }
        }

        public static string GetTypeName(string typeName)
        {
            return string.Concat(typeName, AssemblySuffix);
        }

        public static Type GetType(string typeName)
        {
            return Type.GetType(GetTypeName(typeName), false);
        }

        public static object CreateInstance(string typeName, params object[] args)
        {
            Type type = GetType(typeName);

            if (type.HasValue())
            {
                if (args.IsNull() || args.Length == 0)
                {
                    return Activator.CreateInstance(type, true);
                }

                return Activator.CreateInstance(type, args);
            }

            return default(object);
        }

        public static void Kill()
        {
            Application.Exit();
            Application.ExitThread();
            Process.GetCurrentProcess().Kill();
        }

        public static bool InvalidateRequired()
        {
            return InvalidateRequired(50);
        }

        public static bool InvalidateRequired(int milliseconds)
        {
            if (Environment.TickCount - Ticks > milliseconds)
            {
                Ticks = Environment.TickCount;
                return true;
            }

            return false;
        }

        public static DirectoryInfo GetFolderPath(ApplicationFolder folder, params string[] paths)
        {
            string path;
            DirectoryInfo directory;

            switch (folder)
            {
                case ApplicationFolder.StartupPath:
                    path = Application.StartupPath;
                    break;
                case ApplicationFolder.ExecutablePath:
                    path = Application.ExecutablePath;
                    break;
                case ApplicationFolder.UserCompanyData:
                    path = UserCompanyDataPath.FullName;
                    break;
                case ApplicationFolder.UserProductData:
                    path = UserProductDataPath.FullName;
                    break;
                case ApplicationFolder.Temp:
                    path = Path.Combine(Path.GetTempPath(), CompanyName, ProductName);
                    break;
                default:
                    throw new NotImplementedException();
            }

            directory = new DirectoryInfo(Path.Combine(path, paths.Join(".").MakeValidPath()));

            if (directory.Exists == false)
            {
                directory.Create();
            }

            return directory;
        }

        public static bool IsValidPath(this string path)
        {
            if (!string.IsNullOrEmpty(path))
            {
                return path.Any(c => !InvalidPathChars.Contains(c));
            }

            return false;
        }

        public static bool IsTempPath(this string path)
        {
            return IsValidPath(path) && path.StartsWithIgnoreCase(ApplicationEnvironment.GetFolderPath(ApplicationFolder.Temp).FullName);
        }

        public static string MakeValidPath(this string path)
        {
            return new string(path.Replace('.', Path.DirectorySeparatorChar).Where(c => !InvalidPathChars.Contains(c)).ToArray());
        }

        public static void Update()
        {
            ProductLicenseValue = default(string);
            Changed.InvokeSafely();
        }
    }
}
