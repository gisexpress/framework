//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.ObjectModel;
using System.Drawing;
using System.Windows.Forms;

namespace System.ComponentModel
{
    public class ComponentActionCollection : KeyedCollection<string, IComponentAction>, IComponentActionCollection
    {
        public ComponentActionCollection()
            : base(StringComparer.InvariantCultureIgnoreCase)
        {
        }

        public event Action Changed;

        protected override string GetKeyForItem(IComponentAction item)
        {
            return item.Name;
        }

        public IComponentAction Add(string name, Image image, Action<object> perform)
        {
            return Add(name, image, perform, default(Func<object, bool>), Shortcut.None);
        }

        public IComponentAction Add(string name, Image image, Action<object> perform, Shortcut shortcut)
        {
            return Add(name, image, perform, default(Func<object, bool>), shortcut);
        }

        public IComponentAction Add(string name, Image image, Action<object> perform, Func<object, bool> canPerform)
        {
            return Add(name, image, perform, canPerform, Shortcut.None);
        }

        public IComponentAction Add(string name, Image image, Action<object> perform, Func<object, bool> canPerform, Shortcut shortcut)
        {
            if (!Contains(name))
            {
                var item = new ComponentAction
                {
                    Name = name,
                    Image = image,
                    Shortcut = shortcut,
                    Perform = perform,
                    CanPerform = canPerform
                };

                Add(item);
            }

            return this[name];
        }

        protected override void ClearItems()
        {
            foreach (IComponentAction item in this)
            {
                item.DisposeSafely();
            }

            base.ClearItems();
            Changed.InvokeSafely();
        }

        protected override void InsertItem(int index, IComponentAction item)
        {
            base.InsertItem(index, item);
            Changed.InvokeSafely();
        }

        protected override void RemoveItem(int index)
        {
            using (base[index])
            {
                base.RemoveItem(index);
            }

            Changed.InvokeSafely();
        }

        IComponentAction IComponentActionCollection.this[string name]
        {
            get { return Contains(name) ? base[name] : default(IComponentAction); }
        }

        public void Dispose()
        {
            this.DisposeItems();
            GC.SuppressFinalize(this);
        }
    }
}
