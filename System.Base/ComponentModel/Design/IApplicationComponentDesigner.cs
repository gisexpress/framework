//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Geometries;
using System.Windows.Forms;

namespace System.ComponentModel.Design
{
    public interface IApplicationComponentDesigner : IWin32Window, ISynchronizeInvoke, IComponent
    {
        event Action Cancel;
        event PaintEventHandler Paint;
        event KeyEventHandler KeyDown;
        event KeyEventHandler KeyUp;
        event EventHandler MouseEnter;
        event MouseEventHandler MouseUp;
        event MouseEventHandler MouseDown;
        event MouseEventHandler MouseMove;
        event MouseEventHandler MouseWheel;
        event EventHandler MouseLeave;
        event Action<Point> SelectPoint;
        event Action<RectangleF> SelectRectangle;
        event ApplicationComponentEventHandler ActiveComponentChanged;

        object Project
        {
            get;
        }

        PointF Offset
        {
            get;
        }

        int Width
        {
            get;
        }

        int Height
        {
            get;
        }

        KeyEventArgs Keyboard
        {
            get;
        }

        Point Location
        {
            get;
            set;
        }

        EventArgs Map
        {
            get;
        }

        MouseEventArgs Mouse
        {
            get;
        }

        ContextMenuStrip PopupMenu
        {
            get;
        }

        IUnitConverter UnitConverter
        {
            get;
        }

        IApplicationComponent ActiveComponent
        {
            get;
        }

        bool IsBusy { get; }
        bool DesignMode { get; }
        bool SelectionMode { get; }
        bool BeginEdit(IApplicationComponent component);
        void CancelEdit();

        void Init(object project);
        void Clear();
        void Flush();
        void Redraw();
        void Refresh();
        void UpdateCursor();

        Graphics CreateGraphics();
        IMapTransform Transform { get; }
        IEnvelope GetCursorBounds(int radius);

        //void ResetAxis();
        //void RotateAxis(double x, double y, double z);

        /// <summary>
        /// Computes the location of the specified client point into screen coordinates.
        /// </summary>
        Point PointToScreen(Point point);
        Point WorldToScreen(double x, double y);
        Point WorldToPoint(double x, double y);

        /// <summary>
        /// Computes the location of the specified screen point into client coordinates.
        /// </summary>
        Point PointToClient(Point point);
    }
}
