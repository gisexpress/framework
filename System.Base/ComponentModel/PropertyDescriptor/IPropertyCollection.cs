//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Xml;

namespace System.ComponentModel
{
    public interface IPropertyCollection : ICustomTypeDescriptor, IEnumerable<IPropertyDescriptor>, IDisposable
    {
        event Action<IPropertyDescriptor> PropertyValueChanged;

        void Clear();
        bool IsNull(string name);

        int Count
        {
            get;
        }

        IPropertyDescriptor Add(string name);

        IPropertyDescriptor Add(string name, Type type);
        IPropertyDescriptor Add(string name, Type type, string category);

        IPropertyDescriptor Add(string name, object value);
        IPropertyDescriptor Add(string name, object value, string category);

        IPropertyDescriptor Find(string propertyName, bool searchAllChildren);

        IEnumerable<IPropertyDescriptor> FindByType(Type propertyType);

        IPropertyDescriptor this[int index]
        {
            get;
        }

        IPropertyDescriptor this[string name]
        {
            get;
        }

        int IndexOf(string name);
        void Insert(int index, IPropertyDescriptor property);
        bool Remove(string name);

        object GetValue(string name);

        T GetValue<T>(string name);
        T GetValue<T>(string name, T defaultValue);

        void RaiseValueChanged(IPropertyDescriptor property);

        void LoadXml(XmlNode node);
        void SaveXml(XmlNode node);
    }

    public static class IPropertyCollectionExtensions
    {
        public static object GetPropertyValue(this IPropertyCollection properties, string name)
        {
            if (properties == null)
            {
                return null;
            }

            IPropertyDescriptor property = properties[name];

            if (property == null)
            {
                return null;
            }

            return property.Value;
        }
    }
}
