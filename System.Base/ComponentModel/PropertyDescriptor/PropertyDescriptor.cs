//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;

namespace System.ComponentModel
{
    public class PropertyDescriptor<TComponent> : PropertyDescriptor, ISupportPropertyDescriptor, IPropertyDescriptor
    {
        public PropertyDescriptor(string name, params Attribute[] attributes)
            : this(name, default(string), default(Type), default(object), attributes)
        {
        }

        public PropertyDescriptor(string name, Type type, params Attribute[] attributes)
            : this(name, default(string), type, default(object), attributes)
        {
        }

        public PropertyDescriptor(string name, string category, Type type, params Attribute[] attributes)
            : this(name, category, type, default(object), attributes)
        {
        }

        public PropertyDescriptor(string name, string category, object value, params Attribute[] attributes)
            : this(name, category, value.GetType(), value, attributes)
        {
        }

        public PropertyDescriptor(string name, string category, Type type, object value, params Attribute[] attributes)
            : base(name, attributes)
        {
            Property.Name = name;
            Property.Category = category;
            Property.DisplayName = name;
            Property.PropertyType = type ?? typeof(TComponent);
            Property.IsBrowsable = base.IsBrowsable;
            Property.IsReadOnly = ((ReadOnlyAttribute)Attributes[typeof(ReadOnlyAttribute)]).IsReadOnly;
            Property.Value = value;
        }

        public event Action<IPropertyDescriptor> ValueChanged
        {
            add { Root.Property.Owner.PropertyValueChanged += value; }
            remove { Root.Property.Owner.PropertyValueChanged -= value; }
        }

        protected TypeConverter PropertyConverter;

        public IPropertyCollection Items
        {
            get;
            protected set;
        }

        protected PropertyDescriptor<TComponent> Root
        {
            get { return (GetParents().LastOrDefault() ?? this) as PropertyDescriptor<TComponent>; }
        }

        public IPropertyDescriptor Property
        {
            get { return this; }
        }

        public override Type ComponentType
        {
            get { return typeof(TComponent); }
        }

        public override string Name
        {
            get { return Property.Name; }
        }

        public override string Category
        {
            get { return Localization.Localize(Property.Category ?? base.Category); }
        }

        public bool CategoryChecked
        {
            get;
            set;
        }

        public override string DisplayName
        {
            get
            {
                string word;

                if (Localization.TryGetValue(Property.FullName, out word))
                {
                    return word;
                }

                return Property.DisplayName ?? Property.Name;
            }
        }

        public override string Description
        {
            get { return Property.Description ?? base.Description; }
        }

        public bool IsArray
        {
            get;
            set;
        }

        public override bool IsBrowsable
        {
            get { return Property.IsBrowsable; }
        }

        public override bool IsReadOnly
        {
            get { return Property.IsReadOnly; }
        }

        public override Type PropertyType
        {
            get { return Property.PropertyType; }
        }

        public TypeCode PropertyTypeCode
        {
            get { return Property.PropertyTypeCode; }
        }

        public IPropertyDescriptor this[string name]
        {
            get
            {
                if (HasChildren)
                {
                    return Items[name];
                }

                return default(IPropertyDescriptor);
            }
        }

        public object Editor
        {
            get { return Property.Editor; }
            set { Property.Editor = value; }
        }

        public override object GetEditor(Type editorBaseType)
        {
            if (editorBaseType.IsInstanceOfType(Property.Editor))
            {
                return Property.Editor;
            }

            return base.GetEditor(editorBaseType);
        }

        public object Value
        {
            get;
            set;
        }

        public TValue GetValue<TValue>()
        {
            return GetValue<TValue>(default(string));
        }

        public TValue GetValue<TValue>(string name)
        {
            if (string.IsNullOrEmpty(name))
            {
                if (!Value.IsNullOrDBNull())
                {
                    return (TValue)Value;
                }
            }
            else
            {
                if (HasChildren)
                {
                    IPropertyDescriptor property = Items[name];

                    if (property.HasValue())
                    {
                        return property.GetValue<TValue>();
                    }
                }
            }

            return default(TValue);
        }

        public override bool CanResetValue(object component)
        {
            return false;
        }

        public override void ResetValue(object component)
        {
        }

        public override bool ShouldSerializeValue(object component)
        {
            return false;
        }

        public override object GetValue(object component)
        {
            if (!HasChildren)
            {
                var property = component as IPropertyGetter;

                if (property.HasValue())
                {
                    return property[Name];
                }

                return Value;
            }

            return Items;
        }

        public override void SetValue(object component, object value)
        {
            var property = component as IPropertySetter;

            if (property.HasValue())
            {
                property[Name] = value;
            }
            else
            {
                Value = value;
            }

            OnValueChanged(this);
        }

        protected virtual void OnValueChanged(IPropertyDescriptor property)
        {
            if (Property.Owner.HasValue())
            {
                IPropertyCollection root = Root.Property.Owner;

                if (root.HasValue())
                {
                    root.RaiseValueChanged(property);
                }
            }
        }

        public override TypeConverter Converter
        {
            get
            {
                if (HasChildren)
                {
                    return PropertyConverter ?? (PropertyConverter = new ExpandableTypeConverter(this));
                }

                return base.Converter;
            }
        }

        public bool HasChildren
        {
            get { return Items.HasValue() && Items.Count > 0; }
        }

        protected virtual IPropertyCollection ChildProperties
        {
            get { return Items ?? (Items = new PropertyNodeCollection(this)); }
        }

        #region IPropertyDescriptor

        string IPropertyDescriptor.Name
        {
            get;
            set;
        }

        string IPropertyDescriptor.FullName
        {
            get { return GetParents().Reverse().Join("."); }
        }

        string IPropertyDescriptor.Category
        {
            get;
            set;
        }

        string IPropertyDescriptor.DisplayName
        {
            get;
            set;
        }

        string IPropertyDescriptor.Description
        {
            get;
            set;
        }

        bool IPropertyDescriptor.IsBrowsable
        {
            get;
            set;
        }

        bool IPropertyDescriptor.IsReadOnly
        {
            get;
            set;
        }

        Type IPropertyDescriptor.PropertyType
        {
            get;
            set;
        }

        TypeCode IPropertyDescriptor.PropertyTypeCode
        {
            get { return Type.GetTypeCode(Property.PropertyType); }
        }

        IPropertyCollection IPropertyDescriptor.Owner
        {
            get;
            set;
        }

        IPropertyDescriptor IPropertyDescriptor.Parent
        {
            get;
            set;
        }

        object IPropertyDescriptor.Editor
        {
            get;
            set;
        }

        Attribute[] IPropertyDescriptor.Attributes
        {
            get { return AttributeArray; }
            set { AttributeArray = value; }
        }

        IPropertyCollection IPropertyDescriptor.ChildProperties
        {
            get { return ChildProperties; }
        }

        IEnumerable<IPropertyDescriptor> GetParents()
        {
            IPropertyDescriptor current = this;

            yield return this;

            while (current.Parent.HasValue())
            {
                yield return (current = current.Parent);
            }
        }

        #endregion

        public override string ToString()
        {
            return Name;
        }
    }
}
