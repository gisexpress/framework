//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;

namespace System.ComponentModel
{
    public class TypeFactory : ITypeFactory
    {
        public static readonly TypeFactory Default;

        static TypeFactory()
        {
            Default = new TypeFactory();
        }

        protected TypeFactory()
        {
            Components = new SortedList<string, Type>(StringComparer.InvariantCultureIgnoreCase);
        }

        readonly SortedList<string, Type> Components;

        public void Register<TComponent>()
        {
            Register(typeof(TComponent).Name, typeof(TComponent));
        }

        public void Register<TComponent, TCls>()
        {
            Register(typeof(TComponent).Name, typeof(TCls));
        }

        public void Register(string clsId, Type componentType)
        {
            if (Components.ContainsKey(clsId))
            {
                Components[clsId] = componentType;
            }
            else
            {
                Components.Add(clsId, componentType);
            }
        }

        public T Create<T>(params object[] args)
        {
            return (T)Create(typeof(T).Name, args);
        }

        public object Create(string clsId, params object[] args)
        {
            if (Components.TryGetValue(clsId, out Type componentType))
            {
                if (args == null || args.Length == 0)
                {
                    return OnCreateInstance(componentType);
                }

                return OnCreateInstance(componentType, args.ToList());
            }

            throw new NotSupportedException();
        }

        protected virtual object OnCreateInstance(Type componentType)
        {
            return Activator.CreateInstance(componentType, true);
        }

        protected virtual object OnCreateInstance(Type componentType, IList<object> args)
        {
            return Activator.CreateInstance(componentType, args.ToArray());
        }
    }
}
