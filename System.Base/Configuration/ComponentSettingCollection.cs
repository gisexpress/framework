//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.InteropServices;
using System.Xml;

namespace System.Configuration
{
    [DisplayName("Components")]
    public class ComponentSettingCollection : ApplicationConfigurationElement
    {
        static ComponentSettingCollection()
        {
            AttributeFilter = new Attribute[] { new ConfigurationValueAttribute(0) };
        }

        public ComponentSettingCollection(string prefix, string localName, string namespaceURI, XmlDocument doc) : base(prefix, localName, namespaceURI, doc)
        {
        }

        protected static readonly Attribute[] AttributeFilter;

        public void Load(object component)
        {
            string name;

            if (GetAttribute(component, out name))
            {
                var settings = ChildNodes.OfType<ComponentSetting>().FirstOrDefault(e => e.Name == name);

                if (settings == null)
                {
                    return;
                }

                foreach (PropertyDescriptor property in GetProperties(component))
                {
                    object value = settings.Properties.Get(property);

                    if (value == null)
                    {
                        continue;
                    }

                    property.SetValue(component, value);
                }
            }
        }

        public bool Save(object component)
        {
            string name;

            if (GetAttribute(component, out name))
            {
                var settings = ChildNodes.OfType<ComponentSetting>().FirstOrDefault(e => e.Name == name);

                if (settings == null)
                {
                    settings = (ComponentSetting)OwnerDocument.CreateElement("Component");
                    settings.Name = name;
                    AppendChild(settings);
                }

                foreach (PropertyDescriptor property in GetProperties(component))
                {
                    settings.Properties.Set(property, component);
                }

                return true;
            }

            return false;
        }

        public static bool GetAttribute(object component, out string name)
        {
            var id = component.GetType().GetAttribute<GuidAttribute>();

            if (id.HasValue())
            {
                name = id.Value;
                return true;
            }

            name = null;
            return false;
        }

        public static IEnumerable<PropertyDescriptor> GetProperties(object component)
        {
            return TypeDescriptor.GetProperties(component, AttributeFilter).Cast<PropertyDescriptor>().OrderBy(prop => prop.GetAttribute<ConfigurationValueAttribute>().Order);
        }
    }
}
