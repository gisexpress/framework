//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Xml;

namespace System.Configuration
{
    [DisplayName("Recents")]
    public class RecentPathCollection : ConfigurationNameValueCollection
    {
        public RecentPathCollection(string prefix, string localName, string namespaceURI, XmlDocument doc) : base(prefix, localName, namespaceURI, doc)
        {
        }

        public void Add(string path)
        {
            if (string.IsNullOrEmpty(path))
            {
                return;
            }

            XmlNode add = GetNodes().FirstOrDefault(e => e.InnerText == path);

            if (add == null)
            {
                add = OwnerDocument.CreateElement("add");
                add.InnerText = path;

                if (FirstChild == null)
                {
                    AppendChild(add);
                }
                else
                {
                    InsertBefore(add, FirstChild);
                }

                while (ChildNodes.Count > 10)
                {
                    RemoveChild(LastChild);
                }
            }
            else
            {
                add.InnerText = path;
                RemoveChild(add);
                InsertBefore(add, FirstChild);
            }

            RaiseChanged(path);
        }

        public IEnumerable<XmlNode> GetNodes()
        {
            if (HasChildNodes)
            {
                foreach (XmlNode item in GetElementsByTagName("add"))
                {
                    yield return item;
                }
            }
        }

        public IEnumerable<string> GetValues()
        {
            return GetNodes().Select(e => e.InnerText);
        }
    }
}
