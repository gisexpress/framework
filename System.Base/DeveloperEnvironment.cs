//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Web;

namespace System
{
    public static class DeveloperEnvironment
    {
        static DeveloperEnvironment()
        {
            if (Type.GetType("Mono.Runtime", false) == null)
            {
                MSFramework = true;
            }
            else
            {
                MonoFramework = true;
            }

            if (HttpContext.Current.HasValue())
            {
                WebApplication = false;
            }
            else
            {
                WindowsApplication = true;
            }

            if (WindowsApplication)
            {
                CommandLineArguments = new HashSet<string>(Environment.GetCommandLineArgs().Skip(1).Select(e => e.TrimStart('-')), StringComparer.InvariantCultureIgnoreCase);

                if (CommandLineArguments.Count > 0)
                {
                    CommandLine = CommandLineArguments.Join();
                }
            }
            else
            {
                CommandLineArguments = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
            }

#if DesignMode
            DesignMode = Assembly.GetEntryAssembly().IsNull();
            RuntimeMode = DesignMode == false;
#endif

#if ReleaseMode
            ReleaseMode = true;
            RuntimeMode = true;
#endif
            DebugMode = CommandLineArguments.Contains("Debug");
        }

        public static readonly bool DebugMode;
        public static readonly bool DesignMode;
        public static readonly bool RuntimeMode;
        public static readonly bool ReleaseMode;

        public static readonly bool MSFramework;
        public static readonly bool MonoFramework;

        public static readonly bool WebApplication;
        public static readonly bool WindowsApplication;

        public static readonly string CommandLine;
        public static readonly ISet<string> CommandLineArguments;
    }
}
