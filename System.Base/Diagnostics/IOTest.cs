//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;
using System.IO.Compression;

namespace System.Diagnostics
{
    internal class IOTest : IUnitTest
    {
        public int Priority
        {
            get { return 100; }
        }

        public void Run()
        {
            Binary();
            Compression();
        }

        public void Binary()
        {
            string fileName = Path.GetTempFileName();

            BinaryInternal(default(string));
            BinaryInternal(fileName);

            File.Delete(fileName);
        }

        void BinaryInternal(string fileName)
        {
            using (var file = new BinaryFile(fileName))
            {
                var prefix = "Değer ";
                var s0 = "Türkçe Karakter Test ş ü ö İ ğ ı ç";

                using (BinaryFileConnection connection = file.CreateConnection())
                {
                    using (var output = new BinaryFilePageStream(connection, 1))
                    {
                        output.Write(s0);

                        foreach (SampleData.NorthwindDatabase.Customer item in SampleData.Northwind.Customers)
                        {
                            output.Write(item.ContactName);
                        }
                    }
                }

                using (BinaryFileConnection connection = file.CreateConnection())
                {
                    using (var output = new BinaryFilePageStream(connection, 2))
                    {
                        for (int n = 1; n < 250; n++)
                        {
                            output.Write(string.Concat(prefix, Convert.ToString(n).PadLeft(6, '3')));
                        }

                        for (int n = 250; n < 500; n++)
                        {
                            output.Write(string.Concat(prefix, Convert.ToString(n).PadLeft(6, '3')));
                        }
                    }
                }

                using (BinaryFileConnection connection = file.CreateConnection())
                {
                    using (var input = new BinaryFilePageStream(connection, 1))
                    {
                        string s;

                        Debug.Assert(s0.Equals(s = input.ReadString()));

                        foreach (SampleData.NorthwindDatabase.Customer item in SampleData.Northwind.Customers)
                        {
                            Debug.Assert(Equals(item.ContactName, s = input.ReadString()));
                        }
                    }
                }

                using (BinaryFileConnection connection = file.CreateConnection())
                {
                    using (var input = new BinaryFilePageStream(connection, 2))
                    {
                        int n = 1;

                        while (input.CanRead())
                        {
                            Debug.Assert(Equals(string.Concat(prefix, Convert.ToString(n++).PadLeft(6, '3')), input.ReadString()));
                        }
                    }
                }
            }
        }

        void Compression()
        {
            string hexString

            using (var s = hexString.HexStringToByteArray().ToStream())
            {
                Zip value = Zip.Open(s);

                Debug.Assert(value.Entries["Bağlantı 1.txt"].Text.Equals("Türkçe Karakter Test ş ü ö İ ğ ı ç"));
                Debug.Assert(value.Entries["Bağlantı 2.txt"].Text.ContainsIgnoreCase("(ö,ç,ş,ı,ğ,ü)"));

                Debug.Assert(Equals(value.ToArray().ToHexString(), hexString));
            }
        }
    }
}