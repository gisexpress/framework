//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Xml;

namespace System.Drawing
{
    public class PaintStyle : XmlElementBase, IKeyedObject
    {
        static PaintStyle()
        {
            //Default = new PaintStyle();
            //Default.LineStyle.Width = 1;
            //Default.PolyStyle.Fill = true;
            //Default.PolyStyle.Color = Color.FromArgb(200, ApplicationAppereance.Colors.Control);

            Highlight = new PaintStyle(XmlDocumentBase.Empty);
            Highlight.LineStyle.Width = 2;
            Highlight.LineStyle.Color = Color.FromArgb(200, ApplicationAppereance.Colors.Highlight);
        }

        public PaintStyle(XmlDocument document) : base(string.Empty, Constants.Xml.Style, string.Empty, document)
        {
        }

        //public static readonly PaintStyle Default;
        public static readonly PaintStyle Highlight;

        public string Id
        {
            get { return GetAttribute("id"); }
            set { SetAttribute("id", value); }
        }

        string IKeyedObject.Name
        {
            get { return Id; }
        }

        //public bool IsDefault
        //{
        //    get;
        //    internal set;
        //}

        //public StyleRule Rule
        //{
        //    get { return RuleValue ?? (RuleValue = new StyleRule()); }
        //}

        //public StyleVisibility Visibility
        //{
        //    get { return VisibilityValue ?? (VisibilityValue = new StyleVisibility()); }
        //}

        public IconStyle IconStyle
        {
            get { return (IconStyle)GetOrCreate("IconStyle"); }
        }

        public LabelStyle LabelStyle
        {
            get { return (LabelStyle)GetOrCreate("LabelStyle"); }
        }

        public LineStyle LineStyle
        {
            get { return (LineStyle)GetOrCreate("LineStyle"); }
        }

        public PolyStyle PolyStyle
        {
            get { return (PolyStyle)GetOrCreate("PolyStyle"); }
        }

        public override string ToString()
        {
            return Name;
        }
    }
}
