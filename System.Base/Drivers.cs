//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;

namespace System
{
    public static class Drivers
    {
        static Drivers()
        {
            typeof(Drivers).Assembly.RegisterAll();
        }

        public static void RegisterAll()
        {
            Network.RegisterAll();
        }

        public static void RegisterAll(this Assembly assembly)
        {
            ISet<string> assemblies = AppDomain.CurrentDomain.GetAssemblyNames();

            foreach (Stream stream in assembly.GetResourceStreams(".zip"))
            {
                foreach (ZipEntry e in Zip.Open(stream).Entries)
                {
                    if (Environment.Is64BitProcess)
                    {
                        if (e.Name.Contains("x32"))
                        {
                            continue;
                        }
                    }
                    else if (e.Name.Contains("x64"))
                    {
                        continue;
                    }

                    if (e.IsFile && assemblies.Add(Path.GetFileNameWithoutExtension(e.Name)))
                    {
                        AppDomain.CurrentDomain.Load(e.Bytes);
                    }
                }
            }
        }

        public static ISet<string> GetAssemblyNames(this AppDomain domain)
        {
            return new HashSet<string>(domain.GetAssemblies().Select(item => item.GetName().Name));
        }

        public static IEnumerable<T> GetAssemblyAttributes<T>(this AppDomain domain) where T : Attribute
        {
            foreach (IEnumerable<T> e in domain.GetAssemblies().Select(item => item.GetAttributes<T>()))
            {
                foreach (T item in e)
                {
                    yield return item;
                }
            }
        }

        public static Type FindType(this AppDomain domain, string assemblyName, string typeName)
        {
            Assembly assembly = domain.GetAssemblies().FirstOrDefault(item => item.FullName.StartsWith(assemblyName));

            if (assembly.HasValue())
            {
                return assembly.GetType(typeName);
            }

            return default(Type);
        }
    }
}