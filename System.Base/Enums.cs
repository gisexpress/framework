//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace System
{
    public static class Enums
    {
        public static bool IsDefined<TEnum>(object value) where TEnum : struct
        {
            return Enum.IsDefined(typeof(TEnum), value);
        }

        public static TEnum Parse<TEnum>(string value) where TEnum : struct
        {
            return (TEnum)Enum.Parse(typeof(TEnum), value, true);
        }

        public static TEnum Parse<TEnum>(string value, TEnum defaultValue) where TEnum : struct
        {
            if (!string.IsNullOrEmpty(value))
            {
                TEnum result = defaultValue;

                if (Enum.TryParse<TEnum>(value, true, out result))
                {
                    return result;
                }
            }

            return defaultValue;
        }

        public static string GetName<TEnum>(TEnum value) where TEnum : struct
        {
            return Enum.GetName(typeof(TEnum), value);
        }

        public static string GetDisplayName<TEnum>(TEnum value) where TEnum : struct
        {
            string displayName;

            if (TryGetDisplayName(value, out displayName))
            {
                return displayName;
            }

            return GetName(value);
        }

        public static bool TryGetDisplayName<TEnum>(TEnum value, out string displayName) where TEnum : struct
        {
            return Localization.TryGetValue(string.Concat(typeof(TEnum).Name, '.', GetName(value)), out displayName);
        }

        public static IEnumerable<TEnum> GetValues<TEnum>() where TEnum : struct
        {
            foreach (TEnum item in Enum.GetValues(typeof(TEnum)))
            {
                yield return item;
            }
        }
    }
}
