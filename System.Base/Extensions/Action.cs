//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace System
{
    public static class ActionExtensions
    {
        public static object InvokeSafely(this Delegate action, params object[] args)
        {
            if (action.HasValue())
            {
                return action.DynamicInvoke(args);
            }

            return default(object);
        }

        public static void InvokeSafely(this IEnumerable<Delegate> e, params object[] args)
        {
            foreach (Delegate action in e)
            {
                action.InvokeSafely(args);
            }
        }

        public static object InvokeSafely<T>(this Delegate action, params object[] args) where T : EventArgs
        {
            if (action.HasValue())
            {
                return action.DynamicInvoke(Activator.CreateInstance(typeof(T), args));
            }

            return default(object);
        }

        public static void InvokeSafely<T>(this IEnumerable<Delegate> e, params object[] args) where T : EventArgs
        {
            foreach (Delegate action in e)
            {
                action.InvokeSafely<T>(args);
            }
        }
    }
}
