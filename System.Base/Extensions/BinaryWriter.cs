////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////


//namespace System.IO
//{
//    public static class BinaryWriterExtensions
//    {
//        public static BinaryWriter Create()
//        {
//            return new BinaryWriter(new MemoryStream());
//        }

//        public static BinaryWriter Open(Stream output)
//        {
//            return new BinaryWriter(output);
//        }

//        public static BinaryWriter CreateFile(string path)
//        {
//            return new BinaryWriter(File.Create(path));
//        }

//        public static void Clear(this BinaryWriter writer)
//        {
//            writer.BaseStream.SetLength(0);
//        }

//        public static long Reset(this BinaryWriter writer)
//        {
//            return Goto(writer, 0);
//        }

//        public static void Forward(this BinaryWriter writer, long value)
//        {
//            Stream stream = writer.BaseStream;

//            long length = stream.Length;
//            long position = stream.Position;

//            if ((stream.Position + value) < length)
//            {
//                stream.Position += value;
//            }
//            else
//            {
//                stream.SetLength(position + length);
//                stream.Position = stream.Length;
//            }
//        }

//        public static long Goto(this BinaryWriter writer, long position)
//        {
//            long n = writer.BaseStream.Position;
//            writer.BaseStream.Position = position;
//            return n;
//        }

//        public static long GotoEnd(this BinaryWriter writer)
//        {
//            long n = writer.BaseStream.Length;
//            writer.BaseStream.Position = n;
//            return n;
//        }

//        public static void Write(this BinaryWriter writer, DateTime value)
//        {
//            writer.Write(value.ToBinary());
//        }

//        public static void Write(this BinaryWriter writer, byte[] value)
//        {
//            writer.Write(value.Length);
//            writer.Write(value);
//        }

//        public static void WriteBigEndianInt32(this BinaryWriter writer, int value)
//        {
//            var bytes = BitConverter.GetBytes(value);
//            Array.Reverse(bytes);
//            writer.Write(bytes);
//        }

//        public static void WriteBigEndianDouble(this BinaryWriter writer, double value)
//        {
//            var bytes = BitConverter.GetBytes(value);
//            Array.Reverse(bytes);
//            writer.Write(bytes);
//        }

//        public static void WriteBytesN(this BinaryWriter writer, int length)
//        {
//            if (length > 0)
//            {
//                byte value = 0;

//                for (int n = 0; n < length; n++)
//                {
//                    writer.Write(value);
//                }
//            }
//        }

//        public static void WriteValue(this BinaryWriter writer, object value, TypeCode type)
//        {
//            switch (type)
//            {
//                case TypeCode.Byte:
//                    writer.Write(value.ConvertTo(default(SByte)));
//                    break;
//                case TypeCode.SByte:
//                    writer.Write(value.ConvertTo(default(SByte)));
//                    break;
//                case TypeCode.Boolean:
//                    writer.Write(value.ConvertTo(default(Boolean)));
//                    break;
//                case TypeCode.Char:
//                    writer.Write(value.ConvertTo(default(Char)));
//                    break;
//                case TypeCode.Single:
//                    writer.Write(value.ConvertTo(default(Single)));
//                    break;
//                case TypeCode.Decimal:
//                    writer.Write(value.ConvertTo(default(Decimal)));
//                    break;
//                case TypeCode.Double:
//                    writer.Write(value.ConvertTo(default(Double)));
//                    break;
//                case TypeCode.Int16:
//                    writer.Write(value.ConvertTo(default(Int16)));
//                    break;
//                case TypeCode.Int32:
//                    writer.Write(value.ConvertTo(default(Int32)));
//                    break;
//                case TypeCode.Int64:
//                    writer.Write(value.ConvertTo(default(Int64)));
//                    break;
//                case TypeCode.UInt16:
//                    writer.Write(value.ConvertTo(default(UInt16)));
//                    break;
//                case TypeCode.UInt32:
//                    writer.Write(value.ConvertTo(default(UInt32)));
//                    break;
//                case TypeCode.UInt64:
//                    writer.Write(value.ConvertTo(default(UInt64)));
//                    break;
//                case TypeCode.String:
//                    writer.Write(value.ConvertTo(string.Empty));
//                    break;
//                case TypeCode.DateTime:
//                    writer.Write((DateTime)value);
//                    break;
//                default:
//                    throw new NotSupportedException();
//            }
//        }

//        //public static bool WriteValueType(this BinaryWriter writer, object value, Type valueType)
//        //{
//        //    if (valueType.IsValueType)
//        //    {
//        //        WriteString(writer, valueType.AssemblyQualifiedName);
//        //        Write(writer, ObjectExtensions.GetBytes(value));
//        //        return true;
//        //    }

//        //    return false;
//        //}

//        public static byte[] ToByteArray(this BinaryWriter writer)
//        {
//            using (var stream = writer.BaseStream as MemoryStream)
//            {
//                stream.Flush();
//                stream.Close();

//                return stream.ToArray();
//            }
//        }
//    }
//}
