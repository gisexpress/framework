//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Drawing.Imaging;
using System.IO;

namespace System
{
    public static class BitmapExtensions
    {
        public static Bitmap NewImage(Image original)
        {
            return new Bitmap(original);
        }

        public static Bitmap NewImage(Image original, int width, int height)
        {
            return new Bitmap(original, width, height);
        }

        public static Bitmap NewImage(int width, int height)
        {
            return new Bitmap(width, height, PixelFormat.Format32bppPArgb);
        }

        public static Bitmap ReSize(this Image img, int maxWidth)
        {
            if (img.HasValue())
            {
                if (img.Width > maxWidth)
                {
                    var image = NewImage(maxWidth, (int)(maxWidth * (img.Height / (float)img.Width)));

                    using (var g = Graphics.FromImage(image))
                    {
                        g.DrawImage(img, 0, 0, image.Width, image.Height);
                    }

                    return image;
                }

                return (Bitmap)img.Clone();
            }

            return default(Bitmap);
        }

        public static Image ToBitmap(this byte[] bytes)
        {
            using (var stream = new MemoryStream(bytes))
            {
                return new Bitmap(Image.FromStream(stream));
            }
        }

        public static byte[] GetBytes(this Image img)
        {
            return GetBytes(img as Bitmap, ImageFormat.Png, img.Width, img.Height);
        }

        public static byte[] GetBytes(this Bitmap img)
        {
            return GetBytes(img, ImageFormat.Png, img.Width, img.Height);
        }

        public static byte[] GetBytes(this Image img, ImageFormat format)
        {
            return GetBytes(img as Bitmap, format, img.Width, img.Height);
        }

        public static byte[] GetBytes(this Bitmap img, ImageFormat format, int width, int height)
        {
            using (var memory = new MemoryStream())
            {
                if (width > 0 && height > 0)
                {
                    img = BitmapExtensions.NewImage(img, width, height);
                }

                img.Save(memory, format);
                memory.Flush();
                return memory.ToArray();
            }
        }

        public static Image MakeDisableEffect(this Image image)
        {
            if (image == null)
            {
                return default;
            }

            try
            {
                var bounds = new Rectangle(0, 0, image.Width, image.Height);
                var imageNew = NewImage(bounds.Width, bounds.Height);

                using (var g = Graphics.FromImage(imageNew))
                {
                    using (var attributes = new ImageAttributes())
                    {
                        var newColorMatrix = new ColorMatrix { Matrix33 = 0.4f };
                        attributes.SetColorMatrix(newColorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);

                        using (var img = image.MakeGrayscale())
                        {
                            g.DrawImage(img, bounds, 0, 0, bounds.Width, bounds.Height, GraphicsUnit.Pixel, attributes);
                        }
                    }
                }

                return imageNew;
            }
            catch
            {
                return image;
            }
        }

        public static Bitmap MakeGrayscale(this Image image)
        {
            if (image.HasValue())
            {
                var bounds = new Rectangle(0, 0, image.Width, image.Height);
                var imageNew = NewImage(bounds.Width, bounds.Height);

                using (var g = Graphics.FromImage(imageNew))
                {
                    using (var attributes = new ImageAttributes())
                    {
                        var newColorMatrix = new ColorMatrix(new float[][]
                        {
                            new float[] {.3f, .3f, .3f, 0, 0},
                            new float[] {.59f, .59f, .59f, 0, 0},
                            new float[] {.11f, .11f, .11f, 0, 0},
                            new float[] {0, 0, 0, 1, 0},
                            new float[] {0, 0, 0, 0, 1}
                        });

                        attributes.SetColorMatrix(newColorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);
                        g.DrawImage(image, bounds, 0, 0, bounds.Width, bounds.Height, GraphicsUnit.Pixel, attributes);
                    }
                }

                return imageNew;
            }

            return null;
        }
    }
}
