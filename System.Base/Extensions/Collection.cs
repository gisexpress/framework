//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;

namespace System
{
    public static class CollectionExtensions
    {
        public static string Join(this IEnumerable<object> e)
        {
            return Join(e, " ");
        }

        public static string Join(this IEnumerable<object> e, string separator)
        {
            return string.Join(separator, e.RemoveNullElements());
        }

        public static string GetString(this byte[] bytes)
        {
            return new string(Enumerable.Range(0, bytes.Length).Where(x => x % 2 == 0).Select(x => BitConverter.ToChar(bytes, x)).ToArray());
        }

        public static string ToHexString(this byte[] bytes)
        {
            return BitConverter.ToString(bytes).Replace("-", string.Empty);
        }

        public static string GetName<T>(this IEnumerable<T> e) where T : IKeyedObject
        {
            return GetName(e, string.Empty, string.Empty, default(T));
        }

        public static string GetName<T>(this IEnumerable<T> e, string prefix) where T : IKeyedObject
        {
            return GetName(e, prefix, " ", default(T));
        }

        public static string GetName<T>(this IEnumerable<T> e, string prefix, string seperator) where T : IKeyedObject
        {
            return GetName(e, prefix, seperator, default(T));
        }

        public static string GetName<T>(this IEnumerable<T> e, string prefix, string seperator, T item) where T : IKeyedObject
        {
            IEnumerable<T> e0 = e.RemoveNullElements();

            if (item.IsNull() || e0.Any(o => o.Name == item.Name))
            {
                int n = 1;
                string name = string.Concat(prefix, seperator, n);

                while (e0.Any(o => o.Name == name))
                {
                    name = string.Concat(prefix, seperator, ++n);
                }

                return name;
            }

            return item.Name;
        }

        public static T[] Add<T>(this T[] array, T value)
        {
            Array.Resize(ref array, array.Length + 1);
            array[array.Length - 1] = value;
            return array;
        }

        public static T[] Remove<T>(this Array array, object value)
        {
            return array.Cast<T>().Where(item => !ReferenceEquals(item, value)).ToArray();
        }

        public static bool RemoveWhere<T>(this ICollection<T> collection, Func<T, bool> predicate)
        {
            bool handled = false;

            foreach (T item in collection.ToArray())
            {
                if (predicate(item))
                {
                    if (collection.Remove(item))
                    {
                        handled = true;
                    }
                }
            }

            return handled;
        }

        public static IEnumerable<T> RemoveNullElements<T>(this IEnumerable<T> e)
        {
            return e.Where(item => item.HasValue());
        }

        public static IEnumerable<string> RemoveNullOrEmptyElements(this IEnumerable<string> e)
        {
            foreach (string item in e)
            {
                string value = (item ?? string.Empty).Trim();

                if (!string.IsNullOrEmpty(value))
                {
                    yield return value;
                }
            }
        }

        public static IEnumerable<TSource> ReverseIf<TSource>(this IEnumerable<TSource> source, bool reverse)
        {
            if (reverse)
            {
                return source.Reverse();
            }
            else
            {
                return source;
            }
        }

        public static void ForEach<TSource>(this IEnumerable<TSource> source, Action<TSource> action)
        {
            foreach (TSource item in source)
            {
                action(item);
            }
        }

        public static void ForEach<TSource>(this IEnumerable<TSource> source, Action<TSource> action, bool reverse)
        {
            IEnumerable<TSource> e = reverse ? source.Reverse() : source;

            foreach (TSource item in e)
            {
                action(item);
            }
        }

        public static Stream ToStream(this byte[] value)
        {
            if (value.HasValue())
            {
                var output = new MemoryStream();

                output.Write(value);
                output.Reset();

                return output;
            }

            return default(Stream);
        }

        [CLSCompliant(false)]
        public static uint GetChecksum(this byte[] value)
        {
            uint r = Crc32.Default.Compute(value);
            Debug.Print(string.Concat("Checksum : ", r));
            return r;
        }

        public static int HashCode(params object[] args)
        {
            if (args.Length > 0)
            {
                int n = 23;

                unchecked
                {
                    foreach (object obj in args)
                    {
                        n = n * 31 + (obj ?? 0).GetHashCode();
                    }
                }

                return n;
            }

            return 0;
        }

        public static void ValidateCapacity(this IDictionary e, int capacity)
        {
            if (e.Count > capacity)
            {
                var n = (int)(capacity * 0.9);

                while (e.Count > n)
                {
                    e.Remove(e.Keys.Cast<object>().First());
                }
            }
        }

        public static bool DisposeItems(this ICollection e)
        {
            if (e.HasValue())
            {
                e.OfType<IDisposable>().ToList().ForEach(item => item.Dispose());
                return true;
            }

            return false;
        }

        public static bool DisposeItems(this IList e)
        {
            if (e.HasValue())
            {
                DisposeItems((ICollection)e);

                if (e.IsReadOnly)
                {
                    return true;
                }

                e.Clear();
                return true;
            }

            return false;
        }

        public static bool DisposeItems(this IDictionary e)
        {
            if (e.HasValue())
            {
                DisposeItems(e.Values);
                e.Clear();
                return true;
            }

            return false;
        }
    }
}