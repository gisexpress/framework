//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace System
{
    public static class ControlExtensions
    {
        const int GripSize = 8;

        public static bool GetData<T>(this IDataObject data, out T value)
        {
            foreach (string format in data.GetFormats())
            {
                object item = data.GetData(format, false);

                if (typeof(T).IsInstanceOfType(item))
                {
                    value = (T)item;
                }
            }

            value = default(T);
            return false;
        }

        public static void InvokeAction(this ISynchronizeInvoke component, Action action, params object[] args)
        {
            if (component.HasValue())
            {
                if (component.InvokeRequired)
                {
                    component.Invoke(action, args);
                }
                else
                {
                    action();
                }
            }
        }

        public static void InvokeAction<TArg>(this ISynchronizeInvoke component, Action<TArg> action, TArg argument)
        {
            if (component.HasValue())
            {
                if (component.InvokeRequired)
                {
                    component.Invoke(action, new object[] { argument });
                }
                else
                {
                    action(argument);
                }
            }
        }

        public static object InvokeFunction(this ISynchronizeInvoke component, Func<object> action, params object[] args)
        {
            if (component.HasValue())
            {
                if (component.InvokeRequired)
                {
                    return component.Invoke(action, args);
                }
                else
                {
                    return action();
                }
            }

            return default(object);
        }

        public static void UpdateFocus(this Control component)
        {
            if (component.Visible && component.Enabled && component.CanFocus)
            {
                if (component.Focused)
                {
                    return;
                }
                else
                {
                    component.Focus();
                }
            }
        }

        public static bool AddChangedEvent(this Control component, EventHandler onChanged)
        {
            if (component.Controls.Count > 0)
            {
                foreach (Control c in component.Controls)
                {
                    AddChangedEvent(c, onChanged);
                }
            }

            return AddChangedEvent(component as TextBox, onChanged) ||
                   AddChangedEvent(component as ComboBox, onChanged) ||
                   AddChangedEvent(component as CheckBox, onChanged) ||
                   AddChangedEvent(component as RadioButton, onChanged) ||
                   AddChangedEvent(component as NumericUpDown, onChanged);
        }

        public static bool AddChangedEvent(this TextBox control, EventHandler onChanged)
        {
            if (control.HasValue())
            {
                control.TextChanged += onChanged;
                return true;
            }

            return false;
        }

        public static bool AddChangedEvent(this ComboBox control, EventHandler onChanged)
        {
            if (control.HasValue())
            {
                control.TextChanged += onChanged;
                return true;
            }

            return false;
        }

        public static bool AddChangedEvent(this CheckBox control, EventHandler onChanged)
        {
            if (control.HasValue())
            {
                control.CheckedChanged += onChanged;
                return true;
            }

            return false;
        }

        public static bool AddChangedEvent(this RadioButton control, EventHandler onChanged)
        {
            if (control.HasValue())
            {
                control.CheckedChanged += onChanged;
                return true;
            }

            return false;
        }

        public static bool AddChangedEvent(this NumericUpDown control, EventHandler onChanged)
        {
            if (control.HasValue())
            {
                control.ValueChanged += onChanged;
                return true;
            }

            return false;
        }

        public static Control GetOwner(this Control value)
        {
            Control parent = value;

            while (parent.Parent.HasValue())
            {
                parent = parent.Parent;
            }

            return parent;
        }

        public static TControl GetParent<TControl>(this Control value) where TControl : Control
        {
            if (value.HasValue())
            {
                TControl c;
                Control parent = value;

                while (parent.Parent.HasValue())
                {
                    c = (parent = parent.Parent) as TControl;

                    if (c.HasValue())
                    {
                        return c;
                    }
                }
            }

            return null;
        }

        public static IEnumerable<Control> GetControls(this Control value)
        {
            return GetControls<Control>(value);
        }

        public static IEnumerable<Control> GetControls(this Control value, bool allChildren)
        {
            return GetControls<Control>(value, allChildren);
        }

        public static IEnumerable<T> GetControls<T>(this Control value) where T : Control
        {
            return GetControls<T>(value, false);
        }

        public static IEnumerable<T> GetControls<T>(this Control value, bool allChildren) where T : Control
        {
            var e = value.Controls.Cast<Control>().ToList();

            if (allChildren)
            {
                return e.SelectMany(c => GetControls<T>(c, allChildren)).Concat(e).OfType<T>();
            }

            return e.OfType<T>();
        }

        public static int IndexOf<TControl>(this Control.ControlCollection collection, TControl value) where TControl : Control
        {
            return collection.Cast<Control>().Where(c => c is TControl).ToList().IndexOf(value);
        }

        public static bool IsHitTest(this Message e)
        {
            return e.Msg == (int)WindowsMessage.NCHitTest;
        }

        public static bool IsSetCursor(this Message e)
        {
            return OSEnvironment.IsWindows && e.Msg == (int)WindowsMessage.SetCursor && ((e.LParam.ToInt32() << 16) >> 16) == 1;
        }

        public static Point GetLocation(this Message e)
        {
            return new Point(e.LParam.ToInt32() & 0XFFFF, e.LParam.ToInt32() >> 16);
        }

        public static bool WndProcTransparentHit(this Control component, ref Message e)
        {
            if (e.IsHitTest())
            {
                e.Result = new IntPtr(-1);
                return true;
            }

            return false;
        }

        public static bool WndProcWindow(this Control component, ref Message e, Border3DSide allowedSides, int captionHeight)
        {
            return WndProcWindow(component, ref e, allowedSides, captionHeight, default(Action<Point>));
        }

        public static bool WndProcWindow(this Control component, ref Message e, Border3DSide allowedSides, int captionHeight, Action<Point> onCaptionClick)
        {
            if (OSEnvironment.IsWindows)
            {
                if (e.IsHitTest() && (e.Result.ToInt32() == 1 || e.Result.ToInt32() == -1))
                {
                    Point location = component.PointToClient(e.GetLocation());

                    if (allowedSides != 0)
                    {
                        bool allowTop = allowedSides.HasFlag(Border3DSide.Top);
                        bool allowBottom = allowedSides.HasFlag(Border3DSide.Bottom);
                        bool allowLeft = allowedSides.HasFlag(Border3DSide.Left);
                        bool allowRight = allowedSides.HasFlag(Border3DSide.Right);

                        if (location.Y <= GripSize)
                        {
                            if (allowTop)
                            {
                                if (allowLeft && location.X <= GripSize)
                                {
                                    e.Result = new IntPtr(13);
                                    return true;
                                }
                                else if (allowRight && location.X <= component.Width - GripSize)
                                {
                                    e.Result = new IntPtr(12);
                                    return true;
                                }
                                else if (location.Y <= GripSize / 2)
                                {
                                    e.Result = new IntPtr(14);
                                    return true;
                                }
                            }
                        }
                        else if (location.Y >= component.Size.Height - GripSize)
                        {
                            if (allowBottom)
                            {
                                if (allowLeft && location.X <= GripSize)
                                {
                                    e.Result = new IntPtr(16);
                                    return true;
                                }
                                else if (allowRight && location.X >= component.Width - GripSize)
                                {
                                    e.Result = new IntPtr(17);
                                    return true;
                                }
                                else
                                {
                                    e.Result = new IntPtr(15);
                                    return true;
                                }
                            }
                        }
                        else if (allowLeft && location.X <= GripSize)
                        {
                            e.Result = new IntPtr(10);
                            return true;
                        }
                        else if (allowRight && location.X >= component.Size.Width - GripSize)
                        {
                            e.Result = new IntPtr(11);
                            return true;
                        }
                    }

                    if (captionHeight > 0 && location.Y <= captionHeight)
                    {
                        e.Result = new IntPtr(2);
                        return true;
                    }
                }
                else if (e.Msg == (int)WindowsMessage.NCRButtonDown && onCaptionClick.HasValue())
                {
                    Point location = component.PointToClient(e.GetLocation());

                    if (captionHeight > 0 && location.Y <= captionHeight)
                    {
                        onCaptionClick(location);
                        return true;
                    }
                }
            }

            return false;
        }
    }
}
