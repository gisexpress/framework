//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;

namespace System
{
    public static class Equality
    {
        public static bool IsEquivalent<T>(this IEnumerable<T> list, IEnumerable<T> other, Func<T, int> hash)
        {
            return IsEquivalent(list, other, hash, 0, ArrayComparison.Sequential);
        }

        public static bool IsEquivalent<T>(this IEnumerable<T> list, IEnumerable<T> other, Func<T, int> hash, ArrayComparison comparisonType)
        {
            return IsEquivalent(list, other, hash, 0, comparisonType);
        }

        public static bool IsEquivalent<T>(this IEnumerable<T> list, IEnumerable<T> other, Func<T, int> hash, int compareAt, ArrayComparison comparisonType)
        {
            if (list.Count() == other.Count())
            {
                if (comparisonType == ArrayComparison.Disorderly)
                {
                    return ArraysEqual(Sort(list.ToArray(), compareAt), Sort(other.ToArray(), compareAt), hash, 0);
                }

                if (ArraysEqual(list, other, hash, compareAt))
                {
                    return true;
                }

                if (comparisonType == ArrayComparison.Reversed && ArraysEqual(list, other.Reverse(), hash, compareAt))
                {
                    return true;
                }
            }

            return false;
        }

        static bool ArraysEqual<T>(IEnumerable<T> list, IEnumerable<T> other, Func<T, int> hash, int compareAt)
        {
            int n = 0;
            IEnumerator<T> e1 = list.GetEnumerator();
            IEnumerator<T> e2 = other.GetEnumerator();

            while (compareAt < n)
            {
                if (e1.MoveNext() && e2.MoveNext())
                {
                    n++;
                }
            }

            while (e1.MoveNext() && e2.MoveNext())
            {
                if (hash(e1.Current) != hash(e2.Current))
                {
                    return false;
                }
            }

            return true;
        }

        static IEnumerable<T> Sort<T>(T[] array, int arrayIndex)
        {
            var sortedArray = new T[array.Length - arrayIndex];

            Array.Copy(array.ToArray(), arrayIndex, sortedArray, 0, sortedArray.Length);
            Array.Sort(sortedArray);

            return sortedArray;
        }

        static int GetHashCode(object obj)
        {
            return (obj ?? 0).GetHashCode();
        }
    }
}
