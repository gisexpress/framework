//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Configuration;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace System
{
    public static class GraphicsExtensions
    {
        static readonly SmoothingMode SmoothingMode;
        static readonly CompositingQuality CompositingQuality;
        static readonly TextRenderingHint TextRenderingHint;
        static readonly InterpolationMode InterpolationMode;

        static GraphicsExtensions()
        {
            SmoothingMode = Enums.Parse(ConfigurationManager.AppSettings["SmoothingMode"], SmoothingMode.HighQuality);
            TextRenderingHint = Enums.Parse(ConfigurationManager.AppSettings["TextRenderingHint"], TextRenderingHint.ClearTypeGridFit);
            InterpolationMode = Enums.Parse(ConfigurationManager.AppSettings["InterpolationMode"], InterpolationMode.HighQualityBicubic);
            CompositingQuality = Enums.Parse(ConfigurationManager.AppSettings["CompositingQuality"], CompositingQuality.HighQuality);
        }

        public static void SetHighQuality(this Graphics g)
        {
            g.SmoothingMode = SmoothingMode;
            g.TextRenderingHint = TextRenderingHint;
            g.InterpolationMode = InterpolationMode;
            g.CompositingQuality = CompositingQuality;
        }

        public static StringAlignment ToHorizontal(this ContentAlignment alignment)
        {
            switch (alignment)
            {
                case ContentAlignment.TopCenter:
                case ContentAlignment.MiddleCenter:
                case ContentAlignment.BottomCenter:
                    return StringAlignment.Center;
                case ContentAlignment.TopRight:
                case ContentAlignment.MiddleRight:
                case ContentAlignment.BottomRight:
                    return StringAlignment.Far;
            }

            return StringAlignment.Near;
        }

        public static StringAlignment ToVertical(this ContentAlignment alignment)
        {
            switch (alignment)
            {
                case ContentAlignment.TopLeft:
                case ContentAlignment.TopCenter:
                case ContentAlignment.TopRight:
                    return StringAlignment.Near;
                case ContentAlignment.BottomLeft:
                case ContentAlignment.BottomCenter:
                case ContentAlignment.BottomRight:
                    return StringAlignment.Far;
            }

            return StringAlignment.Center;
        }

        public static void DrawText(this Graphics g, DrawTextEventArgs e)
        {
            if (e.BackColor.A > 0)
            {
                using (var brush = new SolidBrush(e.BackColor))
                {
                    g.FillRectangle(brush, e.Bounds);
                }
            }

            if (!e.Bounds.IsEmpty)
            {
                using (Font font = e.GetFont())
                {
                    TextRenderer.DrawText(g, e.Text, font, e.Bounds, e.ForeColor, e.FormatFlags | TextFormatFlags.NoPrefix);
                }
            }
            else if (!e.Origin.IsEmpty && e.FontSize > 3F)
            {
                using (GraphicsPath path = g.AppendText(e))
                {
                    e.DrawPath(g, path);
                }
            }
        }

        public static GraphicsPath AppendText(this Graphics g, DrawTextEventArgs e)
        {
            var path = new GraphicsPath();

            path.AddString(e.Text, e.FontFamily, (int)e.FontStyle, e.FontSize, e.Origin, default(StringFormat));
            path.AlignPath(e);

            return path;
        }

        public static void TryDrawPath(this Graphics g, Pen pen, GraphicsPath path)
        {
            try
            {
                g.DrawPath(pen, path);
            }
            catch
            {
            }
        }

        public static void TryFillPath(this Graphics g, Brush brush, GraphicsPath path)
        {
            if (brush == null)
            {
                return;
            }

            try
            {
                g.FillPath(brush, path);
            }
            catch
            {
            }
        }

        public static float DrawPath3D(this Graphics g, GraphicsPath path, Color color)
        {
            return DrawPath3D(g, path, color, 3);
        }

        public static float DrawPath3D(this Graphics g, GraphicsPath path, Color color, int level)
        {
            int size = 3;
            int alpha = 20;
            float penWidth = 0;

            using (Pen pen = new Pen(Color.Empty) { LineJoin = LineJoin.Round })
            {
                for (int n = 1; n <= level; n++)
                {
                    pen.Width = size * (level - n);
                    pen.Color = Color.FromArgb(alpha * n, color);
                    penWidth = Math.Max(penWidth, pen.Width);

                    TryDrawPath(g, pen, path);
                }
            }

            using (var transform = new Matrix(1, 0, 0, 1, -1, -1))
            {
                path.Transform(transform);

                using (var brush = new SolidBrush(color))
                {
                    TryFillPath(g, brush, path);
                }
            }

            return penWidth;
        }

        public static void DrawBorder3D(this Graphics g, int x, int y, int width, int height)
        {
            DrawBorder3D(g, x, y, width, height, Border3DSide.All);
        }

        public static void DrawBorder3D(this Graphics g, int x, int y, int width, int height, Border3DSide sides)
        {
            using (var path = new GraphicsPath())
            {
                SetHighQuality(g);
                path.AddRectangle(x, y, width, height, sides);

                using (var pen = new Pen(Color.FromArgb(20, ControlPaint.ContrastControlDark), 3) { LineJoin = LineJoin.Round })
                {
                    TryDrawPath(g, pen, path);
                }

                using (var pen = new Pen(Color.FromArgb(160, ControlPaint.ContrastControlDark)) { LineJoin = LineJoin.Round })
                {
                    TryDrawPath(g, pen, path);
                }
            }
        }

        public static void DrawRectangle(this Graphics g, Pen pen, int x, int y, int width, int height)
        {
            DrawRectangle(g, pen, x, y, width, height, 0, Border3DSide.All);
        }

        public static void DrawRectangle(this Graphics g, Pen pen, int x, int y, int width, int height, int radius)
        {
            DrawRectangle(g, pen, x, y, width, height, radius, Border3DSide.All);
        }

        public static void DrawRectangle(this Graphics g, Pen pen, int x, int y, int width, int height, Border3DSide sides)
        {
            DrawRectangle(g, pen, x, y, width, height, 0, sides);
        }

        public static void DrawRectangle(this Graphics g, Pen pen, int x, int y, int width, int height, int radius, Border3DSide sides)
        {
            using (var path = new GraphicsPath())
            {
                path.AddRectangle(x, y, width, height, radius, sides);
                TryDrawPath(g, pen, path);
            }
        }

        public static void DrawCancel(this Graphics g, Color color, float width, float height)
        {
            DrawCancel(g, color, 0, 0, width, height);
        }

        public static void DrawCancel(this Graphics g, Color color, float x, float y, float width, float height)
        {
            g.SetHighQuality();

            using (var path = new GraphicsPath())
            {
                float penWidth = width / 10;

                path.AddCancelFigure(x, y, width, height);

                using (var pen = new Pen(ApplicationAppereance.Colors.ButtonShadow, penWidth))
                {
                    TryDrawPath(g, pen, path);

                    pen.Color = color;
                    pen.Width = penWidth - 1F;

                    TryDrawPath(g, pen, path);
                }
            }
        }
    }
}
