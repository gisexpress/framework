//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;

namespace System
{
    public static class PropertyDescriptorExtensions
    {
        static PropertyDescriptorExtensions()
        {
            Cache = new Dictionary<Type, PropertyDescriptorCollection>();
        }

        private static readonly Dictionary<Type, PropertyDescriptorCollection> Cache;

        public static T GetAttribute<T>(this PropertyDescriptor property) where T : Attribute
        {
            return property.Attributes[typeof(T)] as T;
        }

        public static bool IsContains(this PropertyDescriptorCollection property, PropertyDescriptor value)
        {
            int n = property.IndexOf(value);

            if (n >= 0)
            {
                return ReferenceEquals(property[n], value);
            }

            return false;
        }

        public static bool TryGetPropertyType(this PropertyDescriptorCollection properties, string name, out Type propertyType)
        {
            PropertyDescriptor property = properties.Find(name, true);

            if (property.HasValue())
            {
                propertyType = property.PropertyType;
                return true;
            }

            propertyType = default(Type);
            return false;
        }

        public static bool TryGetPropertyValue(this PropertyDescriptorCollection properties, string name, object component, out object value)
        {
            PropertyDescriptor property = properties.Find(name, true);

            if (property.HasValue())
            {
                value = property.GetValue(component);
                return true;
            }

            value = default(object);
            return false;
        }

        public static ContentAlignment GetTextAlignment(this PropertyDescriptor property)
        {
            switch (Type.GetTypeCode(property.PropertyType))
            {
                case TypeCode.Byte:
                case TypeCode.SByte:
                case TypeCode.Int16:
                case TypeCode.Int32:
                case TypeCode.Int64:
                case TypeCode.UInt16:
                case TypeCode.UInt32:
                case TypeCode.UInt64:
                case TypeCode.Single:
                case TypeCode.Double:
                case TypeCode.Decimal:
                    return ContentAlignment.MiddleRight;
                case TypeCode.Boolean:
                case TypeCode.DateTime:
                    return ContentAlignment.MiddleCenter;
            }

            return ContentAlignment.MiddleLeft;
        }

        public static PropertyDescriptorCollection GetPropertyDescriptors(this Type componentType)
        {
            return GetPropertyDescriptors(componentType, Attributes.Browsable);
        }

        public static PropertyDescriptorCollection GetPropertyDescriptors(this Type componentType, Attribute[] attributes)
        {
            PropertyDescriptorCollection properties;

            if (!Cache.TryGetValue(componentType, out properties))
            {
                Cache.Add(componentType, properties = TypeDescriptor.GetProperties(componentType, attributes));
            }

            return properties;
        }
    }
}
