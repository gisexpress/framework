//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text.RegularExpressions;

namespace System
{
    public static class ReflectionExtensions
    {
        public static TValue GetPropertyValue<TValue>(this Type type, string name)
        {
            return GetPropertyValue<TValue>(type, default(object), name);
        }

        public static TValue GetPropertyValue<TValue>(this Type type, object obj, string name)
        {
            MethodInfo method = type.GetMethodOrProperty(name);

            if (method.HasValue())
            {
                return (TValue)method.Invoke(obj, default(object[]));
            }

            return default(TValue);
        }

        public static bool SetProperty(this Type type, object obj, string name, object value)
        {
            PropertyInfo property = obj.GetType().GetProperty(name, value.GetType());

            if (property.HasValue())
            {
                property.SetValue(obj, value, null);
                return true;
            }

            return false;
        }

        public static Type GetItemTypeOfList(this Type listType)
        {
            while (listType.HasValue())
            {
                if (listType.IsGenericType && listType.GetGenericArguments().Length == 1)
                {
                    break;
                }

                listType = listType.BaseType;
            }

            if (listType.HasValue())
            {
                return listType.GetGenericArguments().FirstOrDefault();
            }

            return default(Type);
        }

        public static FileInfo GetFileInfo(this Assembly assembly)
        {
            return new FileInfo(Uri.UnescapeDataString(new UriBuilder(assembly.CodeBase).Path));
        }

        public static bool IsWellKnownType(this TypeCode code)
        {
            switch (code)
            {
                case TypeCode.Byte:
                case TypeCode.SByte:
                case TypeCode.Boolean:
                case TypeCode.Char:
                case TypeCode.Single:
                case TypeCode.Double:
                case TypeCode.Decimal:
                case TypeCode.Int16:
                case TypeCode.Int32:
                case TypeCode.Int64:
                case TypeCode.UInt16:
                case TypeCode.UInt32:
                case TypeCode.UInt64:
                case TypeCode.String:
                case TypeCode.DateTime:
                    return true;
            }

            return false;
        }

        public static Type GetRuntimeType(this TypeCode code)
        {
            switch (code)
            {
                case TypeCode.Byte:
                    return Types.Byte;
                case TypeCode.SByte:
                    return Types.SByte;
                case TypeCode.Boolean:
                    return Types.Boolean;
                case TypeCode.Char:
                    return Types.Char;
                case TypeCode.DateTime:
                    return Types.DateTime;
                case TypeCode.Decimal:
                    return Types.Decimal;
                case TypeCode.Double:
                    return Types.Double;
                case TypeCode.Int16:
                    return Types.Int16;
                case TypeCode.Int32:
                    return Types.Int32;
                case TypeCode.Int64:
                    return Types.Int32;
                case TypeCode.Single:
                    return Types.Single;
                case TypeCode.String:
                    return Types.String;
                case TypeCode.UInt16:
                    return Types.UInt16;
                case TypeCode.UInt32:
                    return Types.UInt32;
                case TypeCode.UInt64:
                    return Types.UInt64;
            }

            Debug.Fail("Unknown TypeCode");

            return Types.Object;
        }

        public static bool HasAttribute<TAttribute>(this Type type) where TAttribute : Attribute
        {
            return type.GetAttribute<TAttribute>().HasValue();
        }

        public static TAttribute GetAttribute<TAttribute>(this Type type) where TAttribute : Attribute
        {
            return type.GetAttributes<TAttribute>().FirstOrDefault();
        }

        public static IEnumerable<TAttribute> GetAttributes<TAttribute>(this Type type) where TAttribute : Attribute
        {
            return GetCustomAttributes(type, typeof(TAttribute)).Cast<TAttribute>();
        }

        public static bool HasAttribute<TAttribute>(this Assembly assembly) where TAttribute : Attribute
        {
            return assembly.GetAttribute<TAttribute>().HasValue();
        }

        public static TAttribute GetAttribute<TAttribute>(this Assembly assembly) where TAttribute : Attribute
        {
            return assembly.GetAttributes<TAttribute>().FirstOrDefault();
        }

        public static IEnumerable<TAttribute> GetAttributes<TAttribute>(this Assembly assembly) where TAttribute : Attribute
        {
            return GetCustomAttributes(assembly, typeof(TAttribute)).Cast<TAttribute>();
        }

        public static IEnumerable<Attribute> GetCustomAttributes(this Type type, Type attributeType)
        {
            if (attributeType.HasValue())
            {
                foreach (Attribute attribute in type.GetCustomAttributes(attributeType, false).Cast<Attribute>())
                {
                    yield return attribute;
                }
            }
        }

        public static IEnumerable<Attribute> GetCustomAttributes(this Assembly assembly, Type attributeType)
        {
            if (attributeType.HasValue())
            {
                foreach (Attribute attribute in assembly.GetCustomAttributes(attributeType, false).Cast<Attribute>())
                {
                    yield return attribute;
                }
            }
        }

        public static IEnumerable<Attribute> GetCustomAttributes(this Assembly assembly, string attributeTypeName)
        {
            return GetCustomAttributes(assembly, Type.GetType(attributeTypeName, false)).Cast<Attribute>();
        }

        public static bool TryCreateInstance<T>(this Type type, out T value, params object[] args)
        {
            object o;

            if (TryCreateInstance(type, out o, args))
            {
                if (o is T)
                {
                    value = (T)o;
                    return true;
                }
            }

            value = default(T);
            return false;
        }

        public static bool TryCreateInstance(this Type type, out object value, params object[] args)
        {
            try
            {
                value = Activator.CreateInstance(type, args);
            }
            catch
            {
                value = null;
            }

            return value.HasValue();
        }

        public static IEnumerable<Delegate> AttachOverriddenEvents<TEventSource>(this Type targetType, object target, TEventSource eventSource)
        {
            return AttachOverriddenEvents(targetType, target, eventSource, null);
        }

        public static IEnumerable<Delegate> AttachOverriddenEvents<TEventSource>(this Type targetType, object target, TEventSource eventSource, Func<EventInfo, bool> predicate)
        {
            foreach (EventInfo e in GetEvents(typeof(TEventSource)))
            {
                MethodInfo method;

                if (GetOverriddenMethod(targetType, e, predicate, out method))
                {
                    Delegate handler = Delegate.CreateDelegate(e.EventHandlerType, target, method);
                    e.AddEventHandler(eventSource, handler);
                    yield return handler;
                }
            }
        }

        public static void DetachOverriddenEvents(this IList<Delegate> handlers, object eventSource)
        {
            foreach (EventInfo e in GetEvents(eventSource.GetType()))
            {
                Delegate handler = handlers.FirstOrDefault(item => item.Method.Name.Equals(string.Concat("On", e.Name)));

                if (handler.HasValue() && handlers.Remove(handler))
                {
                    e.RemoveEventHandler(eventSource, handler);
                }
            }
        }

        public static IEnumerable<EventInfo> GetEvents(this Type eventSource)
        {
            foreach (EventInfo e in eventSource.GetEvents(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
            {
                yield return e;
            }
        }

        public static bool GetOverriddenMethod(this Type targetType, EventInfo e, Func<EventInfo, bool> predicate, out MethodInfo method)
        {
            if (predicate.IsNull() || predicate(e))
            {
                method = targetType.GetMethod(string.Concat("On", e.Name), BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Instance);

                if (method.HasValue() && !method.IsPrivate)
                {
                    return true;
                }
            }

            method = default(MethodInfo);
            return false;
        }

        public static bool IsOverriddenMethod(this Type declaringType, string name)
        {
            MethodInfo method = declaringType.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);

            if (method.HasValue() && method.IsVirtual)
            {
                return method.DeclaringType.Equals(declaringType);
            }

            return false;
        }

        public static bool IsBrowsable(this PropertyInfo property)
        {
            var value = property.GetCustomAttributes(typeof(BrowsableAttribute), false).FirstOrDefault() as BrowsableAttribute;

            if (value.IsNull())
            {
                return true;
            }

            return value.Browsable;
        }

        public static bool IsIndexer(this PropertyInfo property, Type[] types)
        {
            ParameterInfo[] parameters = property.GetIndexParameters();

            if (parameters.Length == types.Length)
            {
                for (int n = 0; n < parameters.Length; n++)
                {
                    if (Type.GetTypeCode(parameters[n].ParameterType) != Type.GetTypeCode(types[n]))
                    {
                        return false;
                    }
                }

                return true;
            }

            return false;
        }

        public static ConstructorInfo GetConstructor(this Type declaringType, params Type[] types)
        {
            return declaringType.GetConstructor(types);
        }

        public static MethodInfo GetMethod(this Type declaringType, string name, params Type[] types)
        {
            return declaringType.GetMethod(name, types);
        }

        public static MethodInfo GetMethod(this Type declaringType, string name, BindingFlags bindingFlags, params Type[] types)
        {
            return declaringType.GetMethod(name, bindingFlags, Type.DefaultBinder, types, default(ParameterModifier[]));
        }

        public static MethodInfo GetGenericMethod(this Type declaringType, string name, params Type[] types)
        {
            return declaringType.GetMethods().FirstOrDefault(e => e.IsGenericMethod && e.Name.EqualsIgnoreCase(name) && e.GetParameters().Select(item => item.ParameterType).IsEquivalent(types));
        }

        public static MethodInfo GetMethodOrProperty(this Type declaringType, string name, params Type[] types)
        {
            return GetMethodOrProperty(declaringType, name, BindingFlags.Default, types);
        }

        public static MethodInfo GetMethodOrProperty(this Type declaringType, string name, BindingFlags bindingFlags, params Type[] types)
        {
            MethodInfo method = declaringType.GetMethod(name, bindingFlags, types) ?? declaringType.GetMethod(name, bindingFlags);

            if (method.IsNull())
            {
                PropertyInfo property = declaringType.GetProperty(name);

                if (property.HasValue())
                {
                    method = declaringType.GetProperty(name).GetGetMethod();
                }
            }

            return method;
        }

        public static MethodInfo GetIndexer(this Type declaringType, params Type[] types)
        {
            return declaringType.GetProperties().Where(e => IsIndexer(e, types)).First().GetGetMethod();
        }

        public static object Call(this MethodInfo method, params object[] parameters)
        {
            return method.Invoke(null, parameters);
        }

        public static TReturn Invoke<TReturn>(this MethodInfo method, object component, params object[] parameters)
        {
            return (TReturn)method.Invoke(component, parameters);
        }

        public static TReturn CallMethod<TReturn>(this object component, string name, params object[] parameters)
        {
            return (TReturn)CallMethod(component, name, parameters);
        }

        public static object CallMethod(this object component, string name, params object[] parameters)
        {
            return component.GetType().GetMethod(name, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Invoke(component, parameters);
        }

        public static Action<object, TArgument> CreateAction<TArgument>(this MethodInfo method)
        {
            if (method == null)
            {
                return default(Action<object, TArgument>);
            }

            ILGenerator il;
            var @dynamic = new DynamicMethod(method.Name, typeof(void), new Type[] { Types.Object, typeof(TArgument) }, method.DeclaringType.Module);

            il = @dynamic.GetILGenerator();

            il.Emit(OpCodes.Nop);
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Call, method);
            il.Emit(OpCodes.Ret);

            return (Action<object, TArgument>)@dynamic.CreateDelegate(typeof(Action<object, TArgument>));
        }

        public static Func<TComponent, TReturn> CreateFunc<TComponent, TReturn>(this MethodInfo method)
        {
            if (method == null)
            {
                return default(Func<TComponent, TReturn>);
            }

            ILGenerator il;
            var @dynamic = new DynamicMethod(method.Name, method.ReturnType, new Type[] { typeof(TComponent) }, method.DeclaringType.Module);

            il = @dynamic.GetILGenerator();

            il.Emit(OpCodes.Nop);
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Call, method);
            il.Emit(OpCodes.Ret);

            return (Func<TComponent, TReturn>)@dynamic.CreateDelegate(typeof(Func<TComponent, TReturn>));
        }

        public static Func<object, object> CreateDelegate(this MethodInfo method)
        {
            ILGenerator il;
            var @dynamic = new DynamicMethod(method.Name, Types.Object, Types.TypeArrayObject, method.DeclaringType.Module);

            il = @dynamic.GetILGenerator();

            il.Emit(OpCodes.Nop);
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Call, method);
            il.Emit(OpCodes.Box, method.ReturnType);
            il.Emit(OpCodes.Ret);

            return (Func<object, object>)@dynamic.CreateDelegate(Types.FuncObjObj);
        }

        public static IEnumerable<Stream> GetResourceStreams(this Assembly assembly, string resourceName)
        {
            foreach (string name in assembly.GetManifestResourceNames())
            {
                if (name.EndsWithIgnoreCase(resourceName))
                {
                    Stream stream = assembly.GetManifestResourceStream(name);

                    if (stream.HasValue() && stream.CanRead)
                    {
                        yield return stream;
                    }
                }
            }
        }

        public static IEnumerable<TAttribute> FindAttributes<TAttribute>(this Assembly assembly, string searchPattern, string descriptionPattern) where TAttribute : Attribute
        {
            return FindAttributes<TAttribute>(assembly, searchPattern, descriptionPattern, SearchOption.TopDirectoryOnly);
        }

        public static IEnumerable<TAttribute> FindAttributes<TAttribute>(this Assembly assembly, string searchPattern, string descriptionPattern, SearchOption searchOption) where TAttribute : Attribute
        {
            const string wholeWord = @"\b";

            foreach (FileInfo file in assembly.GetFileInfo().Directory.GetFiles(searchPattern, searchOption))
            {
                if (Regex.IsMatch(FileVersionInfo.GetVersionInfo(file.FullName).FileDescription, string.Concat(wholeWord, descriptionPattern, wholeWord)))
                {
                    AssemblyName assemblyRef;

                    if (file.TryGetAssemblyName(out assemblyRef))
                    {
                        var attributes = default(TAttribute[]);

                        try
                        {
                            attributes = AppDomain.CurrentDomain.Load(assemblyRef).GetCustomAttributes(typeof(TAttribute), true).Cast<TAttribute>().ToArray();
                        }
                        catch (Exception e)
                        {
                            e.Print();
                        }

                        if (attributes.HasValue())
                        {
                            foreach (TAttribute attribute in attributes)
                            {
                                yield return attribute;
                            }
                        }
                    }
                }
            }
        }
    }
}
