//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;

namespace System
{
    public class StreamTransaction : Stream, IDisposable
    {
        internal StreamTransaction(Stream stream, FileStreamMode mode)
        {
            BaseStream = stream;
            Mode = mode;

            Data = BaseStream.ReadBytes();
            BaseStream.Clear();

            if ((FileStreamMode.Compressed & mode) == FileStreamMode.Compressed)
            {
                Stream = BaseStream.ToGZipStream(true, true);
            }
            else
            {
                Stream = BaseStream;
            }
        }

        protected bool Success;
        protected byte[] Data;
        protected Stream Stream;
        protected Stream BaseStream;
        protected readonly FileStreamMode Mode;

        public override bool CanRead
        {
            get { return Stream.CanRead; }
        }

        public override bool CanSeek
        {
            get { return Stream.CanSeek; }
        }

        public override bool CanWrite
        {
            get { return Stream.CanWrite; }
        }

        public override void Flush()
        {
            Stream.Flush();
        }

        public override long Length
        {
            get { return Stream.Length; }
        }

        public override long Position
        {
            get { return Stream.Position; }
            set { Stream.Position = value; }
        }

        public override int Read(byte[] buffer, int offset, int count)
        {
            return Stream.Read(buffer, offset, count);
        }

        public override long Seek(long offset, SeekOrigin origin)
        {
            return Stream.Seek(offset, origin);
        }

        public override void SetLength(long value)
        {
            Stream.SetLength(value);
        }

        public override void Write(byte[] buffer, int offset, int count)
        {
            Stream.Write(buffer, offset, count);
        }

        public void Complete()
        {
            Success = true;

            if (Mode != FileStreamMode.None)
            {
                using (Stream)
                {
                    Stream.Flush();
                }
            }

            BaseStream.Flush();
        }

        protected override void Dispose(bool disposing)
        {
            var fs = BaseStream as FileStream;

            using (Stream)
            {
                using (BaseStream)
                {
                    if (!Success)
                    {
                        if (Data.HasValue())
                        {
                            BaseStream.Clear();
                            BaseStream.Write(Data);
                        }
                        else
                        {
                            BaseStream.Dispose();

                            if (fs.HasValue())
                            {
                                File.Delete(fs.Name);
                            }
                        }
                    }
                }
            }
            
            Data = null;
            Stream = null;
            BaseStream = null;

            GC.SuppressFinalize(this);
        }
    }
}
