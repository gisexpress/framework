//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Net.Cache;
using System.Text;
using System.Xml;

namespace System
{
    public static class UriExtensions
    {
        public static HttpWebResponse GetResponse(this Uri address)
        {
            return GetResponse(new HttpWebRequestEventArgs { Address = address });
        }

        public static HttpWebResponse GetResponse(this Uri address, RequestCacheLevel level)
        {
            return GetResponse(new HttpWebRequestEventArgs { Address = address, CacheLevel = level });
        }

        public static HttpWebResponse GetResponse(this Uri address, RequestCacheLevel level, int timeout)
        {
            return GetResponse(new HttpWebRequestEventArgs { Address = address, Timeout = timeout, CacheLevel = level });
        }

        public static HttpWebResponse GetResponse(this Uri address, RequestCacheLevel level, NameValueCollection values)
        {
            return GetResponse(new HttpWebRequestEventArgs { Address = address, CacheLevel = level, Values = values });
        }

        public static HttpWebResponse GetResponse(this Uri address, RequestCacheLevel level, NameValueCollection values, bool allowExceptions)
        {
            return GetResponse(new HttpWebRequestEventArgs { Address = address, CacheLevel = level, Values = values, AllowExceptions = allowExceptions });
        }

        public static HttpWebResponse GetResponse(this Uri address, RequestCacheLevel level, NameValueCollection values, bool allowExceptions, int timeout)
        {
            return GetResponse(new HttpWebRequestEventArgs { Address = address, CacheLevel = level, Values = values, AllowExceptions = allowExceptions, Timeout = timeout });
        }

        static HttpWebResponse GetResponse(HttpWebRequestEventArgs e)
        {
            e.Request.Accept = "*/*";
            e.Request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) Chrome/48.0.2564.116";
            e.Request.KeepAlive = false;

            if (e.Timeout > 0)
            {
                e.Request.Timeout = e.Timeout;
            }

            if (e.CacheLevel != RequestCacheLevel.Default)
            {
                e.Request.CachePolicy = new RequestCachePolicy(e.CacheLevel);
            }

            if (e.Values.IsNull())
            {
                e.Request.Method = "GET";
            }
            else
            {
                byte[] data = Encoding.UTF8.GetBytes(e.Values.ToString());

                e.Request.Method = "POST";
                e.Request.ContentType = "application/x-www-form-urlencoded";
                e.Request.ContentLength = data.Length;

                using (Stream stream = e.Request.GetRequestStream())
                {
                    stream.Write(data);
                }
            }

            if (e.AllowExceptions)
            {
                if (e.Response.ContentType.EqualsIgnoreCase("application/xml"))
                {
                    using (e.Response)
                    {
                        var document = new XmlDocument();

                        using (Stream stream = e.Response.GetResponseStream())
                        {
                            document.Load(stream);
                        }

                        if (document.DocumentElement.Name.EqualsIgnoreCase("ExceptionReport"))
                        {
                            throw new ApplicationException(document.DocumentElement.InnerText);
                        }
                    }
                }
            }

            return e.Response;
        }

        class HttpWebRequestEventArgs
        {
            protected HttpWebRequest HttpRequest;
            protected HttpWebResponse HttpResponse;

            public HttpWebRequest Request
            {
                get { return HttpRequest ?? (HttpRequest = (HttpWebRequest)WebRequest.Create(Address)); }
            }

            public HttpWebResponse Response
            {
                get { return HttpResponse ?? (HttpResponse = (HttpWebResponse)Request.GetResponse()); }
            }

            public Uri Address
            {
                get;
                set;
            }

            public int Timeout
            {
                get;
                set;
            }

            public bool AllowExceptions
            {
                get;
                set;
            }

            public NameValueCollection Values
            {
                get;
                set;
            }

            public RequestCacheLevel CacheLevel
            {
                get;
                set;
            }
        }
    }
}
