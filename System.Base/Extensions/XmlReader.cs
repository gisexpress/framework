//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;

namespace System
{
    public static class XmlReaderExtensions
    {
        static XmlReaderExtensions()
        {
            Cleaner = new Regex(@"\t|\n|\r", RegexOptions.Compiled);
        }

        readonly static Regex Cleaner;

        public static readonly XmlReaderSettings DefaultSettings = new XmlReaderSettings();

        public static XmlReader OpenRead(string path)
        {
            if (File.Exists(path))
            {
                return XmlReader.Create(File.OpenRead(path));
            }

            return default(XmlReader);
        }

        public static IEnumerable<string> ReadElements(this XmlReader reader)
        {
            return ReadElements(reader, reader.LocalName);
        }

        public static IEnumerable<string> ReadElements(this XmlReader reader, string localName)
        {
            if (reader.IsEmptyElement)
            {
                yield break;
            }

            string name = localName ?? (localName = reader.LocalName);

            while (true)
            {
                if (reader.IsStartElement(name))
                {
                    break;
                }

                reader.Read();
            }

            while (reader.Read())
            {
                if (reader.IsStartElement())
                {
                    yield return reader.Name;
                }

                if (reader.IsEndElement(localName))
                {
                    reader.ReadEndElement();
                    break;
                }
            }
        }

        public static IEnumerable<string> ReadValues(this XmlReader reader, string localName)
        {
            string elementName = reader.LocalName;

            foreach (string name in ReadElements(reader))
            {
                if (name.EqualsIgnoreCase(localName))
                {
                    yield return reader.ReadString();
                }

                if (reader.IsEndElement(elementName))
                {
                    reader.ReadEndElement();
                    break;
                }
            }
        }

        public static bool ReadBoolean(this XmlReader reader)
        {
            return XmlConvert.ToBoolean(reader.ReadString());
        }

        public static int ReadInt32(this XmlReader reader)
        {
            return XmlConvert.ToInt32(reader.ReadString());
        }

        public static bool IsEndElement(this XmlReader reader, string localName)
        {
            return reader.NodeType == XmlNodeType.EndElement && reader.LocalName.Equals(localName);
        }

        public static IEnumerable<XmlNode> Select(this XmlNode node, string name)
        {
            foreach (XmlNode e in node.ChildNodes)
            {
                if (e.Name == name)
                {
                    yield return e;
                }
            }
        }

        public static IEnumerable<XmlNode> Select(this XmlNode node, ISet<string> names)
        {
            foreach (XmlNode e in node.ChildNodes)
            {
                if (names.Contains(e.Name))
                {
                    yield return e;
                }
            }
        }

        //public static string Get(this XmlNode node, string name)
        //{
        //    return Get(node, default(string), name);
        //}

        //public static T Get<T>(this XmlNode node, T valueDefault, string name)
        //{
        //    return Get(node, () => valueDefault, name);
        //}

        //public static T Get<T>(this XmlNode node, Func<T> valueDefault, string name)
        //{
        //    if (node == null)
        //    {
        //        SetChild(node, name, valueDefault());
        //        return valueDefault();
        //    }

        //    XmlNode root = node[name] ?? (XmlNode)node.Attributes[name];

        //    if (root == null)
        //    {
        //        return valueDefault();
        //    }

        //    string value = root is XmlAttribute ? root.Value : root.InnerText;

        //    if (string.IsNullOrEmpty(value))
        //    {
        //        return valueDefault();
        //    }

        //    return value.ParseInvariantString<T>();
        //}

        //public static XmlAttribute SetAttribute<T>(this XmlNode node, string name, T value)
        //{
        //    XmlAttribute e = node.OwnerDocument.CreateAttribute(name);

        //    if (value.HasValue())
        //    {
        //        e.Value = value.ToInvariantString();
        //    }

        //    node.Attributes.Append(e);
        //    return e;
        //}

        //public static XmlElement SetChild(this XmlNode node, string name)
        //{
        //    return SetChild(node, name, default(string));
        //}

        //public static XmlElement SetChild<T>(this XmlNode node, string name, T value)
        //{
        //    XmlElement e = node[name];

        //    if (e == null)
        //    {
        //        e = node.OwnerDocument.CreateElement(name);

        //        if (value.HasValue())
        //        {
        //            e.InnerText = value.ToInvariantString();
        //        }

        //        node.AppendChild(e);
        //    }
        //    else
        //    {
        //        e.InnerText = value.ToInvariantString();
        //    }

        //    return e;
        //}
    }
}