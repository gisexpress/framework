//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace System
{
    public static class XmlWriterExtensions
    {
        public static readonly XmlWriterSettings DefaultSettings = new XmlWriterSettings
        {
            Indent = true,
            Encoding = Encoding.UTF8,
        };

        public static XmlWriter Create(out StringBuilder output)
        {
            return XmlWriter.Create(output = new StringBuilder(), DefaultSettings);
        }

        public static XmlWriter Create(Stream output)
        {
            return XmlWriter.Create(output, DefaultSettings);
        }

        public static void WriteElement(this XmlWriter writer, string localName, string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                writer.WriteElementString(localName, value);
            }
        }

        public static void WriteElement(this XmlWriter writer, string localName, string format, params object[] args)
        {
            writer.WriteElementString(localName, format.FormatInvariant(args));
        }

        public static void WriteValues(this XmlWriter writer, string localName, string itemName, IEnumerable<string> values)
        {
            IEnumerator<string> e = values.GetEnumerator();

            if (e.MoveNext())
            {
                writer.WriteStartElement(localName);

                do
                {
                    writer.WriteElement(itemName, e.Current);
                }
                while (e.MoveNext());

                writer.WriteEndElement();
            }
        }

        public static void WriteValue(this XmlWriter writer, string localName, object value, TypeCode valueTypeCode)
        {
            if (!string.IsNullOrEmpty(localName))
            {
                writer.WriteStartElement(localName);
            }

            switch (valueTypeCode)
            {
                case TypeCode.Byte:
                    writer.WriteValue(Convert.ToByte(value));
                    break;
                case TypeCode.SByte:
                    writer.WriteValue(Convert.ToSByte(value));
                    break;
                case TypeCode.Boolean:
                    writer.WriteValue(Convert.ToBoolean(value));
                    break;
                case TypeCode.Char:
                    writer.WriteValue(Convert.ToChar(value));
                    break;
                case TypeCode.Int16:
                    writer.WriteValue(Convert.ToInt16(value));
                    break;
                case TypeCode.Int32:
                    writer.WriteValue(Convert.ToInt32(value));
                    break;
                case TypeCode.Int64:
                    writer.WriteValue(Convert.ToInt64(value));
                    break;
                case TypeCode.Single:
                    writer.WriteValue(Convert.ToSingle(value));
                    break;
                case TypeCode.Double:
                    writer.WriteValue(Convert.ToDouble(value));
                    break;
                case TypeCode.UInt64:
                case TypeCode.Decimal:
                    writer.WriteValue(Convert.ToDecimal(value));
                    break;
                case TypeCode.UInt16:
                    writer.WriteValue(Convert.ToUInt16(value));
                    break;
                case TypeCode.UInt32:
                    writer.WriteValue(Convert.ToUInt32(value));
                    break;
                case TypeCode.String:
                    writer.WriteValue(Convert.ToString(value));
                    break;
                case TypeCode.DateTime:
                    writer.WriteValue(Convert.ToDateTime(value));
                    break;
                default:
                    (value as IXmlSerializable).WriteXml(writer);
                    break;
            }

            if (!string.IsNullOrEmpty(localName))
            {
                writer.WriteEndElement();
            }
        }
    }
}