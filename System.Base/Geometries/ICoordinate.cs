//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Geometries.Index;
using System.IO;
using System.Runtime.InteropServices;
using System.Xml;

namespace System.Geometries
{
    [Guid("0545964E-D292-4A3A-B8F8-F46DE451E749")]
    public interface ICoordinate : ISpatialObject, ISupportGeometryProperty, ISupportInitialize, IComparable<ICoordinate>, ICloneable, IDisposable
    {
        bool DesignMode
        {
            get;
        }

        int Index
        {
            get;
        }

        ICoordinateCollection Collection
        {
            get;
            set;
        }

        int Dimension
        {
            get;
        }

        bool IsEmpty();

        double X { get; set; }
        double Y { get; set; }
        double Z { get; set; }

        double[] GetValues();

        void SetNull();
        void SetAltitude(double value);
        void SetAltitude(double value, bool append);
        void SetValues(params double[] values);
        void Normalize();

        ICoordinate Add(ICoordinate other);
        ICoordinate Subtract(ICoordinate other);

        ICoordinate Multipy(double value);
        ICoordinate Multipy(ICoordinate other);

        ICoordinate Divide(double value);
        ICoordinate Divide(ICoordinate other);

        double Angle(ICoordinate other);
        double Angle(ICoordinate other, bool normalize);

        //double Azimuth(ICoordinate other);

        double Distance(ICoordinate other);
        double Distance(double x, double y);
        double Distance(double x, double y, double z);

        double GetLength();
        double GetLengthSquared();

        int GetOctant(ICoordinate coordinate);
        IEnvelope GetBounds(double distance);

        ICoordinate GetPointAt(double width, double height, double angle);

        ICoordinate[] GetFilletPoints(double width, double height, double startAngle, double endAngle);
        ICoordinate[] GetFilletPoints(double width, double height, double startAngle, double endAngle, int quadrantSegments);

        IApplicationComponent GetComponent(IApplicationComponentDesigner designer);

        void AppendToPath(Graphics g, GraphicsPath path, Func<ICoordinate, PointF> transform, float radius, bool raiseEvents);

        void Write(BinaryWriter writer);

        void CopyTo(ICoordinate Value);

        bool IsEquivalent(ICoordinate other);
        bool IsEquivalent(double x, double y);
        bool IsEquivalent(double x, double y, double z);

        void LoadXml(XmlNode node);
        void SaveXml(XmlNode node);

        new ICoordinate Clone();
        ICoordinate Clone(ICoordinateCollection owner);

        string ToString(string seperator);
    }
}