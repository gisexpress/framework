//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.CoordinateSystems;
using System.IO;

namespace System.Geometries
{
    public interface IGeometry : ISupportGeometryProperty, IEvaluationValue, ISupportGraphics, ISupportInitialize, IEqualityComparer<IGeometry>, IComparable
    {
        IGeometryFactory Factory
        {
            get;
        }

        int Srid
        {
            get;
            set;
        }

        ICoordinateCollection Coordinates
        {
            get;
            set;
        }

        int NumPoints();
        int NumGeometries();

        bool IsEmpty();
        bool IsValid();
        bool IsRing();
        bool IsClosed();
        bool IsRectangle();
        bool IsCollection();
        IGeometryCollection GetCollection();
        IGeometry GetGeometryN(int i);

        void SetCollection(IGeometryCollection collection);

        string TypeName { get; }

        IEnvelope GetBounds();
        ICoordinate GetCentroid();

        IBufferParameters BufferParameters
        {
            get;
            set;
        }

        Dimensions GetDimension();
        Dimensions GetBoundaryDimension();

        Locations Locate(ICoordinate c);

        double GetArea();
        double GetLength();
        double GetAngle();
        double GetAzimuth();
        double GetDistance(ICoordinate c);
        double GetDistance(IGeometry other);

        bool Contains(ICoordinate c);

        bool IsEquals(IGeometry other);
        bool IsDisjoint(IGeometry other);
        bool IsTouches(IGeometry other);
        bool IsContains(IGeometry other);
        bool IsCovers(IGeometry other);
        bool IsIntersects(IEnvelope other);
        bool IsIntersects(IGeometry other);
        bool IsWithin(IGeometry other);
        bool IsCoveredBy(IGeometry other);
        bool IsCoveredBy(IGeometry other, double distance);
        bool IsCrosses(IGeometry other);
        bool IsCrosses(IEnvelope bounds);
        bool IsOverlaps(IGeometry other);
        bool IsEquivalent(IGeometry other);
        bool IntersectsWith(IGeometry other);
        bool IntersectsWith(IEnvelope bounds);

        IGeometry MakeValid();
        IGeometry Union(IGeometry other);
        IGeometry Intersection(IGeometry other);
        IGeometry Difference(IGeometry other);
        IGeometry Overlay(IGeometry other, SpatialFunctions function);

        IGeometry Buffer(int distance);
        IGeometry Buffer(double distance);
        IGeometry Buffer(double width, double height);

        IGeometry Rotate(double angle);
        IGeometry RotateAt(double angle, ICoordinate point);
        IGeometry Transform(IMathTransform transform);

        bool Read(ITokenEnumerator e);

        IEnumerable<ILineSegment> GetSegments();
        IEnumerable<IGeometry> GetGeometries();

        IEnumerable<PropertyDescriptor> GetProperties(IApplicationComponent component);
        IApplicationComponent GetComponent(IApplicationComponentDesigner designer);

        IEnumerable<ICoordinate> GetCoordinates();

        string AsText();
        string ToText();
        byte[] AsBinary();

        IGeometry AsGeometry();
        //IGeometry3D AsGeometry3D(IMapTransform transform);

        void Write(BinaryWriter writer);

        IGeometry Clone();
    }
}
