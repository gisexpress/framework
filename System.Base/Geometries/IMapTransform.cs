//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.CoordinateSystems;
using System.Drawing;

namespace System.Geometries
{
    public interface IMapTransform : ICloneable, IDisposable//, IAxisTransform
    {
        event Action ScaleChanged;

        bool IsEmpty();

        Func<IEnvelope> GetBounds
        {
            get;
        }

        int ClientWidth
        {
            get;
            set;
        }

        int ClientHeight
        {
            get;
            set;
        }

        IUnit Unit
        {
            get;
            set;
        }

        IEnvelope Bounds
        {
            get;
        }

        double PixelSize
        {
            get;
        }

        double DiagonalSize
        {
            get;
        }

        double HorizontalResolution
        {
            get;
        }

        double CurrentScale
        {
            get;
        }

        bool Normalize();
        bool ZoomToExtent();

        bool Zoom(int percent);
        bool ZoomAt(int percent, PointF point);

        bool ZoomTo(RectangleF rect);
        bool ZoomTo(IEnvelope bounds);

        void Resize(int width, int height);
        void SetCenter(double x, double y);

        void Translate(PointF p1, PointF p2);
        void Translate(float x1, float y1, float x2, float y2);

        PointF WorldToClient(ICoordinate c);
        PointF WorldToClient(double x, double y);
        RectangleF WorldToClient(IEnvelope bounds);

        ICoordinate ClientToWorld(Point point);
        ICoordinate ClientToWorld(PointF point);
        IEnvelope ClientToWorld(RectangleF rect);

        bool ClientToWorld(int x, int y, out double worldX, out double worldY);
        bool ClientToWorld(float x, float y, out double worldX, out double worldY);

        void RotateAt(double angle, double x, double y);

        void RaiseScaleChanged();
    }
}
