//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO.Compression
{
    public class DeflateNativeStream : Stream
    {
        public DeflateNativeStream(Stream stream, CompressionMode mode)
            : this(stream, mode, CompressionLevel.Default, false)
        {
        }

        public DeflateNativeStream(Stream stream, CompressionMode mode, CompressionLevel level)
            : this(stream, mode, level, false)
        {
        }

        public DeflateNativeStream(Stream stream, CompressionMode mode, bool leaveOpen)
            : this(stream, mode, CompressionLevel.Default, leaveOpen)
        {
        }

        public DeflateNativeStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
        {
            InnerStream = stream;
            BaseStream = new ZlibBaseStream(stream, mode, level, ZlibStreamFlavor.Deflate, leaveOpen);
        }

        internal ZlibBaseStream BaseStream;
        internal Stream InnerStream;

        protected bool Disposed;

        public virtual FlushType FlushMode
        {
            get { return BaseStream.FlushMode; }
            set
            {
                if (Disposed)
                {
                    throw new ObjectDisposedException(GetType().Name);
                }

                BaseStream.FlushMode = value;
            }
        }

        public int BufferSize
        {
            get
            {
                return BaseStream.BufferSize;
            }
            set
            {
                if (Disposed)
                {
                    throw new ObjectDisposedException(GetType().Name);
                }

                if (BaseStream.WorkingBuffer.HasValue())
                {
                    throw new IOException("The working buffer is already set.");
                }

                BaseStream.BufferSize = Math.Max(value, ZlibConstants.WorkingBufferSizeMin);
            }
        }

        public CompressionStrategy Strategy
        {
            get { return BaseStream.Strategy; }
            set
            {
                if (Disposed)
                {
                    throw new ObjectDisposedException(GetType().Name);
                }

                BaseStream.Strategy = value;
            }
        }

        public virtual long TotalIn
        {
            get { return BaseStream.Codec.TotalBytesIn; }
        }

        public virtual long TotalOut
        {
            get { return BaseStream.Codec.TotalBytesOut; }
        }

        public override bool CanRead
        {
            get
            {
                if (Disposed)
                {
                    throw new ObjectDisposedException(GetType().Name);
                }

                return BaseStream.StreamBase.CanRead;
            }
        }

        public override bool CanSeek
        {
            get { return false; }
        }

        public override bool CanWrite
        {
            get
            {
                if (Disposed)
                {
                    throw new ObjectDisposedException(GetType().Name);
                }

                return BaseStream.StreamBase.CanWrite;
            }
        }

        public override void Flush()
        {
            if (Disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }

            BaseStream.Flush();
        }

        public override long Length
        {
            get { throw new NotSupportedException(); }
        }

        public override long Position
        {
            get
            {
                if (BaseStream.Mode == ZlibBaseStream.StreamMode.Writer)
                {
                    return BaseStream.Codec.TotalBytesOut;
                }

                if (BaseStream.Mode == ZlibBaseStream.StreamMode.Reader)
                {
                    return BaseStream.Codec.TotalBytesIn;
                }

                return 0;
            }
            set { throw new NotImplementedException(); }
        }

        public override int Read(byte[] buffer, int offset, int count)
        {
            if (Disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }

            return BaseStream.Read(buffer, offset, count);
        }

        public override long Seek(long offset, SeekOrigin origin)
        {
            throw new NotImplementedException();
        }

        public override void SetLength(long value)
        {
            throw new NotImplementedException();
        }

        public override void Write(byte[] buffer, int offset, int count)
        {
            if (Disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }

            BaseStream.Write(buffer, offset, count);
        }

        public static byte[] CompressString(string s)
        {
            using (var ms = new MemoryStream())
            {
                using (Stream compressor = new DeflateNativeStream(ms, CompressionMode.Compress, CompressionLevel.BestCompression))
                {
                    ZlibBaseStream.CompressString(s, compressor);
                }

                return ms.ToArray();
            }
        }

        public static byte[] CompressBuffer(byte[] bytes)
        {
            using (var ms = new MemoryStream())
            {
                using (Stream compressor = new DeflateNativeStream(ms, CompressionMode.Compress, CompressionLevel.BestCompression))
                {
                    ZlibBaseStream.CompressBuffer(bytes, compressor);
                }

                return ms.ToArray();
            }
        }

        public static String UncompressString(byte[] compressed)
        {
            using (var input = new MemoryStream(compressed))
            {
                using (Stream decompressor = new DeflateNativeStream(input, CompressionMode.Decompress))
                {
                    return ZlibBaseStream.UncompressString(compressed, decompressor);
                }
            }
        }

        public static byte[] UncompressBuffer(byte[] compressed)
        {
            using (var input = new MemoryStream(compressed))
            {
                using (Stream decompressor = new DeflateNativeStream(input, CompressionMode.Decompress))
                {
                    return ZlibBaseStream.UncompressBuffer(compressed, decompressor);
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            try
            {
                if (!Disposed)
                {
                    if (disposing && BaseStream.HasValue())
                    {
                        BaseStream.Close();
                    }

                    Disposed = true;
                }
            }
            finally
            {
                base.Dispose(disposing);
            }
        }
    }
}
