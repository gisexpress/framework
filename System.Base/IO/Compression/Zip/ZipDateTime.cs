//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO.Compression
{
    [CLSCompliant(false)]
    public struct ZipDateTime
    {
        public ushort Date;
        public ushort Time;

        public static implicit operator ZipDateTime(DateTime value)
        {
            return new ZipDateTime
            {
                Date = Convert.ToUInt16(string.Concat(Convert.ToString(value.Year - 1980, 2).PadLeft(7, '0'), Convert.ToString(value.Month, 2).PadLeft(4, '0'), Convert.ToString(value.Day, 2).PadLeft(5, '0')), 2),
                Time = Convert.ToUInt16(string.Concat(Convert.ToString(value.Hour, 2).PadLeft(5, '0'), Convert.ToString(value.Minute, 2).PadLeft(6, '0'), Convert.ToString(value.Second / 2, 2).PadLeft(5, '0')), 2)
            };
        }

        public static implicit operator DateTime(ZipDateTime value)
        {
            string binaryDate = Convert.ToString(value.Date, 2).PadLeft(16, '0');
            string binaryTime = Convert.ToString(value.Time, 2).PadLeft(16, '0');

            int year = Convert.ToInt32(binaryDate.Substring(0, 7), 2) + 1980;
            int month = Convert.ToInt32(binaryDate.Substring(7, 4), 2);
            int day = Convert.ToInt32(binaryDate.Substring(11, 5), 2);

            int hour = Convert.ToInt32(binaryTime.Substring(0, 5), 2);
            int minute = Convert.ToInt32(binaryTime.Substring(5, 6), 2);
            int second = Convert.ToInt32(binaryTime.Substring(11, 5), 2) * 2;

            return new DateTime(year, month, day, hour, minute, second);
        }

        public override string ToString()
        {
            return ((DateTime)this).ToLongDateString();
        }
    }
}
