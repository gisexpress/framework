//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Security.Cryptography;

namespace System.IO.Compression
{
    [CLSCompliant(false)]
    public class ZipEntry
    {
        public ZipEntry()
            : this(default(Zip))
        {
        }

        public ZipEntry(Zip owner)
        {
            Owner = owner;
            Header = new ZipHeader();
        }

        protected readonly Zip Owner;
        protected string FileName;
        protected long Offset;
        protected long Size;

        public string Name
        {
            get { return Header.Name; }
        }

        public ZipHeader Header
        {
            get;
            protected set;
        }

        public bool IsFile
        {
            get { return !IsDirectory; }
        }

        public bool IsDirectory
        {
            get { return Header.IsDirectory; }
        }

        public string Text
        {
            get
            {
                using (Stream input = GetStream())
                {
                    return ZipEncoding.Default.GetString(input.ReadBytes());
                }
            }
            set
            {
                Bytes = ZipEncoding.Default.GetBytes(value);
            }
        }

        public byte[] Bytes
        {
            get;
            set;
        }

        public Stream GetStream()
        {
            if (!string.IsNullOrEmpty(FileName))
            {
                if (Header.CompressedSize > 0)
                {
                    if (Owner.Folder.IsNull())
                    {
                        var stream = new ZipStream(File.OpenRead(FileName), Offset, Math.Max(Header.CompressedSize, Header.CompressedSize64));

                        if (Header.Method == ZipMethod.Deflated)
                        {
                            return stream.ToDeflateStream(false);
                        }

                        return stream;
                    }
                    else
                    {
                        var stream = File.OpenRead(Path.Combine(Owner.Folder.FullName, FileName));

                        if (Header.Method == ZipMethod.Deflated)
                        {
                            return stream.ToDeflateStream(false);
                        }

                        return stream;
                    }
                }
            }

            return Bytes.ToStream();
        }

        public void Extract(string path)
        {
            Extract(path, Name);
        }

        public void Extract(string path, string name)
        {
            using (Stream output = File.Create(Path.Combine(path, name)))
            {
                using (Stream input = GetStream())
                {
                    input.CopyTo(output);
                }
            }
        }

        public bool Read(BinaryReader reader)
        {
            if (Header.Read(reader, true))
            {
                Offset = reader.BaseStream.Position;

                if (Header.CompressedSize == uint.MaxValue)
                {
                    Size = Header.CompressedSize64;
                }
                else
                {
                    Size = Header.CompressedSize;
                }

                if (reader.BaseStream is FileStream)
                {
                    FileName = ((FileStream)reader.BaseStream).Name;

                    if (Owner.Folder.IsNull())
                    {
                        reader.BaseStream.Position = Offset + Size;
                    }
                    else
                    {
                        Extract(reader);
                    }

                    return true;
                }
                else
                {
                    Extract(reader);

                    if (Bytes.Length == Header.UncompressedSize)
                    {
                        uint flag = Crc32.Default.Compute(Bytes);

                        if (Header.Checksum == flag)
                        {
                            return true;
                        }
                    }
                }
            }

            return false;
        }

        protected void Extract(BinaryReader reader)
        {
            var input = new ZipStream(reader.BaseStream, Offset, Size);

            if (Owner.Folder.IsNull())
            {
                if (Header.Method == ZipMethod.Stored)
                {
                    Bytes = input.ReadBytes();
                }
                else if (Header.Method == ZipMethod.Deflated)
                {
                    Bytes = input.ToDeflateStream(false).ReadBytes();
                }
            }
            else
            {
                using (Stream output = File.Create(Path.Combine(Owner.Folder.FullName, Name)))
                {
                    if (Header.Method == ZipMethod.Stored)
                    {
                        input.CopyTo(output);
                    }
                    else if (Header.Method == ZipMethod.Deflated)
                    {
                        input.ToDeflateStream(false).CopyTo(output);
                    }
                }
            }
        }

        public void Write(BinaryWriter writer)
        {
            byte[] compressedBytes = Bytes;

            if (Header.Method == ZipMethod.Deflated)
            {
                using (var stream = new MemoryStream())
                {
                    using (var zipStream = stream.ToDeflateStream(true))
                    {
                        zipStream.Write(Bytes);
                    }

                    compressedBytes = stream.ToArray();
                }
            }

            Header.UncompressedSize = (uint)Bytes.Length;
            Header.CompressedSize = (uint)compressedBytes.Length;
            Header.Checksum = Crc32.Default.Compute(Bytes);
            Header.Write(writer, true);
            writer.Write(compressedBytes);
        }

        public override string ToString()
        {
            return Name;
        }
    }
}
