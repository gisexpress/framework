//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO.Compression
{
    [CLSCompliant(false)]
    public class ZipHeader
    {
        public ZipHeader()
        {
            Version = (ZipVersion)0x14;
            Flags = (ZipBitFlag)0;
            Method = ZipMethod.Deflated;
            ModificationDate = DateTime.Now;
            VersionNeeded = 20;
            ExternalFileAttributes = 32;
        }

        public ZipVersion Version;
        public ushort VersionNeeded;
        public ZipBitFlag Flags;
        public ZipMethod Method;
        public ZipDateTime ModificationDate;

        public uint Checksum;
        public uint CompressedSize;
        public uint UncompressedSize;
        public long CompressedSize64;
        public long UncompressedSize64;

        public ushort DiskStart;

        /// <summary>
        /// Bit 0: apparent ASCII/text file
        /// Bit 1: reserved
        /// Bit 2: control field records precede logical records
        /// Bits 3-16: unused
        /// </summary>
        public ushort InternalFileAttributes;
        public uint ExternalFileAttributes;
        public uint OffsetLocalHeader;

        public string Name
        {
            get;
            set;
        }

        public string ExtraField
        {
            get;
            set;
        }

        public string FileComment
        {
            get;
            set;
        }

        public bool IsDirectory
        {
            get { return UncompressedSize == 0 && Name.EndsWith("/"); }
        }

        protected virtual uint GetSignature(bool isEntry)
        {
            return (uint)(isEntry ? 0x04034B50 : 0x2014B50);
        }

        public bool Read(BinaryReader reader, bool isEntry)
        {
            if (reader.ReadUInt32() == GetSignature(isEntry))
            {
                Version = (ZipVersion)reader.ReadUInt16();

                if (!isEntry)
                {
                    VersionNeeded = reader.ReadUInt16();
                }

                Flags = reader.ReadUInt16();
                Method = (ZipMethod)reader.ReadUInt16();
                ModificationDate.Time = reader.ReadUInt16();
                ModificationDate.Date = reader.ReadUInt16();
                Checksum = reader.ReadUInt32();
                CompressedSize = reader.ReadUInt32();
                UncompressedSize = reader.ReadUInt32();

                ushort entryNameLength = reader.ReadUInt16();
                ushort extraFieldLength = reader.ReadUInt16();
                ushort fileCommentLength = 0;

                if (!isEntry)
                {
                    fileCommentLength = reader.ReadUInt16();
                    DiskStart = reader.ReadUInt16();
                    InternalFileAttributes = reader.ReadUInt16();
                    ExternalFileAttributes = reader.ReadUInt32();
                    OffsetLocalHeader = reader.ReadUInt32();
                }

                byte[] nameBytes = reader.ReadBytes(entryNameLength);

                Name = ZipEncoding.System.GetString(nameBytes);

                if (CompressedSize == uint.MaxValue)
                {
                    if (extraFieldLength == 20)
                    {
                        ushort identifier = reader.ReadUInt16();
                        ushort dataSize = reader.ReadUInt16();

                        if (dataSize == 16)
                        {
                            UncompressedSize64 = reader.ReadInt64();
                            CompressedSize64 = reader.ReadInt64();
                        }
                    }
                    else
                    {
                        throw new BadImageFormatException();
                    }
                }
                else
                {
                    ExtraField = ZipEncoding.System.GetString(reader.ReadBytes(extraFieldLength));
                }

                if (!isEntry && fileCommentLength > 0)
                {
                    FileComment = ZipEncoding.System.GetString(reader.ReadBytes(fileCommentLength));
                }

                return true;
            }
            else
            {
                reader.BaseStream.Position -= 4;
            }

            return false;
        }

        public void Write(BinaryWriter writer, bool isEntry)
        {
            byte[] entryNameBytes = ZipEncoding.System.GetBytes(Name);
            byte[] commentBytes = ZipEncoding.System.GetBytes(ExtraField ?? string.Empty);
            byte[] fileCommentBytes = ZipEncoding.System.GetBytes(FileComment ?? string.Empty);

            writer.Write(GetSignature(isEntry));
            writer.Write((ushort)Version);

            if (!isEntry)
            {
                writer.Write(VersionNeeded);
            }

            writer.Write((ushort)Flags);
            writer.Write((ushort)Method);
            writer.Write(ModificationDate.Time);
            writer.Write(ModificationDate.Date);
            writer.Write(Checksum);
            writer.Write(CompressedSize);
            writer.Write(UncompressedSize);

            writer.Write((ushort)entryNameBytes.Length);
            writer.Write((ushort)commentBytes.Length);

            if (!isEntry)
            {
                InternalFileAttributes = Convert.ToByte(CompressedSize != UncompressedSize);

                writer.Write((ushort)fileCommentBytes.Length);
                writer.Write(DiskStart);
                writer.Write(InternalFileAttributes);
                writer.Write(ExternalFileAttributes);
                writer.Write(OffsetLocalHeader);
            }

            writer.Write(entryNameBytes);
            writer.Write(commentBytes);

            if (!isEntry)
            {
                writer.Write(fileCommentBytes);
            }
        }
    }
}