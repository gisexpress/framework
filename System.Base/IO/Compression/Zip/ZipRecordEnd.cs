//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO.Compression
{
    [CLSCompliant(false)]
    public class ZipRecordEnd
    {
        public uint Signature = 0x6054B50;
        public ushort DiskNumber;
        public ushort DiskStart;
        public ushort DiskEntries;
        public ushort TotalEntries;
        public uint DirectorySize;
        public uint DiskOffset;
        public string Comment;

        public bool Read(BinaryReader reader)
        {
            if (reader.ReadUInt32() == Signature)
            {
                DiskNumber = reader.ReadUInt16();
                DiskStart = reader.ReadUInt16();
                DiskEntries = reader.ReadUInt16();
                TotalEntries = reader.ReadUInt16();
                DirectorySize = reader.ReadUInt32();
                DiskOffset = reader.ReadUInt32();
                Comment = ZipEncoding.System.GetString(reader.ReadBytes(reader.ReadUInt16()));
                return true;
            }

            return false;
        }

        public void Write(BinaryWriter writer)
        {
            byte[] commentBytes = ZipEncoding.System.GetBytes(Comment ?? string.Empty);

            writer.Write(Signature);
            writer.Write(DiskNumber);
            writer.Write(DiskStart);
            writer.Write(DiskEntries);
            writer.Write(TotalEntries);
            writer.Write(DirectorySize);
            writer.Write(DiskOffset);
            writer.Write((ushort)commentBytes.Length);
            writer.Write(commentBytes);
        }
    }
}
