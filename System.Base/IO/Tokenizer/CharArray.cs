//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO
{
    public class CharArray
    {
        public CharArray()
            : this(default(string))
        {
        }

        public CharArray(string value)
        {
            Chars = new char[1000];

            if (!string.IsNullOrEmpty(value))
            {
                NumChars = (Value = value).Length;
            }
        }

        public int Line
        {
            get;
            protected set;
        }

        public int Position
        {
            get;
            protected set;
        }

        protected char[] Chars;
        protected int CharIndex;
        protected readonly int NumChars;
        protected readonly string Value;

        public void Add(char c)
        {
            Chars[CharIndex++] = c;
        }

        public void Add(string s)
        {
            if (!string.IsNullOrEmpty(s))
            {
                int n = s.Length;
                s.CopyTo(0, Chars, CharIndex, n);
                CharIndex += n;
            }
        }

        public void AddChars(char c, int count)
        {
            for (int n = 0; n < count; n++)
            {
                Add(c);
            }
        }

        public int Count
        {
            get { return CharIndex; }
        }

        public bool Eof
        {
            get;
            private set;
        }

        public char Current
        {
            get;
            protected set;
        }

        public void Clear()
        {
            CharIndex = 0;
        }

        public bool MoveNext()
        {
            Position++;

            if (Position <= NumChars)
            {
                Current = Value[Position - 1];
                return true;
            }

            Eof = true;
            Current = char.MinValue;
            return false;
        }

        public bool NextIs(char c)
        {
            if (Position < NumChars)
            {
                return c == Value[Position];
            }

            return false;
        }

        public bool NextIsLetter()
        {
            if (Position < NumChars)
            {
                return char.IsLetter(Value[Position]);
            }

            return false;
        }

        public bool IsPrevious(char c)
        {
            if (Position > 1 && Position <= NumChars)
            {
                return c == Value[Position - 2];
            }

            return false;
        }

        public bool WhiteSpaceOrEnd()
        {
            if (Position < NumChars)
            {
                return char.IsWhiteSpace(Value[Position]);
            }

            return true;
        }

        public override string ToString()
        {
            return ToString(false);
        }

        public string ToString(bool clear)
        {
            try
            {
                return new string(Chars, 0, CharIndex);
            }
            finally
            {
                if (clear)
                {
                    Clear();
                }
            }
        }
    }
}
