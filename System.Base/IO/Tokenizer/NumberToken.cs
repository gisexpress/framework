//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Globalization;
using System.Xml;

namespace System.IO
{
    public class NumberToken : Token
    {
        static NumberToken()
        {
            NegativeSign = CultureInfo.InvariantCulture.NumberFormat.NegativeSign[0];
            PositiveSign = CultureInfo.InvariantCulture.NumberFormat.PositiveSign[0];
            DecimalSeparator = CultureInfo.InvariantCulture.NumberFormat.NumberDecimalSeparator[0];
        }

        public NumberToken(int line, int position, object value)
            : base(line, position, value)
        {
        }

        public static readonly char NegativeSign;
        public static readonly char PositiveSign;
        public static readonly char DecimalSeparator;

        public TypeCode ValueType
        {
            get { return Value.HasValue() ? Type.GetTypeCode(Value.GetType()) : TypeCode.Empty; }
        }

        public static bool TryRead(CharArray value, out Token token, out Exception e)
        {
            char c = value.Current;
            bool hasDecimalSeparator = DecimalSeparator.Equals(c);

            e = null;
            token = null;

            if (char.IsNumber(c) || c == NegativeSign || c == PositiveSign || hasDecimalSeparator)
            {
                var valueType = hasDecimalSeparator ? TypeCode.Double : TypeCode.Int32;

                value.Add(c);

                while (value.MoveNext())
                {
                    if (!hasDecimalSeparator && value.Current == DecimalSeparator)
                    {
                        hasDecimalSeparator = true;
                        valueType = TypeCode.Double;
                    }
                    else if (!char.IsNumber(value.Current))
                    {
                        if (value.Current == DecimalSeparator)
                        {
                            e = new InvalidNumberException(value);
                            return false;
                        }

                        if (c != DecimalSeparator)
                        {
                            if (value.Current.Equals('f') || value.Current.Equals('F'))
                            {
                                if (value.WhiteSpaceOrEnd())
                                {
                                    value.MoveNext();
                                    valueType = TypeCode.Single;
                                }
                            }
                            else if (value.Current.Equals('d') || value.Current.Equals('D'))
                            {
                                if (value.WhiteSpaceOrEnd())
                                {
                                    value.MoveNext();
                                    valueType = TypeCode.Double;
                                }
                            }
                            else if (value.Current.Equals('m') || value.Current.Equals('M'))
                            {
                                if (value.WhiteSpaceOrEnd())
                                {
                                    value.MoveNext();
                                    valueType = TypeCode.Decimal;
                                }
                            }
                            else if (value.Current.Equals('l') || value.Current.Equals('L'))
                            {
                                if (value.WhiteSpaceOrEnd())
                                {
                                    value.MoveNext();
                                    valueType = TypeCode.Int64;
                                }
                            }
                        }

                        break;
                    }

                    value.Add(value.Current);
                }

                if (char.IsNumber(c) || value.Count > 1)
                {
                    string s = value.ToString(true);

                    switch (valueType)
                    {
                        case TypeCode.Int32:
                            token = new NumberToken(value.Line, value.Position, XmlConvert.ToInt32(s));
                            return true;
                        case TypeCode.Int64:
                            token = new NumberToken(value.Line, value.Position, XmlConvert.ToInt64(s));
                            return true;
                        case TypeCode.Single:
                            token = new NumberToken(value.Line, value.Position, XmlConvert.ToSingle(s));
                            return true;
                        case TypeCode.Double:
                            token = new NumberToken(value.Line, value.Position, XmlConvert.ToDouble(s));
                            return true;
                        case TypeCode.Decimal:
                            token = new NumberToken(value.Line, value.Position, XmlConvert.ToDecimal(s));
                            return true;
                        default:
                            e = new NotImplementedException();
                            return false;
                    }
                }
                else
                {
                    value.Clear();
                    token = new CharToken(value.Line, value.Position, c);
                    return true;
                }
            }

            return false;
        }

        public override string LegacyToString()
        {
            switch (ValueType)
            {
                case TypeCode.Boolean:
                    return XmlConvert.ToString((bool)Value);
                case TypeCode.Int32:
                    return XmlConvert.ToString((int)Value);
                case TypeCode.Int64:
                    return XmlConvert.ToString((long)Value);
                case TypeCode.Single:
                    return XmlConvert.ToString((float)Value);
                case TypeCode.Double:
                    return XmlConvert.ToString((double)Value);
                case TypeCode.Decimal:
                    return XmlConvert.ToString((decimal)Value);
            }

            throw new NotImplementedException();
        }
    }
}
