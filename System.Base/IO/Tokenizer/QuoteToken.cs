//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO
{
    public class QuoteToken : WordToken
    {
        public const char SingleQuote = '\'';
        public const char DoubleQuote = '"';

        public const char PropertyQuotePrefix = '[';
        public const char PropertyQuoteSuffix = ']';

        public QuoteToken(int line, int position, string value)
            : this(line, position, value, Quotes.Single)
        {
        }

        public QuoteToken(int line, int position, string value, Quotes type)
            : base(line, position, value)
        {
            Type = type;
        }

        public Quotes Type
        {
            get;
            set;
        }

        public new static bool TryRead(CharArray value, out Token token, out Exception e)
        {
            e = null;
            token = null;

            if (value.Current == PropertyQuotePrefix && value.NextIsLetter())
            {
                while (value.MoveNext())
                {
                    if (value.Current == PropertyQuoteSuffix)
                    {
                        break;
                    }

                    value.Add(value.Current);
                }

                if (value.Current == PropertyQuoteSuffix)
                {
                    value.MoveNext();
                    token = new QuoteToken(value.Line, value.Position, value.ToString(true), Quotes.QuotesProperty);
                    return true;
                }

                e = new UnterminatedQuoteException(value);
                return false;
            }
            else if (value.Current == SingleQuote || value.Current == DoubleQuote)
            {
                Quotes type = value.Current == SingleQuote ? Quotes.Single : Quotes.Double;

                while (value.MoveNext())
                {
                    int n = 0;

                    while (value.Current == SingleQuote || value.Current == DoubleQuote)
                    {
                        n++;

                        if (n % 2 == 0)
                        {
                            n = 0;
                            value.Add(value.Current);
                        }

                        if (!value.MoveNext())
                        {
                            break;
                        }
                    }

                    if (n > 0)
                    {
                        token = new QuoteToken(value.Line, value.Position, value.ToString(true), type);
                        return true;
                    }

                    value.Add(value.Current);
                }

                e = new UnterminatedQuoteException(value);
                return false;
            }

            return false;
        }

        public static string LegacyToString(Quotes type, object value)
        {
            switch (type)
            {
                case Quotes.None:
                    return value as string;
                case Quotes.Double:
                    return string.Concat(DoubleQuote, value, DoubleQuote);
                case Quotes.Property:
                    return value as string;
                case Quotes.QuotesProperty:
                    return string.Concat(PropertyQuotePrefix, value, PropertyQuoteSuffix);
            }

            return string.Concat(SingleQuote, value, SingleQuote);
        }

        public override string LegacyToString()
        {
            return LegacyToString(Type, Value);
        }
    }
}