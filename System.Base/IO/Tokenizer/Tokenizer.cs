//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO
{
    public class Tokenizer : TokenCollection
    {
        protected Tokenizer()
            : this(default(string), true)
        {
        }

        protected Tokenizer(string s)
            : this(s, true)
        {
        }

        protected Tokenizer(string s, bool ignoreWhiteSpace)
        {
            IgnoreWhiteSpace = ignoreWhiteSpace;

            if (!string.IsNullOrEmpty(s))
            {
                Array = new CharArray(s);
            }
        }

        public static ITokenEnumerator Parse(string s)
        {
            return Parse(s.RemoveNewLines(), true);
        }

        public static ITokenEnumerator Parse(string s, bool ignoreWhiteSpace)
        {
            var e = new Tokenizer(s, ignoreWhiteSpace);
            e.ReadAll();
            return e;
        }

        protected CharArray Array;
        protected bool IgnoreWhiteSpace;

        public virtual bool ReadAll()
        {
            if (Array.HasValue() && Array.MoveNext())
            {
                Token token;

                while (true)
                {
                    if (Array.Eof)
                    {
                        break;
                    }

                    if (char.IsWhiteSpace(Array.Current))
                    {
                        if (IgnoreWhiteSpace)
                        {
                            if (Array.MoveNext())
                            {
                                continue;
                            }
                        }

                        Add(new WhiteSpaceToken(Array.Line, Array.Position, Array.Current));

                        if (Array.MoveNext())
                        {
                            continue;
                        }
                    }

                    if (NumberToken.TryRead(Array, out token, out Error))
                    {
                        Add(token);
                        continue;
                    }
                    else if (Error.HasValue())
                    {
                        return false;
                    }

                    if (QuoteToken.TryRead(Array, out token, out Error))
                    {
                        Add(token);
                        continue;
                    }
                    else if (Error.HasValue())
                    {
                        return false;
                    }

                    if (WordToken.TryRead(Array, out token, out Error))
                    {
                        Add(token);
                        continue;
                    }
                    else if (Error.HasValue())
                    {
                        return false;
                    }

                    Add(new CharToken(Array.Line, Array.Position, Array.Current));

                    if (Array.MoveNext())
                    {
                        continue;
                    }
                }
            }

            return true;
        }
    }
}
