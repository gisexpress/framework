//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.IO
{
    public class WordToken : Token
    {
        public WordToken(int line, int position, string value)
            : base(line, position, value)
        {
        }

        public static bool TryRead(CharArray value, out Token token, out Exception e)
        {
            e = null;

            if (IsLetter(value.Current))
            {
                while (IsLetterOrDigit(value.Current))
                {
                    value.Add(value.Current);

                    if (!value.MoveNext())
                    {
                        break;
                    }
                }
            }

            if (value.Count > 0)
            {
                token = new WordToken(value.Line, value.Position, value.ToString(true));
                return true;
            }

            token = default(Token);
            return false;
        }

        static bool IsLetter(char c)
        {
            return char.IsLetter(c) || c.Equals('_') || c.Equals('@');
        }

        static bool IsLetterOrDigit(char c)
        {
            return IsLetter(c) || char.IsDigit(c);
        }

        public override string LegacyToString()
        {
            return Convert.ToString(Value);
        }
    }
}
