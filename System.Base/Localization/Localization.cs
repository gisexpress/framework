//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;

namespace System
{
    public delegate void LanguageChangedEventHandler(Func<string, string> e);

    public class Localization
    {
        static Localization()
        {
            WordTable = new DataTable("Word");

            if (DeveloperEnvironment.WindowsApplication)
            {
                if (ApplicationConfiguration.Current.HasValue())
                {
                    Language = ApplicationConfiguration.Current.Language.Name;
                }
                else
                {
                    Language = Language.GetLanguage(Thread.CurrentThread.CurrentUICulture);
                }
            }

            Language = LanguageValue ?? Language.Turkish;

            if (DeveloperEnvironment.RuntimeMode)
            {
                OnRegisterAssembly(AppDomain.CurrentDomain.GetAssemblies());
                AppDomain.CurrentDomain.AssemblyLoad += OnRegisterAssembly;
            }
        }

        public static event Action Changed;

        protected static Language LanguageValue;
        protected static event LanguageChangedEventHandler LanguageChanged;

        protected static int AngularDecimalDigits = 3;
        protected static int LinearDecimalDigits = 3;
        protected static int NumberDecimalDigits = 3;

        protected static void OnRegisterAssembly(object sender, AssemblyLoadEventArgs e)
        {
            OnRegisterAssembly(e.LoadedAssembly);
        }

        protected static void OnRegisterAssembly(params Assembly[] assemblies)
        {
            foreach (Assembly assembly in assemblies)
            {
                if (assembly.IsDynamic && assembly.GlobalAssemblyCache)
                {
                    continue;
                }

                foreach (Stream stream in assembly.GetResourceStreams("LocalizedStrings.xml"))
                {
                    using (var data = new DataTable())
                    {
                        using (stream)
                        {
                            data.BeginInit();
                            data.BeginLoadData();
                            data.ReadXml(stream);
                            data.EndLoadData();
                            data.EndInit();
                        }

                        WordTable.Merge(data);
                    }
                }
            }
        }

        public static DataTable WordTable
        {
            get;
            private set;
        }

        public static string Name
        {
            get { return LanguageValue.Name; }
            set { Language = Language.GetLanguage(value); }
        }

        public static Language Language
        {
            get { return LanguageValue; }
            set
            {
                if (value.HasValue() && !Equals(LanguageValue, value))
                {
                    LanguageValue = value;
                    Thread.CurrentThread.CurrentUICulture = value;

                    if (DeveloperEnvironment.WindowsApplication)
                    {
                        if (ApplicationConfiguration.Current.HasValue())
                        {
                            ApplicationConfiguration.Current.Language.Name = value.Name;
                        }
                    }

                    LanguageValue.AngularFormat.NumberDecimalDigits = AngularDecimalDigits;
                    LanguageValue.AngularFormat.NumberGroupSeparator = " ";
                    LanguageValue.AngularFormat.NumberDecimalSeparator = ".";

                    LanguageValue.LinearFormat.NumberDecimalDigits = LinearDecimalDigits;
                    LanguageValue.LinearFormat.NumberGroupSeparator = " ";
                    LanguageValue.LinearFormat.NumberDecimalSeparator = ".";

                    LanguageValue.NumberFormat.NumberDecimalDigits = NumberDecimalDigits;
                    LanguageValue.NumberFormat.NumberGroupSeparator = " ";
                    LanguageValue.NumberFormat.NumberDecimalSeparator = ".";

                    OnLanguageChanged();
                }
            }
        }

        public static Language LanguageOther
        {
            get { return Localization.Language.IsEnglish ? Language.Turkish : Language.English; }
        }

        public static string GetOtherLanguageUrl(string prefix)
        {
            return String.Concat(prefix, Path.GetFileNameWithoutExtension(HttpContext.Current.Request.Path), "/", Localization.Language.IsEnglish ? "tr" : "en").ToLowerInvariant();
        }

        public static void Register()
        {
            // This method exists to call static constructor
        }

        public static void Register(LanguageChangedEventHandler onChanged)
        {
            Register(null, onChanged);
        }

        public static void Register(IComponent component, LanguageChangedEventHandler onChanged)
        {
            onChanged(Localize);

            LanguageChanged -= onChanged;
            LanguageChanged += onChanged;

            if (component.HasValue())
            {
                component.Disposed += (s, e) => LanguageChanged -= onChanged;
            }
        }

        public static void SetAngularDecimalDigits(int value)
        {
            SetDecimalDigits(value, LinearDecimalDigits, NumberDecimalDigits);
        }

        public static void SetLinearDecimalDigits(int value)
        {
            SetDecimalDigits(AngularDecimalDigits, value, NumberDecimalDigits);
        }

        public static void SetNumberDecimalDigits(int value)
        {
            SetDecimalDigits(AngularDecimalDigits, LinearDecimalDigits, value);
        }

        public static void SetDecimalDigits(int angular, int linear, int number)
        {
            angular = Math.Min(angular, 13);
            linear = Math.Min(linear, 13);
            number = Math.Min(number, 13);

            if (AngularDecimalDigits != angular || linear != LinearDecimalDigits || NumberDecimalDigits != number)
            {
                AngularDecimalDigits = angular;
                LinearDecimalDigits = linear;
                NumberDecimalDigits = number;

                foreach (string name in GetSupportedLanguages())
                {
                    Language language = Language.GetLanguage(name);

                    language.AngularFormat.NumberDecimalDigits = angular;
                    language.LinearFormat.NumberDecimalDigits = linear;
                    language.NumberFormat.NumberDecimalDigits = number;
                }

                OnLanguageChanged();
            }
        }

        protected static void OnLanguageChanged()
        {
            if (LanguageChanged.HasValue())
            {
                LanguageChanged(Localize);
            }

            if (Changed.HasValue())
            {
                Changed();
            }
        }

        public static bool ContainsKey(string key)
        {
            string word;
            return TryGetValue(key, out word);
        }

        public static bool TryGetValue(string key, out string word)
        {
            try
            {
                DataRow r = WordTable.Rows.Find(key);

                if (r.HasValue() && !r.IsNull(Name))
                {
                    word = r[Name] as string;

                    if (DeveloperEnvironment.WebApplication && !string.IsNullOrEmpty(word))
                    {
                        word = ReplaceKeywords(word);
                    }

                    return true;
                }
            }
            catch
            {
            }

            word = null;
            return false;
        }

        protected static string ReplaceKeywords(string word)
        {
            if (!string.IsNullOrEmpty(word))
            {
                word = word.Replace(@"\n", Environment.NewLine);

                if (word.Contains("[*]"))
                {
                    var n = default(int);
                    var e = new MatchEvaluator((match) => string.Concat("[", ++n, "]"));

                    word = Regex.Replace(word, @"\[\*\]", e);
                }
            }

            return word;
        }

        public static string Localize(string key)
        {
            if (!string.IsNullOrEmpty(key))
            {
                string word;

                if (TryGetValue(key, out word))
                {
                    return word;
                }
            }

            return key;
        }

        public static string FindKey(string localizedText)
        {
            if (!string.IsNullOrEmpty(localizedText))
            {
                DataRow r = WordTable.Select(string.Format("[{0}] = '{1}'", Name, localizedText)).FirstOrDefault();

                if (r.HasValue())
                {
                    return r["key"] as string;
                }
            }

            return localizedText;
        }

        public static IEnumerable<string> GetSupportedLanguages()
        {
            var e = WordTable.Columns.Cast<DataColumn>().GetEnumerator();

            e.MoveNext();

            while (e.MoveNext())
            {
                yield return e.Current.ColumnName;
            }
        }
    }
}
