//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Diagnostics;

namespace System
{
    public static class OSEnvironment
    {
        public static readonly bool IsUnix;
        public static readonly bool IsWindows;

        public static readonly bool IsMac;
        public static readonly bool IsLinux;
        public static readonly bool IsUnknown;

        static OSEnvironment()
        {
            var platform = (int)Environment.OSVersion.Platform;

            if (platform < 4)
            {
                Print("Windows");
                IsWindows = true;
            }
            else
            {
                IsUnix = platform == 4 || platform == 6 || platform == 128;
            }

            if (!IsWindows)
            {
                string name = ReadProcessOutput("uname");

                if (string.IsNullOrEmpty(name))
                {
                    IsUnknown = true;
                }
                else
                {
                    IsUnix = true;

                    if (name.ContainsIgnoreCase("Darwin"))
                    {
                        IsMac = true;
                        Print("Mac OS X");
                    }
                    else if (name.ContainsIgnoreCase("Linux"))
                    {
                        IsLinux = true;
                        Print("Linux");
                    }
                }
            }
        }

        static void Print(string platform)
        {
            string.Concat("Platform : ", platform).Print();
        }

        static string ReadProcessOutput(string name)
        {
            return ReadProcessOutput(name, null);
        }

        static string ReadProcessOutput(string name, string args)
        {
            try
            {
                using (var process = new Process())
                {
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;

                    if (!string.IsNullOrEmpty(args))
                    {
                        process.StartInfo.Arguments = string.Concat(" ", args);
                    }

                    process.StartInfo.FileName = name;
                    process.Start();

                    string output = (process.StandardOutput.ReadToEnd() ?? string.Empty).Trim();
                    process.WaitForExit();
                    return output;
                }
            }
            catch
            {
                return string.Empty;
            }
        }
    }
}