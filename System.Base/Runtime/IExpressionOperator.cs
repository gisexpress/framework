//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Reflection;

namespace System.Runtime
{
    [Obfuscation(Exclude = true)]
    public interface IExpressionOperator : IEnumerable<IExpressionOperator>, IKeyedObject
    {
        object Component
        {
            get;
            set;
        }

        new string Name
        {
            get;
            set;
        }

        bool IsEmpty();
        bool IsAggregate();
        bool IsMember();
        bool IsConstant();
        bool IsLogical();
        bool IsHandled();

        void Clear();
        bool Remove();

        bool Handled
        {
            get;
            set;
        }

        bool IsGroup
        {
            get;
            set;
        }

        Type ReturnType
        {
            get;
            set;
        }

        IExpressionOperator Parent
        {
            get;
            set;
        }

        IExpressionOperatorCollection Owner
        {
            get;
            set;
        }

        object Evaluate();
        object Evaluate(object component);

        bool Validate();
        bool Validate(object component);

        int ExecuteNonQuery(object component);
        object ExecuteScalar(object component);
        IEnumerable<IDataRecord> ExecuteReader(object component);

        Func<object> CreateDelegate();
        Func<object, object> CreateDelegate(object component);
        Func<object, object> CreateDelegate(Type componentType);

        Type PutInstructions(IInstructionEventArgs e);

        IEnumerable<T> OfType<T>(bool searchAllChildren) where T : IExpressionOperator;

        string LegacyToString();
        string LegacyToString(ILegacyToStringVisitor visitor);

        IExpressionOperator Clone();
    }
}
