//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace System.Runtime
{
    [Obfuscation(Exclude = true)]
    public interface IInstructionEventArgs
    {
        object Component
        {
            get;
        }

        bool ComponentIsNull
        {
            get;
        }

        Type ComponentType
        {
            get;
        }

        IExpressionOperator Operand
        {
            get;
            set;
        }

        ILGenerator Generator
        {
            get;
        }

        void Not();
        void Negates();
        void BitwiseNot();
        void Cast(Type valueType);
        void MakeRef(Type valueType);

        void LoadNull();
        void LoadValue(bool value);
        void LoadValue(int value);
        void LoadValue(long value);
        void LoadValue(float value);
        void LoadValue(double value);
        void LoadValue(decimal value);
        void LoadValue(string value);
        void LoadValue(DateTime value);
        Type LoadValue(object value);
        void LoadArray(IExpressionOperatorCollection parameters);
        void LoadArray(IExpressionOperatorCollection parameters, Type elementType);

        bool TryCallMember(string name, out Type returnType);
        bool TryCallMember(string name, out Type returnType, Func<int, IExpressionOperatorCollection> parameterN);
        bool TryCallMember(string name, out Type returnType, Func<int, IExpressionOperatorCollection> parameterN, Type declaringType);

        bool TryCallMembers(IEnumerator<string> e, out Type returnType, Func<int, IExpressionOperatorCollection> parameterN);
        bool TryCallMembers(IEnumerator<string> e, out Type returnType, Func<int, IExpressionOperatorCollection> parameterN, Type declaringType);
    }
}
