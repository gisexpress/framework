//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace System.Security.Cryptography
{
    [CLSCompliant(false)]
    public class Crc32 : HashAlgorithm
    {
        static Crc32()
        {
            Default = new Crc32();
        }

        public Crc32()
            : this(DefaultPolynomial, DefaultSeed)
        {
        }

        public Crc32(uint polynomial, uint seed)
        {
            Table = InitializeTable(polynomial);
            Seed = Hash32 = seed;
        }

        public static readonly Crc32 Default;

        protected const int BufferSize = 0x100;
        protected const uint DefaultSeed = 0xFFFFFFFFU;
        protected const uint DefaultPolynomial = 0xEDB88320U;

        protected uint Hash32;
        protected readonly uint Seed;
        protected readonly uint[] Table;

        public override void Initialize()
        {
            Hash32 = Seed;
        }

        public override int HashSize
        {
            get { return 32; }
        }

        public uint Compute(byte[] buffer)
        {
            return Compute(DefaultSeed, buffer);
        }

        public uint Compute(uint seed, byte[] buffer)
        {
            return ~CalculateHash(Table, seed, buffer, 0, buffer.Length);
        }

        protected override byte[] HashFinal()
        {
            var buffer = UInt32ToBigEndianBytes(~Hash32);
            HashValue = buffer;
            return buffer;
        }

        protected override void HashCore(byte[] array, int ibStart, int cbSize)
        {
            Hash32 = CalculateHash(Table, Hash32, array, ibStart, cbSize);
        }

        protected uint[] InitializeTable(uint polynomial)
        {
            var value = new uint[BufferSize];

            for (uint n = 0; n < BufferSize; n++)
            {
                uint entry = n;

                for (var j = 0; j < 8; j++)
                {
                    if ((entry & 1) == 1)
                    {
                        entry = (entry >> 1) ^ polynomial;
                    }
                    else
                    {
                        entry = entry >> 1;
                    }
                }

                value[n] = entry;
            }

            return value;
        }

        protected uint CalculateHash(uint[] table, uint seed, IList<byte> buffer, int start, int size)
        {
            var crc = seed;

            for (var i = start; i < size - start; i++)
            {
                crc = (crc >> 8) ^ table[buffer[i] ^ crc & 0xff];
            }

            return crc;
        }

        protected byte[] UInt32ToBigEndianBytes(UInt32 value)
        {
            var r = BitConverter.GetBytes(value);

            if (BitConverter.IsLittleEndian)
            {
                Array.Reverse(r);
            }

            return r;
        }
    }
}
