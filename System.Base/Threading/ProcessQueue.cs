//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Diagnostics;

namespace System.Threading
{
    public class ProcessQueue : ProcessQueue<int>
    {
    }

    public class ProcessQueue<T>
    {
        static ProcessQueue()
        {
            Default = new ProcessQueue<T>();
        }

        public ProcessQueue()
        {
            Items = new Dictionary<T, Context<T>>();
        }

        public readonly static ProcessQueue<T> Default;

        protected Dictionary<T, Context<T>> Items;

        public IDisposable Lock(T processId)
        {
            Context<T> context;

            while (!CreateContext(processId, out context))
            {
                context.Wait();
            }

            return context;
        }

        public void UnLock(T processId)
        {
            Context<T> context;

            if (CreateContext(processId, out context))
            {
                context.Dispose();
            }
        }

        protected bool CreateContext(T processId, out Context<T> context)
        {
            lock (Items)
            {
                if (!Items.ContainsKey(processId))
                {
                    Items.Add(processId, context = new Context<T>(this, processId));
                    context.Lock();
                    return true;
                }

                context = Items[processId];
                return false;
            }
        }

        protected class Context<TKey> : IDisposable
        {
            public Context(ProcessQueue<TKey> owner, TKey processId)
            {
                Owner = owner;
                ProcessId = processId;
            }

            protected readonly TKey ProcessId;
            protected ProcessQueue<TKey> Owner;

            public void Lock()
            {
                Monitor.Enter(this);
            }

            public void Wait()
            {
                lock (this)
                {
                    // Wait...
                }
            }

            public void Dispose()
            {
                lock (Owner.Items)
                {
                    if (!Owner.Items.Remove(ProcessId))
                    {
                        Debug.Fail("Invalid ProcessId");
                    }

                    Monitor.Exit(this);
                }

                GC.SuppressFinalize(this);
            }
        }
    }
}
