//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Windows.Forms;

namespace System
{
    public partial class UnitConverter : IUnitConverter
    {
        static UnitConverter()
        {
            Conversions.Factors["Meter", "Kilometer"] = 0.001;
            Conversions.Factors["Meter", "Foot"] = 3.2808399;
            Conversions.Factors["Meter", "Inch"] = 39.37007874015748;
            Conversions.Factors["Meter", "Centimeter"] = 100;
            Conversions.Factors["Meter", "Millimeters"] = 1000;

            Conversions.Factors["Foot", "Kilometer"] = 0.0003048;
            Conversions.Factors["Foot", "Inch"] = 12;
            Conversions.Factors["Foot", "Centimeter"] = 30.48;
            Conversions.Factors["Foot", "Millimeters"] = 304.8;

            Conversions.Factors["Inch", "Kilometer"] = 2.54e-5;
            Conversions.Factors["Inch", "Foot"] = 0.0833333333;
            Conversions.Factors["Inch", "Centimeter"] = 2.54;
            Conversions.Factors["Inch", "Millimeters"] = 25.4;

            Conversions.Factors["Centimeter", "Kilometer"] = 1e-5;
            Conversions.Factors["Centimeter", "Foot"] = 0.032808399;
            Conversions.Factors["Centimeter", "Inch"] = 0.393700787;
            Conversions.Factors["Centimeter", "Millimeters"] = 10;

            Conversions.Factors["Millimeters", "Kilometer"] = 1e-6;
            Conversions.Factors["Millimeters", "Foot"] = 0.0032808399;
            Conversions.Factors["Millimeters", "Inch"] = 0.0393700787;
            Conversions.Factors["Millimeters", "Centimeter"] = 0.1;

            Conversions.Factors["Degree", "Radian"] = Math.PI / 180.0;
            Conversions.Factors["Degree", "Gradian"] = 10.0 / 9.0;
            Conversions.Factors["Gradian", "Radian"] = Math.PI / 200.0;
        }

        public UnitConverter(LinearUnits linearUnit, LinearUnits linearDisplayUnit, AngularUnits angularUnit, AngularUnits angularDisplayUnit)
        {
            LinearUnit = GetUnitName(linearUnit);
            LinearDisplayUnit = GetUnitName(linearDisplayUnit);

            AngularUnit = GetUnitName(angularUnit);
            AngularDisplayUnit = GetUnitName(angularDisplayUnit);
        }

        public string AngularUnit
        {
            get;
            set;
        }

        public string LinearUnit
        {
            get;
            set;
        }

        public string AngularDisplayUnit
        {
            get;
            set;
        }

        public string LinearDisplayUnit
        {
            get;
            set;
        }

        public string GetUnitName(AngularUnits unit)
        {
            return Enums.GetName(unit);
        }

        public string GetUnitName(LinearUnits unit)
        {
            return Enums.GetName(unit);
        }

        public string GetUnitSymbol(string unit, UnitTypes type)
        {
            if (type == UnitTypes.Angular)
            {
                AngularUnits angular;

                if (Enum.TryParse<AngularUnits>(unit, out angular))
                {
                    switch (angular)
                    {
                        case AngularUnits.Degree: return "°";
                        case AngularUnits.Radian: return "rad";
                        case AngularUnits.Gradian: return "grad";
                    }
                }
            }
            else if (type == UnitTypes.Linear || type == UnitTypes.Square)
            {
                LinearUnits linear;
                string symbol = string.Empty;

                if (Enum.TryParse<LinearUnits>(unit, out linear))
                {
                    switch (linear)
                    {
                        case LinearUnits.Kilometer:
                            symbol = "km";
                            break;
                        case LinearUnits.Foot:
                            symbol = "′";
                            break;
                        case LinearUnits.Inch:
                            symbol = "″";
                            break;
                        case LinearUnits.Meter:
                            symbol = "m";
                            break;
                        case LinearUnits.Centimeter:
                            symbol = "cm";
                            break;
                        case LinearUnits.Millimeters:
                            symbol = "mm";
                            break;
                    }

                    if (type == UnitTypes.Square)
                    {
                        return string.Concat(symbol, "²");
                    }

                    return symbol;
                }
            }

            return string.Empty;
        }

        public double ConvertToSourceUnit(double value, UnitTypes type)
        {
            return Convert(value, type == UnitTypes.Angular ? AngularDisplayUnit : LinearDisplayUnit, type == UnitTypes.Angular ? AngularUnit : LinearUnit, type);
        }

        public double ConvertToDisplayUnit(double value, UnitTypes type)
        {
            return Convert(value, type == UnitTypes.Angular ? AngularUnit : LinearUnit, type == UnitTypes.Angular ? AngularDisplayUnit : LinearDisplayUnit, type);
        }

        public double ConvertTo(double value, string targetUnit, UnitTypes type)
        {
            return Convert(value, type == UnitTypes.Angular ? AngularUnit : LinearUnit, targetUnit, type);
        }

        static double Convert(double value, string sourceUnit, string targetUnit, UnitTypes type)
        {
            double factor = Conversions.Factors[sourceUnit, targetUnit];

            if (type == UnitTypes.Square)
            {
                factor *= factor;
            }

            return (value * factor).ReducePrecision();
        }

        public static double GetMonitorWidth(string unit)
        {
            return Screen.PrimaryScreen.Bounds.Width / GetPixelPerUnit("Inch") * Convert(1.0, "Inch", unit);
        }

        public static double GetPixelPerUnit(string unit)
        {
            using (Graphics g = Graphics.FromHwnd(IntPtr.Zero))
            {
                return g.DpiX * Convert(1.0, "Inch", unit);
            }
        }

        public static double Convert(double value, string sourceUnit, string targetUnit)
        {
            if (!sourceUnit.Equals(targetUnit, StringComparison.OrdinalIgnoreCase))
            {
                return value * Conversions.Factors[sourceUnit, targetUnit];
            }

            return value;
        }
    }
}
