//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
using System.ComponentModel;
using System.Drawing;
using System.Geometries;

namespace System.Xml
{
    public class XmlDocumentBase : XmlDocument
    {
        public static readonly XmlDocumentBase Empty = new XmlDocumentBase();

        public XmlDocumentBase()
        {
            AppendChild(CreateElement(Prefix, Constants.Xml.Kml, Constants.Xml.NamespaceURI));
        }

        IGeometryFactory iFactory;

        public IGeometryFactory Factory
        {
            get { return iFactory ?? (iFactory = TypeFactory.Default.Create<IGeometryFactory>(this)); }
        }

        public override string Prefix
        {
            get { return string.Empty; }
        }

        public override string NamespaceURI
        {
            get { return Constants.Xml.NamespaceURI; }
        }

        public override XmlElement CreateElement(string prefix, string localName, string namespaceURI)
        {
            switch (localName)
            {
                case Constants.Xml.Coordinates:
                    return (XmlCoordinatesElement)Factory.Create<ICoordinateCollection>();

                case Constants.Xml.Point:
                case Constants.Xml.LineString:
                case Constants.Xml.LinearRing:
                case Constants.Xml.Polygon:
                case Constants.Xml.MultiPoint:
                case Constants.Xml.MultiLineString:
                case Constants.Xml.MultiPolygon:
                case Constants.Xml.GeometryCollection:
                    return (XmlElementBase)Factory.Create(string.Concat('I', localName));

                case Constants.Xml.OuterBoundaryIs:
                case Constants.Xml.InnerBoundaryIs:
                    return (XmlElement)Factory.Create<ILinearRingCollection>(localName);

                case Constants.Xml.Style:
                    return new PaintStyle(this);

                case Constants.Xml.PolyStyle:
                    return new PolyStyle(this);

                case Constants.Xml.LineStyle:
                    return new LineStyle(this);
            }

            return new XmlElementBase(prefix, localName, namespaceURI, this);
        }

        protected XmlElementBase GetOrCreate(string name)
        {
            if (DocumentElement == null)
            {
                return default;
            }

            var e = (XmlElementBase)DocumentElement[name];

            if (e == null)
            {
                DocumentElement.AppendChild(e = (XmlElementBase)CreateElement(Prefix, name, NamespaceURI));
            }

            return e;
        }
    }
}
