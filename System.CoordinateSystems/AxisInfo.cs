//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;

namespace System.CoordinateSystems
{
    internal class AxisInfo : Info, IAxisInfo
    {
        public AxisInfo(string name, AxisOrientation orientation)
            : base(name, 0)
        {
            Orientation = orientation;
        }

        public AxisOrientation Orientation
        {
            get;
            set;
        }

        public static AxisInfo Easting
        {
            get { return new AxisInfo("Easting", AxisOrientation.East); }
        }

        public static AxisInfo Northing
        {
            get { return new AxisInfo("Northing", AxisOrientation.North); }
        }

        public static AxisInfo X
        {
            get { return new AxisInfo("X", AxisOrientation.East); }
        }

        public static AxisInfo Y
        {
            get { return new AxisInfo("Y", AxisOrientation.North); }
        }

        public static AxisInfo Longitude
        {
            get { return new AxisInfo("Longitude", AxisOrientation.East); }
        }

        public static AxisInfo Latitude
        {
            get { return new AxisInfo("Latitude", AxisOrientation.North); }
        }

        public static AxisInfo Altitude
        {
            get { return new AxisInfo("Altitude", AxisOrientation.Up); }
        }

        public override bool IsEquivalent(object obj)
        {
            return Equals(obj);
        }

        public override int GetHashCode()
        {
            return (int)Orientation;
        }

        public override bool Equals(object obj)
        {
            var axis = obj as AxisInfo;

            if (axis == null)
            {
                return false;
            }

            return Orientation == axis.Orientation;
        }

        public static bool Read(ITokenEnumerator e, out AxisInfo value)
        {
            if (e.Current.Equals("AXIS") && e.ReadNext('['))
            {
                string name;
                string orientation = null;

                if (ReadName(e, out name) && e.Current.Equals(',') && e.MoveNext())
                {
                    var wordValue = e.Current as WordToken;
                    var quoteValue = e.Current as QuoteToken;

                    if (wordValue.HasValue()) orientation = wordValue.StringValue;
                    else if (quoteValue.HasValue()) orientation = quoteValue.StringValue;

                    if (!string.IsNullOrEmpty(orientation) && e.ReadNext(']'))
                    {
                        e.MoveNext();
                        value = new AxisInfo(name, (AxisOrientation)Enum.Parse(typeof(AxisOrientation), orientation, true));
                        return true;
                    }
                }
            }

            value = null;
            return false;
        }

        public override string ToString()
        {
            return string.Concat(@"AXIS[""", Name, @""",", Enum.GetName(typeof(AxisOrientation), Orientation).ToUpperInvariant(), "]");
        }
    }
}
