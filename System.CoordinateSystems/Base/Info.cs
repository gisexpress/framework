//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;
using System.Xml;

namespace System.CoordinateSystems
{
    internal abstract class Info : IInfo
    {
        protected Info(string name, Authority authority)
        {
            NameValue = ValidateName(name);
            Authority = authority ?? 0;
        }

        protected string NameValue;

        public virtual string Name
        {
            get { return NameValue; }
            set { NameValue = ValidateName(value); }
        }

        public Authority Authority
        {
            get;
            set;
        }

        public abstract bool IsEquivalent(object obj);

        protected static bool ReadName(ITokenEnumerator e, out string name)
        {
            if (e.Current.Equals('['))
            {
                e.MoveNext();
            }

            if (e.Current is WordToken)
            {
                name = e.Current.StringValue;
                return e.MoveNext();
            }

            name = string.Empty;
            return false;
        }

        protected static bool ReadAuthority(ITokenEnumerator e, out Authority authority)
        {
            QuoteToken name;
            QuoteToken srid;

            if (e.Current.Equals(','))
            {
                e.MoveNext();
            }

            if (e.Current.Equals("AUTHORITY") && e.ReadNext('[') && e.ReadQuote(out name) && e.ReadNext(',') && e.ReadQuote(out srid) && e.ReadNext(']'))
            {
                authority = XmlConvert.ToInt32(srid.StringValue);
                return e.MoveNext();
            }

            authority = null;
            return false;
        }

        protected static string ValidateName(string value)
        {
            return (value ?? string.Empty).ToTitleCase().Replace('_', ' ');
        }

        public virtual object Clone()
        {
            return MemberwiseClone();
        }

        public override string ToString()
        {
            if (!Authority.IsEmpty())
            {
                return Authority;
            }

            return string.Empty;
        }
    }
}