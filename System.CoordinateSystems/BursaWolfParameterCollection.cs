//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.CoordinateSystems.Epsg;
using System.IO;
using System.Xml;

namespace System.CoordinateSystems
{
    internal class BursaWolfParameterCollection : IBursaWolfParameterCollection
    {
        EpsgAreaRecord _areaRecord;
        public const double SecToRad = ((Math.PI / 180.0) / 3600.0);

        public static BursaWolfParameterCollection Empty
        {
            get { return new BursaWolfParameterCollection(); }
        }

        public bool IsEmpty()
        {
            return GetHashCode() == 0;
        }

        public double Dx
        {
            get;
            set;
        }

        public double Dy
        {
            get;
            set;
        }

        public double Dz
        {
            get;
            set;
        }

        public double Ex
        {
            get;
            set;
        }

        public double Ey
        {
            get;
            set;
        }

        public double Ez
        {
            get;
            set;
        }

        public double Ppm
        {
            get;
            set;
        }

        public byte Variant
        {
            get;
            set;
        }

        public string AreaOfUse
        {
            get { return EpsgArea.GetName(); }
            set { EpsgArea["Name"] = value; }
        }

        public int EpsgAreaCode
        {
            get;
            set;
        }

        public EpsgAreaRecord EpsgArea
        {
            get
            {
                if (_areaRecord == null)
                {
                    _areaRecord = EpsgAreaTable.Current.Find(EpsgAreaCode) ?? new EpsgAreaRecord();
                }

                return _areaRecord;
            }
        }

        public void ToAffineParameters(out double rs, out double ex, out double ey, out double ez, out double dx, out double dy, out double dz)
        {
            rs = 1.0 + Ppm * 0.000001;
            ex = Ex * SecToRad * rs;
            ey = Ey * SecToRad * rs;
            ez = Ez * SecToRad * rs;
            dx = Dx;
            dy = Dy;
            dz = Dz;
        }

        /// <summary>
        /// Returns true of all 7 parameter values are 0.0
        /// </summary>
        /// <returns></returns>
        public bool HasZeroValuesOnly
        {
            get { return Equals(Dx, 0.0) && Equals(Dy, 0.0) && Equals(Dz, 0.0) && Equals(Ex, 0.0) && Equals(Ey, 0.0) && Equals(Ez, 0.0) && Equals(Ppm, 0.0); }
        }

        public double[] ToArray()
        {
            return new[] { Dx, Dy, Dz, Ex, Ey, Ez, Ppm };
        }

        /// <summary>
        /// Indicates whether the current object is equal to another object of the same type.
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            BursaWolfParameterCollection o1;
            BursaWolfParameter o2;
            IEnumerable<BursaWolfParameterCollection> o3;

            if ((o1 = obj as BursaWolfParameterCollection).HasValue())
            {
                return Equals(o1);
            }

            if ((o2 = obj as BursaWolfParameter).HasValue())
            {
                return Equals(o2);
            }

            if ((o3 = obj as IList<BursaWolfParameterCollection>).HasValue())
            {
                return Equals(o3);
            }

            return false;
        }

        public bool Equals(BursaWolfParameter obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (!(Dx - obj.Dx).IsZero()) return false;
            if (!(Dy - obj.Dy).IsZero()) return false;
            if (!(Dz - obj.Dz).IsZero()) return false;
            if (!(Ex - obj.Ex).IsZero()) return false;
            if (!(Ey - obj.Ey).IsZero()) return false;
            if (!(Ez - obj.Ez).IsZero()) return false;
            if (!(Ppm - obj.Ppm).IsZero()) return false;

            return true;
        }

        public bool Equals(IEnumerable<BursaWolfParameterCollection> others)
        {
            foreach (BursaWolfParameterCollection item in others)
            {
                if (Equals(item))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Checks whether the values of this instance is equal to the values of another instance.
        /// Only parameters used for coordinate system are used for comparison.
        /// Name, abbreviation, authority, alias and remarks are ignored in the comparison.
        /// </summary>
        /// <param name="obj"></param>
        /// <returns>True if equal</returns>
        public bool Equals(IBursaWolfParameterCollection obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (!(Dx - obj.Dx).IsZero()) return false;
            if (!(Dy - obj.Dy).IsZero()) return false;
            if (!(Dz - obj.Dz).IsZero()) return false;
            if (!(Ex - obj.Ex).IsZero()) return false;
            if (!(Ey - obj.Ey).IsZero()) return false;
            if (!(Ez - obj.Ez).IsZero()) return false;
            if (!(Ppm - obj.Ppm).IsZero()) return false;

            return true;
        }

        /// <summary>
        /// Returns a hash code for the specified object
        /// </summary>
        /// <returns>A hash code for the specified object</returns>
        public override int GetHashCode()
        {
            return Dx.GetHashCode() ^ Dy.GetHashCode() ^ Dz.GetHashCode() ^ Ex.GetHashCode() ^ Ey.GetHashCode() ^ Ez.GetHashCode() ^ Ppm.GetHashCode();
        }

        object ICloneable.Clone()
        {
            return Clone();
        }

        public BursaWolfParameterCollection Clone()
        {
            return (BursaWolfParameterCollection)MemberwiseClone();
        }

        public static bool Read(ITokenEnumerator e, out BursaWolfParameterCollection value)
        {
            if (e.Current.Equals("TOWGS84") && e.ReadNext('['))
            {
                var parameters = new List<double>(7);

                while (e.ReadNumber(out NumberToken number))
                {
                    parameters.Add(Convert.ToDouble(number.Value));

                    if (e.MoveNext() && e.Current.Equals(']'))
                    {
                        e.MoveNext();
                        break;
                    }
                }

                if (parameters.Count == 7)
                {
                    value = new BursaWolfParameterCollection
                    {
                        Dx = parameters[0],
                        Dy = parameters[1],
                        Dz = parameters[2],
                        Ex = parameters[3],
                        Ey = parameters[4],
                        Ez = parameters[5],
                        Ppm = parameters[6]
                    };

                    return true;
                }
            }

            value = Empty;
            return false;
        }

        public string GetDefinition()
        {
            return string.Concat(
                "ToWgs84", Environment.NewLine,
                "  Transform : ", Dx.ToText(), ", ", Dy.ToText(), ", ", Dz.ToText(), Environment.NewLine,
                "  Rotation  : ", Ex.ToText(), ", ", Ey.ToText(), ", ", Ez.ToText(), Environment.NewLine,
                "  Scale     : ", Ppm.ToText(), Environment.NewLine);
        }

        public override string ToString()
        {
            return string.Concat("TOWGS84[", Dx.ToText(), ',', Dy.ToText(), ',', Dz.ToText(), ',', Ex.ToText(), ',', Ey.ToText(), ',', Ez.ToText(), ',', Ppm.ToText(), "]");
        }
    }
}
