//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.CoordinateSystems
{
    internal class CompoundCoordinateSystem : CoordinateSystem, ICompoundCoordinateSystem
    {
        public CompoundCoordinateSystem(string name, Authority authority, ICoordinateSystem head, ICoordinateSystem tail)
            : base(name, authority, null)
        {
            HeadCoordinateSystem = head;
            TailCoordinateSystem = tail;
        }

        public ICoordinateSystem HeadCoordinateSystem
        {
            get;
            protected set;
        }

        public ICoordinateSystem TailCoordinateSystem
        {
            get;
            protected set;
        }

        public override IUnit GetUnit()
        {
            return TailCoordinateSystem.GetUnit();
        }

        protected override IMathTransform OnCreateTransform(ICoordinateSystem target)
        {
            throw new NotImplementedException();
        }

        public override bool IsEquivalent(object obj)
        {
            var o = obj as ICompoundCoordinateSystem;

            if (o.HasValue())
            {
                return o.HeadCoordinateSystem.IsEquivalent(HeadCoordinateSystem) && o.TailCoordinateSystem.IsEquivalent(TailCoordinateSystem);
            }

            return false;
        }

        public override object Clone()
        {
            return new CompoundCoordinateSystem(Name, Authority, (ICoordinateSystem)HeadCoordinateSystem.Clone(), (ICoordinateSystem)TailCoordinateSystem.Clone());
        }

        public override string GetDefinition()
        {
            return string.Concat(HeadCoordinateSystem.GetDefinition(), Environment.NewLine, Environment.NewLine, TailCoordinateSystem.GetDefinition());
        }

        public override string ToString()
        {
            var s = string.Concat(@"COMPD_CS[""", Name, @""",", HeadCoordinateSystem, ',', TailCoordinateSystem);

            if (!Authority.IsEmpty())
            {
                s = string.Concat(",", Authority);
            }

            return string.Concat(s, "]");
        }
    }
}
