//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.CoordinateSystems.Epsg;
using System.Linq;

namespace System.CoordinateSystems
{
    partial class CoordinateSystem
    {
        public static ICoordinateSystem Create(Authority authority)
        {
            if (!authority.IsEmpty())
            {
                var record = EpsgCoordinateReferenceSystemTable.Current.Find(authority);

                if (record.HasValue())
                {
                    switch (record.Type)
                    {
                        case EpsgCoordinateReferenceSystemType.Geographic2D:
                            return CreateGeographicCoordinateSystem(record);
                        case EpsgCoordinateReferenceSystemType.Projected:
                            return CreateProjectedCoordinateSystem(record);
                        case EpsgCoordinateReferenceSystemType.Geocentric:
                            return CreateGeocentricCoordinateSystem(record);
                        case EpsgCoordinateReferenceSystemType.Compound:
                            return CreateCompoundCoordinateSystem(record);
                    }
                }
            }

            return null;
        }

        static GeographicCoordinateSystemCls CreateGeographicCoordinateSystem(Authority authority)
        {
            var record = EpsgCoordinateReferenceSystemTable.Current.Find(authority);

            if (record.HasValue())
            {
                return CreateGeographicCoordinateSystem(record);
            }

            return null;
        }

        static GeographicCoordinateSystemCls CreateGeographicCoordinateSystem(EpsgCoordinateReferenceSystemRecord record)
        {
            if (record.Type == EpsgCoordinateReferenceSystemType.Geographic2D)
            {
                int primeMeridianCode;
                IPrimeMeridian primeMeridian;
                IHorizontalDatum horizontalDatum;

                if (record.GetFinalDatumCode() > 0)
                {
                    horizontalDatum = CreateHorizontalDatum(record.GetFinalDatumCode(), out primeMeridianCode);
                    primeMeridian = CreatePrimeMeridian(primeMeridianCode);
                }
                else
                {
                    horizontalDatum = HorizontalDatumCls.WGS84;
                    primeMeridian = PrimeMeridianCls.Greenwich;
                }

                return new GeographicCoordinateSystemCls(record.GetName(), record.GetCode(), horizontalDatum, primeMeridian, GetAxisInfo(record.GetCoordSysCode()), AngularUnitCls.Degrees);
            }

            return null;
        }

        static CoordinateSystem CreateProjectedCoordinateSystem(EpsgCoordinateReferenceSystemRecord record)
        {
            var gcrs = EpsgCoordinateReferenceSystemTable.Current.Find(record.GetBaseCRSCode());

            if (gcrs.HasValue())
            {
                var unit = LinearUnitCls.Metre;
                var projection = default(IProjection);
                var datum = CreateHorizontalDatum(record.GetFinalDatumCode());
                var geocs = CreateGeographicCoordinateSystem(gcrs);

                projection = CreateProjection(GetMethodOperationCodeFromProjectionCode(record.GetProjnConvCode()).FirstOrDefault(), record.GetProjnConvCode(), datum.Ellipsoid, unit);
                
                return new ProjectedCoordinateSystem(record.GetName(), record.GetCode(), datum, geocs, projection, GetAxisInfo(record.GetCoordSysCode()), unit);
            }

            return null;
        }

        static CoordinateSystem CreateGeocentricCoordinateSystem(EpsgCoordinateReferenceSystemRecord record)
        {
            if (record.Type == EpsgCoordinateReferenceSystemType.Geocentric)
            {
                int primeMeridianCode;
                PrimeMeridianCls primeMeridian;
                HorizontalDatumCls horizontalDatum;

                if (record.GetFinalDatumCode() > 0)
                {
                    horizontalDatum = CreateHorizontalDatum(record.GetFinalDatumCode(), out primeMeridianCode);
                    primeMeridian = CreatePrimeMeridian(primeMeridianCode);
                }
                else
                {
                    horizontalDatum = HorizontalDatumCls.WGS84;
                    primeMeridian = PrimeMeridianCls.Greenwich;
                }

                return new GeocentricCoordinateSystem(record.GetName(), record.GetCode(), horizontalDatum, primeMeridian, GetAxisInfo(record.GetCoordSysCode()));
            }

            return null;
        }

        static CompoundCoordinateSystem CreateCompoundCoordinateSystem(EpsgCoordinateReferenceSystemRecord record)
        {
            if (record.Type == EpsgCoordinateReferenceSystemType.Compound)
            {
                return new CompoundCoordinateSystem(record.GetName(), record.GetCode(), Create(record.GetCmpdHorCRSCode()), Create(record.GetCmpdVertCRSCode()));
            }

            return null;
        }

        static HorizontalDatumCls CreateHorizontalDatum(Authority authority)
        {
            int primeMeridianCode;
            return CreateHorizontalDatum(authority, out primeMeridianCode);
        }

        static HorizontalDatumCls CreateHorizontalDatum(Authority authority, out int primeMeridianCode)
        {
            var datum = EpsgDatumTable.Current.Find(authority);

            if (datum.HasValue())
            {
                EllipsoidCls ellipsoid = CreateEllipsoid(datum.GetEllipsoidCode());

                if (ellipsoid.HasValue())
                {
                    BursaWolfParameterCollection transform = EpsgDatabase.Current.BursaWolfParameters[authority].Select(parameter => new BursaWolfParameterCollection { Dx = parameter.Dx, Dy = parameter.Dy, Dz = parameter.Dz, Ex = parameter.Ex, Ey = parameter.Ey, Ez = parameter.Ez, Ppm = parameter.Ppm, AreaOfUse = parameter.ToString() }).FirstOrDefault();
                    primeMeridianCode = datum.GetPrimeMeridianCode();
                    return new HorizontalDatumCls(datum.GetName(), authority, ellipsoid, transform ?? BursaWolfParameterCollection.Empty);
                }
            }

            primeMeridianCode = 0;
            return null;
        }

        static EllipsoidCls CreateEllipsoid(Authority authority)
        {
            var ellipsoid = EpsgEllipsoidTable.Current.Find(authority);

            if (ellipsoid.HasValue())
            {
                LinearUnitCls linearUnit = CreateLinearUnit(ellipsoid.GetAxesUnitsCode());

                if (ellipsoid.SemiMinorAxisIsNull())
                {
                    return new EllipsoidCls(ellipsoid.GetName(), authority, ellipsoid.GetSemiMajorAxis(), 0.0, ellipsoid.GetInverseFlattening(), true, linearUnit);
                }

                if (ellipsoid.InverseFlatteningIsNull())
                {
                    return new EllipsoidCls(ellipsoid.GetName(), authority, ellipsoid.GetSemiMajorAxis(), ellipsoid.GetSemiMinorAxis(), 0.0, false, linearUnit);
                }

                return new EllipsoidCls(ellipsoid.GetName(), authority, ellipsoid.GetSemiMajorAxis(), ellipsoid.GetSemiMinorAxis(), ellipsoid.GetInverseFlattening(), false, linearUnit);
            }

            return null;
        }

        static PrimeMeridianCls CreatePrimeMeridian(Authority authority)
        {
            var primeMeridian = EpsgPrimeMeridianTable.Current.Find(authority);

            if (primeMeridian.HasValue())
            {
                return new PrimeMeridianCls(primeMeridian.GetName(), primeMeridian.GetCode(), primeMeridian.GetLongitudeFromGreenwich(), CreateAngularUnit(primeMeridian.GetLongitudeUOM()));
            }

            return null;
        }

        public static LinearUnitCls CreateLinearUnit(Authority authority)
        {
            var unitOfMeasure = EpsgUnitOfMeasureTable.Current.Find(authority);

            if (unitOfMeasure.HasValue() && unitOfMeasure.GetType() == EpsgUnitOfMeasureKind.Length)
            {
                return new LinearUnitCls(unitOfMeasure.GetUnitName(), authority, unitOfMeasure.GetFactorB() * unitOfMeasure.GetFactorC());
            }

            return null;
        }

        public static AngularUnitCls CreateAngularUnit(Authority authority)
        {
            AngularUnitCls angularUnit = null;
            var unitOfMeasure = EpsgUnitOfMeasureTable.Current.Find(authority);

            if (unitOfMeasure.HasValue() && unitOfMeasure.GetType() == EpsgUnitOfMeasureKind.Angle)
            {
                if (!unitOfMeasure.FactorIsNull())
                {
                    angularUnit = new AngularUnitCls(unitOfMeasure.GetUnitName(), authority, unitOfMeasure.GetFactorB() / unitOfMeasure.GetFactorC());
                }
                else
                {
                    // some units have a null for the Factor B - so must then try using the other UOM code.
                    angularUnit = CreateAngularUnit(unitOfMeasure.GetTargetUnitCode());
                }
            }

            return angularUnit;
        }

        static IProjection CreateProjection(Authority authority, int projectionCode, IEllipsoid ellipsoid, ILinearUnit unit)
        {
            var method = EpsgCoordinateOperationTable.MethodTable.Current.Find(authority);

            if (method.HasValue())
            {
                return ProjectionFactory.Create(method.GetMethodName(), authority, ellipsoid, unit, GetParameters(projectionCode));
            }

            return null;
        }

        static IEnumerable<int> GetMethodOperationCodeFromProjectionCode(Authority authority)
        {
            return EpsgCoordinateOperationTable.ParameterValueTable.Current.FindByOperation(authority).Select(value => value.GetMethodCode());
        }

        static ProjectionParameterCollection GetParameters(int projectionConversionCode)
        {
            var collection = new ProjectionParameterCollection();

            foreach (EpsgOperationParameter parameter in EpsgCoordinateOperationTable.ParameterTable.FindParameters(projectionConversionCode))
            {
                collection.Add(new ProjectionParameter(parameter.Name, parameter.Value));
            }

            return collection;
        }

        static AxisInfoCollection GetAxisInfo(Authority authority)
        {
            var collection = new AxisInfoCollection();

            foreach (EpsgCoordinateAxisRecord r in EpsgCoordinateAxisTable.Current.FindByCoordinateAxis(authority))
            {
                collection.Add(r.GetAbbreviation(), GetOrientation(r.GetAxisOrientation()));
            }

            return collection;
        }

        static AxisOrientation GetOrientation(string axisOrientation)
        {
            if (!string.IsNullOrEmpty(axisOrientation))
            {
                if (axisOrientation.StartsWith("north", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.North;
                if (axisOrientation.StartsWith("south", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.South;
                if (axisOrientation.StartsWith("east", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.East;
                if (axisOrientation.StartsWith("west", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.West;
                if (axisOrientation.StartsWith("up", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.Up;
                if (axisOrientation.StartsWith("down", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.Down;

                if (axisOrientation.StartsWith("Geocentric X", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.Other;
                if (axisOrientation.StartsWith("Geocentric Y", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.East;
                if (axisOrientation.StartsWith("Geocentric Z", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.North;

                if (axisOrientation.StartsWith("Geocentre > equator/0°E", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.Other;
                if (axisOrientation.StartsWith("Geocentre > equator/90°E", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.East;
                if (axisOrientation.StartsWith("Geocentre > north pole", StringComparison.OrdinalIgnoreCase)) return AxisOrientation.North;
            }

            throw new NotSupportedException();
        }
    }
}
