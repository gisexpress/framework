//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;

namespace System.CoordinateSystems
{
    internal class GeographicCoordinateSystemCls : HorizontalCoordinateSystem, IGeographicCoordinateSystem
    {
        public GeographicCoordinateSystemCls(string name, Authority authority, IHorizontalDatum horizontalDatum, IPrimeMeridian primeMeridian, AxisInfoCollection axes, IAngularUnit angularUnit)
            : base(name, authority, horizontalDatum, axes)
        {
            AngularUnit = angularUnit;
            PrimeMeridian = primeMeridian;
        }

        public static IGeographicCoordinateSystem AuxiliarySphereWgs84
        {
            get { return new GeographicCoordinateSystemCls("WGS 1984 Major Auxiliary Sphere", 0, HorizontalDatumCls.AuxiliarySphereWgs84, PrimeMeridianCls.Greenwich, new AxisInfoCollection { { "Lon", AxisOrientation.East }, { "Lat", AxisOrientation.North } }, AngularUnitCls.Degrees); }
        }

        public static IGeographicCoordinateSystem WGS84
        {
            get { return new GeographicCoordinateSystemCls("WGS 84", 4326, HorizontalDatumCls.WGS84, PrimeMeridianCls.Greenwich, new AxisInfoCollection { { "Lon", AxisOrientation.East }, { "Lat", AxisOrientation.North } }, AngularUnitCls.Degrees); }
        }

        public static IGeographicCoordinateSystem ED50
        {
            get { return new GeographicCoordinateSystemCls("ED50", 4230, HorizontalDatumCls.ED50, PrimeMeridianCls.Greenwich, new AxisInfoCollection { AxisInfo.Longitude, AxisInfo.Latitude }, AngularUnitCls.Degrees); }
        }

        public override IUnit GetUnit()
        {
            return AngularUnit;
        }

        public IAngularUnit AngularUnit
        {
            get;
            set;
        }

        public IPrimeMeridian PrimeMeridian
        {
            get;
            set;
        }

        protected override IMathTransform OnCreateTransform(ICoordinateSystem target)
        {
            IMathTransform transform;

            if ((transform = CreateTransform(target as IGeographicCoordinateSystem)).HasValue()) return transform;
            if ((transform = CreateTransform(target as IGeocentricCoordinateSystem)).HasValue()) return transform;
            if ((transform = CreateTransform(target as IProjectedCoordinateSystem)).HasValue()) return transform;

            return null;
        }

        IMathTransform CreateTransform(IGeographicCoordinateSystem target)
        {
            if (target.HasValue())
            {
                if (!HorizontalDatum.IsEquivalent(target.HorizontalDatum))
                {
                    if (HorizontalDatum.Ellipsoid.SemiMajorAxis.IsEquivalent(6378137) && HorizontalDatum.Ellipsoid.SemiMajorAxis.IsEquivalent(HorizontalDatum.Ellipsoid.SemiMinorAxis))
                    {
                        return WGS84.CreateTransform(target);
                    }

                    if (target.HorizontalDatum.Ellipsoid.SemiMajorAxis.IsEquivalent(6378137) && target.HorizontalDatum.Ellipsoid.SemiMajorAxis.IsEquivalent(target.HorizontalDatum.Ellipsoid.SemiMinorAxis))
                    {
                        return CreateTransform(WGS84);
                    }

                    var sc = new GeocentricCoordinateSystem(HorizontalDatum.Name + " Geocentric", 0, HorizontalDatum, PrimeMeridian);
                    var tc = new GeocentricCoordinateSystem(target.HorizontalDatum.Name + " Geocentric", 0, target.HorizontalDatum, PrimeMeridian);
                    return new ConcatenatedTransform(Authority, target.Authority, CreateTransform(sc), sc.CreateTransform(tc), tc.CreateTransform(target));
                }

                return new GeographicTransform(this, target);
            }

            return null;
        }

        IMathTransform CreateTransform(IGeocentricCoordinateSystem target)
        {
            if (target.HasValue())
            {
                return new GeocentricTransform(Authority, target.Authority, target.HorizontalDatum.Ellipsoid);
            }

            return null;
        }

        IMathTransform CreateTransform(IProjectedCoordinateSystem target)
        {
            if (target.HasValue())
            {
                IMathTransform transform = target.CreateTransform(this);
                transform.Invert();
                return transform;
            }

            return null;
        }

        public override bool IsEquivalent(object obj)
        {
            var o = obj as IGeographicCoordinateSystem;

            if (o == null)
            {
                return false;
            }

            if (!Axes.IsEquivalent(o.Axes))
            {
                return false;
            }

            if (!AngularUnit.IsEquivalent(o.AngularUnit))
            {
                return false;
            }

            if (!HorizontalDatum.IsEquivalent(o.HorizontalDatum))
            {
                return false;
            }

            if (!PrimeMeridian.IsEquivalent(o.PrimeMeridian))
            {
                return false;
            }

            return true;
        }

        public static bool Read(ITokenEnumerator e, out IGeographicCoordinateSystem value)
        {
            if (e.Current.Equals(','))
            {
                e.MoveNext();
            }

            if (e.Current.Equals("GEOGCS") && e.ReadNext('['))
            {
                string name;
                Authority authority;
                IHorizontalDatum datum;
                IPrimeMeridian primeMeridian;
                IAngularUnit angularUnit;
                AxisInfoCollection axes;

                if (ReadName(e, out name) && HorizontalDatumCls.Read(e, out datum) && PrimeMeridianCls.Read(e, out primeMeridian) && AngularUnitCls.Read(e, out angularUnit))
                {
                    ReadAuthority(e, out authority);
                    AxisInfoCollection.Read(e, out axes);

                    if (authority == null)
                    {
                        ReadAuthority(e, out authority);
                    }

                    if (e.Current.Equals(']'))
                    {
                        e.MoveNext();
                        value = new GeographicCoordinateSystemCls(name, authority, datum, primeMeridian, axes ?? AxisInfoCollection.Default, angularUnit);
                        return true;
                    }
                }
            }

            value = null;
            return false;
        }

        public override string ToString()
        {
            var s = string.Concat(@"GEOGCS[""", Name, @""",", HorizontalDatum, ',', PrimeMeridian, ',', AngularUnit);

            if (!Axes.IsEquivalent(AxisInfo.Longitude, AxisInfo.Latitude))
            {
                foreach (AxisInfo i in Axes)
                {
                    s = string.Concat(s, ",{0}", i);
                }
            }

            if (!Authority.IsEmpty())
            {
                s = string.Concat(s, ',', Authority);
            }

            return string.Concat(s, "]");
        }
    }
}
