//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.CoordinateSystems
{
    internal class HorizontalCoordinateSystem : CoordinateSystem, IHorizontalCoordinateSystem
    {
        public HorizontalCoordinateSystem(string name, Authority authority, IHorizontalDatum datum, IAxisInfoCollection axes)
            : base(name, authority, axes)
        {
            HorizontalDatum = datum;
        }

        public virtual IHorizontalDatum HorizontalDatum
        {
            get;
            set;
        }

        public override IUnit GetUnit()
        {
            return HorizontalDatum.Ellipsoid.AxisUnit;
        }

        public override bool IsEquivalent(object obj)
        {
            throw new NotImplementedException();
        }

        protected override IMathTransform OnCreateTransform(ICoordinateSystem target)
        {
            throw new NotImplementedException();
        }

        public override string GetDefinition()
        {
            return string.Concat(
                    "Datum : ", HorizontalDatum.Name, Environment.NewLine,
                    "  Spheroid : ", HorizontalDatum.Ellipsoid.Name, Environment.NewLine,
                    "    Axis Unit : ", HorizontalDatum.Ellipsoid.AxisUnit.Name, Environment.NewLine,
                    "    Semimajor Axis : ", HorizontalDatum.Ellipsoid.SemiMajorAxis, Environment.NewLine,
                    "    Semiminor Axis : ", HorizontalDatum.Ellipsoid.SemiMinorAxis, Environment.NewLine,
                    "    Inverse Flattening : ", HorizontalDatum.Ellipsoid.InverseFlattening, Environment.NewLine, Environment.NewLine, HorizontalDatum.BursaWolfParameters.GetDefinition());
        }

        public override object Clone()
        {
            var c = (HorizontalCoordinateSystem)MemberwiseClone();
            c.HorizontalDatum = HorizontalDatum.Clone() as HorizontalDatumCls;
            c.Axes = Axes.Clone();
            return c;
        }
    }
}
