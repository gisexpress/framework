//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;

namespace System.CoordinateSystems
{
    internal class ProjectedCoordinateSystem : HorizontalCoordinateSystem, IProjectedCoordinateSystem
    {
        public ProjectedCoordinateSystem(string name, Authority authority, IHorizontalDatum datum, IGeographicCoordinateSystem geographicCoordinateSystem, IProjection projection, IAxisInfoCollection axisInfo, ILinearUnit linearUnit)
            : base(name, authority, datum, axisInfo)
        {
            GeographicCoordinateSystem = geographicCoordinateSystem;
            LinearUnit = linearUnit;
            Projection = projection;
        }

        public IGeographicCoordinateSystem GeographicCoordinateSystem
        {
            get;
            protected set;
        }

        public override IHorizontalDatum HorizontalDatum
        {
            get { return GeographicCoordinateSystem.HasValue() ? GeographicCoordinateSystem.HorizontalDatum : null; }
            set
            {
                if (GeographicCoordinateSystem.HasValue())
                {
                    GeographicCoordinateSystem.HorizontalDatum = value;
                }
            }
        }

        public IProjection Projection
        {
            get;
            protected set;
        }

        public ILinearUnit LinearUnit
        {
            get;
            protected set;
        }

        protected override IMathTransform OnCreateTransform(ICoordinateSystem target)
        {
            if (target is GeographicCoordinateSystemCls)
            {
                if (GeographicCoordinateSystem.IsEquivalent(target))
                {
                    IMathTransform transform = Projection.CreateTransform(Authority, target.Authority);
                    transform.Invert();
                    return transform;
                }

                return new ConcatenatedTransform(Authority, target.Authority, CreateTransform(GeographicCoordinateSystem), GeographicCoordinateSystem.CreateTransform(target));
            }

            throw new NotSupportedException();
        }

        public override bool IsEquivalent(object obj)
        {
            var o = obj as ProjectedCoordinateSystem;

            if (o == null)
            {
                return false;
            }

            if (!Axes.IsEquivalent(o.Axes))
            {
                return false;
            }

            if (!o.GeographicCoordinateSystem.IsEquivalent(GeographicCoordinateSystem))
            {
                return false;
            }

            if (o.HorizontalDatum.HasValue() && HorizontalDatum.HasValue())
            {
                if (!o.HorizontalDatum.IsEquivalent(HorizontalDatum))
                {
                    return false;
                }
            }
            else
            {
                if (o.HorizontalDatum == null && HorizontalDatum.HasValue()) return false;
                if (o.HorizontalDatum.HasValue() && HorizontalDatum == null) return false;
            }

            if (!o.LinearUnit.IsEquivalent(LinearUnit)) return false;
            if (!o.Projection.IsEquivalent(Projection)) return false;

            return true;
        }

        public override object Clone()
        {
            return new ProjectedCoordinateSystem(Name, Authority, HorizontalDatum, GeographicCoordinateSystem, Projection, Axes, LinearUnit);
        }

        public static bool Read(ITokenEnumerator e, out ProjectedCoordinateSystem value)
        {
            if (e.Current.Equals("PROJCS") && e.ReadNext('['))
            {
                string name;
                Authority authority;
                ILinearUnit linearUnit;
                IProjection projection;
                AxisInfoCollection axes;

                if (ReadName(e, out name) && e.Current.Equals(',') && e.ReadNext("GEOGCS"))
                {
                    IGeographicCoordinateSystem geographic;

                    if (GeographicCoordinateSystemCls.Read(e, out geographic) && LinearUnitCls.Read(e, out linearUnit) && ProjectionCls.Read(e, geographic.HorizontalDatum.Ellipsoid, linearUnit, out projection))
                    {
                        ReadAuthority(e, out authority);
                        AxisInfoCollection.Read(e, out axes);

                        if (authority == null)
                        {
                            ReadAuthority(e, out authority);
                        }

                        if (e.Current.Equals(']'))
                        {
                            value = new ProjectedCoordinateSystem(name, authority, geographic.HorizontalDatum, geographic, projection, axes ?? AxisInfoCollection.Default, linearUnit);
                            return true;
                        }
                    }
                }
            }

            value = null;
            return false;
        }

        public override string ToString()
        {
            var s = string.Concat(@"PROJCS[""", Name, @""",", GeographicCoordinateSystem, ',', LinearUnit, ',', Projection);

            if (!Axes.IsDefault)
            {
                foreach (IAxisInfo i in Axes)
                {
                    s = string.Concat(s, ',', i);
                }
            }

            if (!Authority.IsEmpty())
            {
                s = string.Concat(s, ',', Authority);
            }

            return string.Concat(s, "]");
        }
    }
}
