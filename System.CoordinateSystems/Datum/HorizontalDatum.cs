//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.CoordinateSystems.Epsg;
using System.IO;
using Ellipsoids = System.CoordinateSystems.EllipsoidCls;

namespace System.CoordinateSystems
{
    internal class HorizontalDatumCls : Datum, IHorizontalDatum
    {
        IBursaWolfParameterCollection _bursaWolfParameters;

        public HorizontalDatumCls(string name, Authority authority, IEllipsoid ellipsoid, IBursaWolfParameterCollection bursaWolfParameters)
            : base(name, authority)
        {
            Ellipsoid = ellipsoid;
            BursaWolfParameters = bursaWolfParameters;
        }

        public static HorizontalDatumCls WGS84
        {
            get { return new HorizontalDatumCls("World Geodetic System 1984", 6326, Ellipsoids.WGS84, BursaWolfParameterCollection.Empty); }
        }

        public static HorizontalDatumCls AuxiliarySphereWgs84
        {
            get { return new HorizontalDatumCls("Auxiliary Sphere WGS84", 0, Ellipsoids.AuxiliarySphereWgs84, BursaWolfParameterCollection.Empty); }
        }

        public static HorizontalDatumCls ED50
        {
            get { return new HorizontalDatumCls("European Datum 1950", 6230, Ellipsoids.International1924, new BursaWolfParameterCollection { Dx = -87, Dy = -98, Dz = -121 }); }
        }

        public IEllipsoid Ellipsoid
        {
            get;
            set;
        }

        public IBursaWolfParameterCollection BursaWolfParameters
        {
            get { return _bursaWolfParameters ?? (_bursaWolfParameters = DefaultBursaWolfParameters()); }
            set { _bursaWolfParameters = value; }
        }

        BursaWolfParameterCollection DefaultBursaWolfParameters()
        {
            foreach (BursaWolfParameterCollection item in GetBursaWolfParameters(Authority))
            {
                return item;
            }

            return BursaWolfParameterCollection.Empty;
        }

        public static BursaWolfParameterCollection GetBursaWolfParameters(int authorityCode, int variant)
        {
            BursaWolfParameter item = EpsgDatabase.Current.BursaWolfParameters[authorityCode, variant];

            if (item.HasValue())
            {
                return new BursaWolfParameterCollection
                {
                    Dx = item.Dx,
                    Dy = item.Dy,
                    Dz = item.Dz,
                    Ex = item.Ex,
                    Ey = item.Ey,
                    Ez = item.Ez,
                    Ppm = item.Ppm,
                    Variant = (byte)item.Variant,
                    EpsgAreaCode = item.AreaCode
                };
            }

            return BursaWolfParameterCollection.Empty;
        }

        public static IEnumerable<BursaWolfParameterCollection> GetBursaWolfParameters(int authorityCode)
        {
            if (authorityCode > 0)
            {
                foreach (BursaWolfParameter item in EpsgDatabase.Current.BursaWolfParameters[authorityCode])
                {
                    yield return new BursaWolfParameterCollection
                    {
                        Dx = item.Dx,
                        Dy = item.Dy,
                        Dz = item.Dz,
                        Ex = item.Ex,
                        Ey = item.Ey,
                        Ez = item.Ez,
                        Ppm = item.Ppm,
                        Variant = (byte)item.Variant,
                        EpsgAreaCode = item.AreaCode
                    };
                }
            }
        }

        public override bool IsEquivalent(object obj)
        {
            var other = obj as HorizontalDatumCls;

            if (other == null)
            {
                return false;
            }

            if (!GetType().Equals(other.GetType()))
            {
                return false;
            }

            if (!Ellipsoid.IsEquivalent(other.Ellipsoid))
            {
                return false;
            }

            if (!Authority.IsEmpty() && !other.Authority.IsEmpty())
            {
                return Authority.Equals(other.Authority);
            }

            if (!Authority.IsEmpty() && !other.BursaWolfParameters.IsEmpty())
            {
                if (!other.BursaWolfParameters.Equals(GetBursaWolfParameters(Authority)))
                {
                    return false;
                }
            }
            else if (!other.Authority.IsEmpty() && !BursaWolfParameters.IsEmpty())
            {
                if (!BursaWolfParameters.Equals(GetBursaWolfParameters(other.Authority)))
                {
                    return false;
                }
            }

            return true;
        }

        public override object Clone()
        {
            return new HorizontalDatumCls(Name, Authority, (IEllipsoid)Ellipsoid.Clone(), (IBursaWolfParameterCollection)BursaWolfParameters.Clone());
        }

        public static bool Read(ITokenEnumerator e, out IHorizontalDatum datum)
        {
            if (e.Current.Equals(','))
            {
                e.MoveNext();
            }

            if (e.Current.Equals("DATUM") && e.ReadNext('['))
            {
                string name;
                Authority authority = null;
                EllipsoidCls ellipsoid;
                BursaWolfParameterCollection bursaWolfParameters = null;

                if (ReadName(e, out name) && e.Current.Equals(',') && e.MoveNext())
                {
                    if (EllipsoidCls.Read(e, out ellipsoid))
                    {
                        if (e.Current.Equals(',') && e.MoveNext())
                        {
                            BursaWolfParameterCollection.Read(e, out bursaWolfParameters);

                            if (e.Current.Equals(','))
                            {
                                e.MoveNext();
                            }

                            ReadAuthority(e, out authority);
                        }

                        if (e.Current.Equals(']'))
                        {
                            e.MoveNext();
                            datum = new HorizontalDatumCls(name, authority, ellipsoid, bursaWolfParameters);
                            return true;
                        }
                    }
                }
            }

            datum = null;
            return false;
        }

        public override string ToString()
        {
            var s = string.Concat(@"DATUM[""", Name, @""",", Ellipsoid);

            if (!BursaWolfParameters.IsEmpty())
            {
                s = string.Concat(s, ',', BursaWolfParameters);
            }

            if (!Authority.IsEmpty())
            {
                s = string.Concat(s, ',', Authority);
            }

            return string.Concat(s, "]");
        }
    }
}
