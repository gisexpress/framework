//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;
using System.Xml;

namespace System.CoordinateSystems
{
    internal class EllipsoidCls : Info, IEllipsoid
    {
        public EllipsoidCls(string name, Authority authority, double semiMajorAxis, double semiMinorAxis, double inverseFlattening, bool isIvfDefinitive, ILinearUnit axisUnit)
            : base(name, authority)
        {
            SemiMajorAxis = semiMajorAxis;
            InverseFlattening = inverseFlattening;
            AxisUnit = axisUnit;
            IsIvfDefinitive = isIvfDefinitive;

            if (isIvfDefinitive && (Equals(inverseFlattening, 0.0) || double.IsInfinity(inverseFlattening)))
            {
                SemiMinorAxis = semiMajorAxis;
            }
            else if (isIvfDefinitive)
            {
                SemiMinorAxis = (1.0 - (1.0 / inverseFlattening)) * semiMajorAxis;
            }
            else
            {
                SemiMinorAxis = semiMinorAxis;
                InverseFlattening = !Equals(semiMajorAxis, 0.0) ? 1.0 / (1.0 - (semiMinorAxis / semiMajorAxis)) : 0.0;
            }
        }

        public static EllipsoidCls WGS84
        {
            get { return new EllipsoidCls("WGS 84", 7030, 6378137, 0, 298.257223563, true, LinearUnitCls.Metre); }
        }

        public static EllipsoidCls AuxiliarySphereWgs84
        {
            get { return new EllipsoidCls("WGS 1984 Major Auxiliary Sphere", 0, 6378137, 0.0, 0.0, true, LinearUnitCls.Metre); }
        }

        public static EllipsoidCls International1924
        {
            get { return new EllipsoidCls("International 1924", 7022, 6378388, 0, 297, true, LinearUnitCls.Metre); }
        }

        public double SemiMajorAxis
        {
            get;
            protected set;
        }

        public double SemiMinorAxis
        {
            get;
            protected set;
        }

        public double InverseFlattening
        {
            get;
            protected set;
        }

        public ILinearUnit AxisUnit
        {
            get;
            set;
        }

        public bool IsIvfDefinitive
        {
            get;
            set;
        }

        public override bool IsEquivalent(object obj)
        {
            var o = obj as EllipsoidCls;

            if (Equals(o, null))
            {
                return false;
            }

            if ((SemiMajorAxis - o.SemiMajorAxis).Abs() > 1e-4)
            {
                return false;
            }

            if ((SemiMinorAxis - o.SemiMinorAxis).Abs() > 1e-4)
            {
                return false;
            }

            if (!AxisUnit.IsEquivalent(o.AxisUnit))
            {
                return false;
            }

            return true;
        }

        public static bool Read(ITokenEnumerator e, out EllipsoidCls value)
        {
            if (e.Current.Equals("SPHEROID") && e.ReadNext('['))
            {
                if (ReadName(e, out string name) && e.Current.Equals(',') && e.ReadNumber(out NumberToken semiMajorAxis) && e.ReadNext(',') && e.ReadNumber(out NumberToken inverseFlattening))
                {
                    if (e.MoveNext())
                    {
                        Authority authority = null;
                        if (e.Current.Equals(',') && e.MoveNext())
                        {
                            ReadAuthority(e, out authority);
                        }

                        if (e.Current.Equals(']'))
                        {
                            e.MoveNext();
                            value = new EllipsoidCls(name, authority, Convert.ToDouble(semiMajorAxis.Value), 0, Convert.ToDouble(inverseFlattening.Value), true, LinearUnitCls.Metre);
                            return true;
                        }
                    }
                }
            }

            value = null;
            return false;
        }

        public override string ToString()
        {
            var s = string.Concat(@"SPHEROID[""", Name, @""",", SemiMajorAxis.ToText(), ',', InverseFlattening.ToText());

            if (!Authority.IsEmpty())
            {
                s = string.Concat(s, ',', Authority);
            }

            return string.Concat(s, "]");
        }
    }
}
