//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.IO;
using System.Text;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgDatabase
    {
        static EpsgDatabase()
        {
            using (var stream = new MemoryStream(EpsgResources.EPSG_v8_9))
            {
                Current = EpsgSerializer.DeSerialize(stream);
            }
        }

        public readonly static EpsgDatabase Current;

        protected EpsgTableCollection TableCollection;
        protected internal const double Epsilon = 1e-8d;

        public EpsgTableCollection Tables
        {
            get { return TableCollection ?? (TableCollection = InitializeTables(new EpsgTableCollection())); }
        }

        public BursaWolfParameterCollection BursaWolfParameters
        {
            get;
            private set;
        }

        EpsgTableCollection InitializeTables(EpsgTableCollection collection)
        {
            collection.Clear();
            collection.Add(new EpsgAliasTable());
            collection.Add(new EpsgAreaTable());
            collection.Add(new EpsgCoordinateAxisTable());
            collection.Add(new EpsgCoordinateAxisNameTable());
            collection.Add(new EpsgCoordinateOperationTable());
            collection.Add(new EpsgCoordinateOperationTable.MethodTable());
            collection.Add(new EpsgCoordinateOperationTable.ParameterTable());
            collection.Add(new EpsgCoordinateOperationTable.ParameterUsageTable());
            collection.Add(new EpsgCoordinateOperationTable.ParameterValueTable());
            collection.Add(new EpsgCoordinateReferenceSystemTable());
            collection.Add(new EpsgDatumTable());
            collection.Add(new EpsgEllipsoidTable());
            collection.Add(new EpsgPrimeMeridianTable());
            collection.Add(new EpsgUnitOfMeasureTable());

            BursaWolfParameters = new BursaWolfParameterCollection();

            return collection;
        }

        public void Load(ISupportEpsgDataSource dataSource)
        {
            foreach (IEpsgTable table in Tables)
            {
                table.Load(dataSource.CreateReader(table.GetName()));
            }
        }

        public void Load(string fileName)
        {
            using (Stream s = File.OpenRead(fileName))
            {
                Load(s);
            }
        }

        public void Load(Stream s)
        {
            using (var reader = new BinaryReader(s, Encoding.UTF8))
            {
                int numTables = reader.ReadInt32();

                for (int n = 0; n < numTables; n++)
                {
                    string name = reader.ReadString();

                    Tables[name].Read(reader);
                }

                if (reader.ReadByte() == 0x88)
                {
                    BursaWolfParameters.Read(reader);
                }
                else
                {
                    throw new InvalidDataException();
                }
            }
        }

        public void Save(string fileName)
        {
            using (Stream s = File.Create(fileName))
            {
                Save(s);
            }
        }

        public void Save(Stream s)
        {
            throw new NotImplementedException();
            //using (var writer = BinaryWriterExtensions.Create())
            //{
            //    writer.Write(Tables.Count);

            //    foreach (IEpsgTable table in Tables)
            //    {
            //        writer.Write(table.GetName());
            //        table.Write(writer);
            //    }

            //    writer.Write((byte)0x88);

            //    BursaWolfParameters.Load();
            //    BursaWolfParameters.Write(writer);

            //    s.Write(writer.ToByteArray());
            //}
        }
    }
}
