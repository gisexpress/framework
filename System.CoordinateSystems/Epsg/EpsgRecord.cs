//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace System.CoordinateSystems.Epsg
{
    internal abstract class EpsgRecord : Hashtable
    {
        protected EpsgRecord()
        {
            Deprecated = false;
        }

        public abstract object GetKey();

        public virtual bool IsValid()
        {
            return !Deprecated;
        }

        /// <summary>
        /// "Yes" = data is deprecated; "No" =  data is current and valid, default is No.
        /// </summary>
        public bool Deprecated
        {
            get;
            set;
        }

        public static object GetKey(params object[] args)
        {
            if (args.Length > 1)
            {
                string key = string.Empty;

                for (int n = 0; n < args.Length; n++)
                {
                    key = string.Concat(key, "_", args[n]);
                }

                return key.TrimStart('_');
            }

            return args[0];
        }

        public virtual void Read(IDataReader reader)
        {
            // Remarks = Remarks ?? reader.Get<string>("REMARKS");
            // InformationSource = reader.Get<string>("INFORMATION_SOURCE");
            // DataSource = reader.Get<string>("DATA_SOURCE");
            // RevisionDate = reader.Get<DateTime>("REVISION_DATE");
            // Deprecated = reader.Get<bool>("DEPRECATED");
        }

        public void Read(BinaryReader reader)
        {
            foreach (KeyValuePair<string, TypeCode> item in GetProperties())
            {
                base[item.Key] = reader.ReadValue(item.Value);
            }
        }

        public void Write(BinaryWriter writer)
        {
            //foreach (KeyValuePair<string, TypeCode> item in GetProperties())
            //{
            //    writer.WriteValue(base[item.Key], item.Value);
            //}
        }

        public virtual IDictionary<string, TypeCode> GetProperties()
        {
            var properties = new SortedList<string, TypeCode>();

            properties.Add("Deprecated", TypeCode.Boolean);

            return properties;
        }
    }
}
