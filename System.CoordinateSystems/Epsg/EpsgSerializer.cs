//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Data;
using System.IO;

namespace System.CoordinateSystems.Epsg
{
    public class EpsgSerializer
    {
        //DataProvider dataProvider;

        //if (DataProviders.Find("Access", out dataProvider))
        //{
        //    string fileName = @"C:\Users\cem.ozkan\Downloads\EPSG_v8_9.mdb";

        //    DataConnection connection = dataProvider.CreateConnection();
        //    connection[Constants.DataSource] = fileName;

        //    using (var stream = File.Create(Path.ChangeExtension(fileName, "gz")))
        //    {
        //        EpsgSerializer.Serialize(stream, (name) => connection.InformationSchema.Tables[name].Command.ExecuteReader());
        //    }
        //}

        public static void Serialize(Stream stream, Func<string, IDataReader> readerByName)
        {
            var database = new EpsgDatabase();

            foreach (IEpsgTable table in database.Tables)
            {
                table.Load(readerByName(table.GetName()));
            }

            using (var zipStream = stream.ToGZipStream(true))
            {
                database.Save(zipStream);
            }
        }

        internal static EpsgDatabase DeSerialize(Stream stream)
        {
            var db = new EpsgDatabase();
            db.Load(stream.Open());
            return db;
        }
    }
}
