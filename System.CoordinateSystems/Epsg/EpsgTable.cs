//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Data;
using System.IO;
using System.Text;

namespace System.CoordinateSystems.Epsg
{
    internal abstract class EpsgTable<TTable, TRecord> : IEpsgTable
        where TTable : IEpsgTable
        where TRecord : EpsgRecord
    {
        protected EpsgTable()
        {
        }

        protected EpsgRecordCollection<TRecord> Items;

        public abstract string GetName();

        public static TTable Current
        {
            get { return EpsgDatabase.Current.Tables.Find<TTable>(); }
        }

        public EpsgRecordCollection<TRecord> Rows
        {
            get { return Items ?? (Items = new EpsgRecordCollection<TRecord>()); }
        }

        public TRecord Find(int code)
        {
            return Rows.Find(code);
        }

        public bool EqualsExact(double a, double b)
        {
            return Math.Abs(a - b) <= EpsgDatabase.Epsilon;
        }

        public void Load(IDataReader reader)
        {
            using (reader)
            {
                while (reader.Read())
                {
                    TRecord r = Activator.CreateInstance<TRecord>();
                    r.Read(reader);

                    if (r.IsValid())
                    {
                        Rows.Add(r);
                    }
                }
            }
        }

        public void Load(string fileName)
        {
            using (Stream s = File.OpenRead(fileName))
            {
                using (BinaryReader reader = new BinaryReader(s, Encoding.UTF8))
                {
                    // Number of records
                    int numRecords = reader.ReadInt32();

                    for (int n = 0; n < numRecords; n++)
                    {
                        TRecord record = Activator.CreateInstance<TRecord>();
                        record.Read(reader);
                        Rows.Add(record);
                    }
                }
            }
        }

        public void Save(string fileName)
        {
            throw new NotImplementedException();
            //using (var writer = BinaryWriterExtensions.CreateFile(fileName))
            //{
            //    Write(writer);
            //}
        }

        public void Read(BinaryReader reader)
        {
            // Number of records
            int numRecords = reader.ReadInt32();

            for (int n = 0; n < numRecords; n++)
            {
                TRecord r = Activator.CreateInstance<TRecord>();
                r.Read(reader);
                Rows.Add(r);
            }
        }

        public void Write(BinaryWriter writer)
        {
            // Number of records
            writer.Write(Rows.Count);

            foreach (TRecord record in Rows)
            {
                record.Write(writer);
            }
        }
    }
}
