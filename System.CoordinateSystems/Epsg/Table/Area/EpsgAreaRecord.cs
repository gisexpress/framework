//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgAreaRecord : EpsgRecord
    {
        public override object GetKey()
        {
            return base["Code"];
        }

        /// <summary>
        /// Name of the area of use.
        /// </summary>
        public string GetName()
        {
            return (base["Name"] as string).ToTitleCase();
        }

        /// <summary>
        /// Description of the area of use.
        /// </summary>
        public string GetAreaOfUse()
        {
            return (string)base["AreaOfUse"];
        }

        /// <summary>
        /// The southern latitude of a bounding arc-rectangle, in decimal degrees positive north referenced to WGS 84. 
        /// Value is greather than -90 and less than 90.
        /// Should be less than northern latitude.
        /// </summary>
        public double GetSouthLatitude()
        {
            return (double)base["SouthLatitude"];
        }

        /// <summary>
        /// The northern latitude of a bounding arc-rectangle, in decimal degrees positive north referenced to WGS 84.
        /// Value is greather than -90 and less than 90. 
        /// Should be greater than southern latitude.
        /// </summary>
        public double GetNorthLatitude()
        {
            return (double)base["NorthLatitude"];
        }

        /// <summary>
        /// Longitude (WGS 84) of the left side of a bounding arc-rectangle in decimal degrees positive east of Greenwich. 
        /// Value is greather than -180 and less than 180.
        /// Generally should be less than the right longitude but for areas crossing the 180 degree meridian the left value will be greater.
        /// </summary>
        public double GetWestLongitude()
        {
            return (double)base["WestLongitude"];
        }

        /// <summary>
        /// The longitude (WGS 84) of the right side of a bounding arc-rectangle in decimal degrees positive east of Greenwich. 
        /// Value is greather than -180 and less than 180.
        /// Generally should be greater than the left longitude but for areas crossing the 180 degree meridian the value will be less.
        /// </summary>
        public double GetEastLongitude()
        {
            return (double)base["EastLongitude"];
        }

        /// <summary>
        /// ISO 3166 2-digit alpha country code
        /// </summary>
        public string GetISOA2()
        {
            return (string)base["ISOA2"];
        }


        /// <summary>
        /// ISO 3166 3-digit alpha country code
        /// </summary>
        public string GetISOA3()
        {
            return (string)base["ISOA3"];
        }

        /// <summary>
        /// ISO 3166 3-digit numeric country code
        /// </summary>
        public int GetISONumericCode()
        {
            return (int)base["ISONumericCode"];
        }

        public override void Read(IDataReader reader)
        {
            base["Code"] = reader.Get<int>("AREA_CODE");
            base["Name"] = reader.Get<string>("AREA_NAME");
            base["AreaOfUse"] = reader.Get<string>("AREA_OF_USE");
            base["SouthLatitude"] = reader.Get<double>("AREA_SOUTH_BOUND_LAT");
            base["NorthLatitude"] = reader.Get<double>("AREA_NORTH_BOUND_LAT");
            base["WestLongitude"] = reader.Get<double>("AREA_WEST_BOUND_LON");
            base["EastLongitude"] = reader.Get<double>("AREA_EAST_BOUND_LON");
            base["ISOA2"] = reader.Get<string>("ISO_A2_CODE");
            base["ISOA3"] = reader.Get<string>("ISO_A3_CODE");
            base["ISONumericCode"] = reader.Get<int>("ISO_N_CODE");
            base.Read(reader);
        }

        public override string ToString()
        {
            return GetName();
        }

        public override IDictionary<string, TypeCode> GetProperties()
        {
            var properties = base.GetProperties();

            properties.Add("Code", TypeCode.Int32);
            properties.Add("Name", TypeCode.String);
            properties.Add("AreaOfUse", TypeCode.String);
            properties.Add("SouthLatitude", TypeCode.Double);
            properties.Add("NorthLatitude", TypeCode.Double);
            properties.Add("WestLongitude", TypeCode.Double);
            properties.Add("EastLongitude", TypeCode.Double);
            properties.Add("ISOA2", TypeCode.String);
            properties.Add("ISOA3", TypeCode.String);
            properties.Add("ISONumericCode", TypeCode.Int32);

            return properties;
        }
    }
}
