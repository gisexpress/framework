//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgCoordinateAxisRecord : EpsgRecord
    {
        public override object GetKey()
        {
            return GetKey(GetCoordSysCode(), GetCoordAxisNameCode());
        }

        /// <summary>
        /// Unique code for records in Coordinate Axis table. 
        /// Not required for EPSG relational implementation, but provided to assist other implementations.
        /// </summary>
        public int Code
        {
            get;
            set;
        }

        public string Name
        {
            get
            {
                var record = EpsgCoordinateAxisNameTable.Current.Find(GetCoordAxisNameCode());

                if (record.HasValue())
                {
                    return record.GetName();
                }

                return string.Empty;
            }
        }

        /// <summary>
        /// Foreign key to the Coordinate System this axis is used in. 
        /// A coordinate system uses a unique set of coordinate axes.
        /// </summary>
        public int GetCoordSysCode()
        {
            return (int)base["CoordSysCode"];
        }

        /// <summary>
        /// Foreign key to Coordinate Axis Name table; part of dual primary key.
        /// </summary>
        public int GetCoordAxisNameCode()
        {
            return (int)base["CoordAxisNameCode"];
        }

        /// <summary>
        /// The direction of the POSITIVE increments of the of the coordinate axis: north, east, south, west, up, down 
        /// or the APPROXIMATE orientation in case of an oblique orientation: ~NE, ~SE, ~SW, ~NW.
        /// </summary>
        public string GetAxisOrientation()
        {
            return (string)base["AxisOrientation"];
        }

        /// <summary>
        /// Abbreviation for the coordinate axis.
        /// </summary>
        public string GetAbbreviation()
        {
            return (string)base["Abbreviation"];
        }

        /// <summary>
        /// ID of the unit measure of the coordinate axis.
        /// </summary>
        public int GetUoMCode()
        {
            return (int)base["UoMCode"];
        }

        /// <summary>
        /// The position of this axis within a Coordinate System: 1, 2 or 3.
        /// </summary>
        public short GetAxisOrder()
        {
            return (short)base["AxisOrder"];
        }

        public override void Read(IDataReader reader)
        {
            base["Code"] = reader.Get<int>("COORD_AXIS_CODE");
            base["CoordSysCode"] = reader.Get<int>("COORD_SYS_CODE");
            base["CoordAxisNameCode"] = reader.Get<int>("COORD_AXIS_NAME_CODE");
            base["AxisOrientation"] = reader.Get<string>("COORD_AXIS_ORIENTATION");
            base["Abbreviation"] = reader.Get<string>("COORD_AXIS_ABBREVIATION");
            base["UoMCode"] = reader.Get<int>("UOM_CODE");
            base["AxisOrder"] = reader.Get<short>("ORDER");
        }

        public override IDictionary<string, TypeCode> GetProperties()
        {
            var properties = base.GetProperties();

            properties.Add("Code", TypeCode.Int32);
            properties.Add("CoordSysCode", TypeCode.Int32);
            properties.Add("CoordAxisNameCode", TypeCode.Int32);
            properties.Add("AxisOrientation", TypeCode.String);
            properties.Add("Abbreviation", TypeCode.String);
            properties.Add("UoMCode", TypeCode.Int32);
            properties.Add("AxisOrder", TypeCode.Int16);

            return properties;
        }
    }
}
