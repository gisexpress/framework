//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    partial class EpsgCoordinateOperationTable
    {
        public class MethodRecord : EpsgRecord
        {
            public override object GetKey()
            {
                return GetCode();
            }

            /// <summary>
            /// Unique code (integer) of the coordinate transformation; primary key
            /// </summary>
            public int GetCode()
            {
                return (int)base["Code"];
            }

            /// <summary>
            /// Name of the coordinate transformation.
            /// </summary>
            public string GetMethodName()
            {
                return (string)base["MethodName"];
            }

            /// <summary>
            /// Indication of the validity of the transformation parameters for the reverse operation; 
            /// if "No", search for an explicit definition of the reverse transformation.
            /// </summary>
            public bool GetReverseOp()
            {
                return (bool)base["ReverseOp"];
            }

            /// <summary>
            /// The formulas associated with this method or algorithm.  Limited to 4000 characters.
            /// </summary>
            public string GetFormula()
            {
                return (string)base["Formula"];
            }

            /// <summary>
            /// Worked example of this transformation method. Limited to 4000 characters.
            /// </summary>
            public string GetExample()
            {
                return (string)base["Example"];
            }

            public override void Read(IDataReader reader)
            {
                base["Code"] = reader.Get<int>("COORD_OP_METHOD_CODE");
                base["MethodName"] = reader.Get<string>("COORD_OP_METHOD_NAME");
                base["ReverseOp"] = reader.Get<bool>("REVERSE_OP");
                base["Formula"] = reader.Get<string>("FORMULA");
                base["Example"] = reader.Get<string>("EXAMPLE");
                base.Read(reader);
            }

            public override IDictionary<string, TypeCode> GetProperties()
            {
                var properties = base.GetProperties();

                properties.Add("Code", TypeCode.Int32);
                properties.Add("MethodName", TypeCode.String);
                properties.Add("ReverseOp", TypeCode.Boolean);
                properties.Add("Formula", TypeCode.String);
                properties.Add("Example", TypeCode.String);

                return properties;
            }
        }
    }
}