//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace System.CoordinateSystems.Epsg
{
    partial class EpsgCoordinateOperationTable
    {
        public class ParameterTable : EpsgTable<ParameterTable, ParameterRecord>
        {
            public const string TableName = "Coordinate_Operation Parameter";

            public override string GetName()
            {
                return TableName;
            }

            public static IList<EpsgOperationParameter> FindParameters(int operationCode)
            {
                var parameters = new List<EpsgOperationParameter>();

                foreach (ParameterValueRecord value in ParameterValueTable.Current.FindByOperation(operationCode))
                {
                    if (value.IsValid())
                    {
                        var pr = Current.Find(value.GetParameterCode());

                        if (pr.HasValue())
                        {
                            var ur = ParameterUsageTable.Current.Find(value.GetMethodCode(), value.GetParameterCode());

                            if (ur.HasValue())
                            {
                                var parameter = new EpsgOperationParameter
                                {
                                    Name = pr.GetName(),
                                    Value = value.GetParameterValue(),
                                    Unit = (EpsgUnit)value.GetUnitOfMeasureCode(),
                                    Reversal = string.Equals(ur.GetParamSignReversal(), "yes", StringComparison.OrdinalIgnoreCase)
                                };

                                parameters.Add(parameter);
                            }
                        }
                    }
                }

                return parameters;
            }
        }
    }

    public class EpsgOperationParameter
    {
        public string Name
        {
            get;
            set;
        }

        public EpsgUnit Unit
        {
            get;
            set;
        }

        public double Value
        {
            get;
            set;
        }

        public bool Reversal
        {
            get;
            set;
        }

        public double GetValue(EpsgUnit targetUnit)
        {
            if (Unit == targetUnit)
            {
                return Value;
            }

            var uom = EpsgUnitOfMeasureTable.Current.Find((int)Unit);

            if (uom.HasValue())
            {
                if (!uom.FactorIsNull() && uom.GetTargetUnit() == EpsgUnit.Radian)
                {
                    double r = Value * (uom.GetFactorB() / uom.GetFactorC());

                    switch (targetUnit)
                    {
                        case EpsgUnit.ArcSeconds:
                            return r * (648000.0 / Math.PI);
                    }
                }
            }

            return Value;
        }
    }
}