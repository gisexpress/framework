//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    partial class EpsgCoordinateOperationTable
    {
        public class ParameterValueRecord : EpsgRecord
        {
            public override object GetKey()
            {
                return GetKey(GetCoordOpCode(), GetMethodCode(), GetParameterCode());
            }

            /// <summary>
            /// Code (integer) of the coordinate operation, part of concatenated (triple) primary key.
            /// </summary>
            public int GetCoordOpCode()
            {
                return (int)base["CoordOpCode"];
            }

            /// <summary>
            /// Unique code (integer) of the coordinate operation; part of concatenated (triple) primary key.
            /// </summary>
            public int GetMethodCode()
            {
                return (int)base["MethodCode"];
            }

            /// <summary>
            /// Code (integer) of the reference coordinate operation parameter; part of concatenated (triple) primary key.
            /// </summary>
            public int GetParameterCode()
            {
                return (int)base["ParameterCode"];
            }

            /// <summary>
            /// Numeric value of the transformation parameter.
            /// </summary>
            public double GetParameterValue()
            {
                return (double)base["ParameterValue"];
            }

            /// <summary>
            /// Foreign key to the name of the unit for the transformation parameter value.
            /// </summary>
            public int GetUnitOfMeasureCode()
            {
                return (int)base["UnitOfMeasureCode"];
            }

            public override bool IsValid()
            {
                return base.IsValid() && GetUnitOfMeasureCode() > 0;
            }

            public override void Read(IDataReader reader)
            {
                base["CoordOpCode"] = reader.Get<int>("COORD_OP_CODE");
                base["MethodCode"] = reader.Get<int>("COORD_OP_METHOD_CODE");
                base["ParameterCode"] = reader.Get<int>("PARAMETER_CODE");
                base["ParameterValue"] = reader.Get<double>("PARAMETER_VALUE");
                base["UnitOfMeasureCode"] = reader.Get<int>("UOM_CODE");
            }

            public override IDictionary<string, TypeCode> GetProperties()
            {
                var properties = base.GetProperties();

                properties.Add("CoordOpCode", TypeCode.Int32);
                properties.Add("MethodCode", TypeCode.Int32);
                properties.Add("ParameterCode", TypeCode.Int32);
                properties.Add("ParameterValue", TypeCode.Double);
                properties.Add("UnitOfMeasureCode", TypeCode.Int32);

                return properties;
            }
        }
    }
}