//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgCoordinateReferenceSystemRecord : EpsgRecord
    {
        public override object GetKey()
        {
            return GetCode();
        }

        public EpsgCoordinateReferenceSystemType Type
        {
            get
            {
                switch (GetTypeName().ToLowerInvariant())
                {
                    case "compound": return EpsgCoordinateReferenceSystemType.Compound;
                    case "engineering": return EpsgCoordinateReferenceSystemType.Engineering;
                    case "geocentric": return EpsgCoordinateReferenceSystemType.Geocentric;
                    case "geographic 2d": return EpsgCoordinateReferenceSystemType.Geographic2D;
                    case "geographic 3d": return EpsgCoordinateReferenceSystemType.Geographic3D;
                    case "projected": return EpsgCoordinateReferenceSystemType.Projected;
                    case "vertical": return EpsgCoordinateReferenceSystemType.Vertical;
                    default: throw new NotSupportedException();
                }
            }
        }

        public override bool IsValid()
        {
            switch (Type)
            {
                case EpsgCoordinateReferenceSystemType.Engineering:
                case EpsgCoordinateReferenceSystemType.Geographic3D:
                    return false;
            }

            return base.IsValid() && GetShowCRS();
        }

        /// <summary>
        /// Unique code (integer) of the Coordinate Reference System (CRS); primary key.
        /// </summary>
        public int GetCode()
        {
            return (int)base["Code"];
        }

        /// <summary>
        /// Name of the CRS.
        /// </summary>
        public string GetName()
        {
            return (string)base["Name"];
        }

        public string GetAlias()
        {
            return EpsgAliasTable.Current.FindCRSAlias(GetCode()) ?? GetName();
        }

        /// <summary>
        /// The type of CRS: compound, engineering, geocentric, geographic 2D, geographic 3D, projected, vertical.
        /// </summary>
        public string GetTypeName()
        {
            return (string)base["TypeName"];
        }

        /// <summary>
        /// The code of the Area of Use this CRS uses.
        /// </summary>
        public int GetAreaCode()
        {
            return (int)base["AreaCode"];
        }

        /// <summary>
        /// The code of the Coordinate System (=set of re-usable axes) this CRS uses.
        /// </summary>
        public int GetCoordSysCode()
        {
            return (int)base["CoordSysCode"];
        }

        /// <summary>
        /// The code of the datum on which this CRS is based. Not used for projected or compound CRSs.
        /// </summary>
        public int GetDatumCode()
        {
            return (int)base["DatumCode"];
        }

        public int GetFinalDatumCode()
        {
            if (GetDatumCode() > 0)
            {
                return GetDatumCode();
            }

            EpsgCoordinateReferenceSystemRecord r = this;

            while (r.HasValue() && r.GetBaseCRSCode() > 0)
            {
                r = EpsgCoordinateReferenceSystemTable.Current.Find(r.GetBaseCRSCode());

                if (r.HasValue() && r.GetDatumCode() > 0)
                {
                    return r.GetDatumCode();
                }
            }

            return 0;
        }

        /// <summary>
        /// For derived CRSs only, the code for the associated base geog CRS.
        /// </summary>
        public int GetBaseCRSCode()
        {
            return (int)base["BaseCRSCode"];
        }

        /// <summary>
        /// For projected CRSs only, the code of the map projection that is used to convert the Projected CRS from and to the source geographic CRS.
        /// </summary>
        public int GetProjnConvCode()
        {
            return (int)base["ProjnConvCode"];
        }

        /// <summary>
        /// For compound CRSs only, the code of the horizontal component of the Compound CRS.
        /// </summary>
        public int GetCmpdHorCRSCode()
        {
            return (int)base["CmpdHorCRSCode"];
        }

        /// <summary>
        /// For compound CRSs only, the code of the vertical component of the Compound CRS.
        /// </summary>
        public int GetCmpdVertCRSCode()
        {
            return (int)base["CmpdVertCRSCode"];
        }

        /// <summary>
        /// The applicability of the CRS.
        /// </summary>
        public string GetCRSScope()
        {
            return (string)base["CRSScope"];
        }

        /// <summary>
        /// Switch to indicate whether operation data can be made public.  "Yes" or "No". Default is Yes.
        /// </summary>
        public bool GetShowCRS()
        {
            return (bool)base["ShowCRS"];
        }

        public override void Read(IDataReader reader)
        {
            base["Code"] = reader.Get<int>("COORD_REF_SYS_CODE");
            base["Name"] = reader.Get<string>("COORD_REF_SYS_NAME");
            base["TypeName"] = reader.Get<string>("COORD_REF_SYS_KIND");
            base["AreaCode"] = reader.Get<int>("AREA_OF_USE_CODE");
            base["CoordSysCode"] = reader.Get<int>("COORD_SYS_CODE");
            base["DatumCode"] = reader.Get<int>("DATUM_CODE");
            base["BaseCRSCode"] = reader.Get<int>("SOURCE_GEOGCRS_CODE");
            base["ProjnConvCode"] = reader.Get<int>("PROJECTION_CONV_CODE");
            base["CmpdHorCRSCode"] = reader.Get<int>("CMPD_HORIZCRS_CODE");
            base["CmpdVertCRSCode"] = reader.Get<int>("CMPD_VERTCRS_CODE");
            base["CRSScope"] = reader.Get<string>("CRS_SCOPE");
            base["ShowCRS"] = reader.Get<bool>("SHOW_CRS");
            base.Read(reader);
        }

        public override IDictionary<string, TypeCode> GetProperties()
        {
            var properties = base.GetProperties();

            properties.Add("Code", TypeCode.Int32);
            properties.Add("Name", TypeCode.String);
            properties.Add("TypeName", TypeCode.String);
            properties.Add("AreaCode", TypeCode.Int32);
            properties.Add("CoordSysCode", TypeCode.Int32);
            properties.Add("DatumCode", TypeCode.Int32);
            properties.Add("BaseCRSCode", TypeCode.Int32);
            properties.Add("ProjnConvCode", TypeCode.Int32);
            properties.Add("CmpdHorCRSCode", TypeCode.Int32);
            properties.Add("CmpdVertCRSCode", TypeCode.Int32);
            properties.Add("CRSScope", TypeCode.String);
            properties.Add("ShowCRS", TypeCode.Boolean);

            return properties;
        }
    }

    public enum EpsgCoordinateReferenceSystemType : int
    {
        Compound,
        Engineering,
        Geocentric,
        Geographic2D,
        Geographic3D,
        Projected,
        Vertical,
        Horizontal
    }
}
