//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgDatumRecord : EpsgRecord
    {
        public override object GetKey()
        {
            return GetCode();
        }

        /// <summary>
        /// Unique code (integer) of the geodetic datum; primary key.
        /// </summary>
        public int GetCode()
        {
            return (int)base["Code"];
        }

        /// <summary>
        /// Unique name of the geodetic datum.
        /// </summary>
        public string GetName()
        {
            return (string)base["Name"];
        }

        public string Alias
        {
            get { return EpsgAliasTable.Current.FindDatumAlias(GetCode()) ?? GetName(); }
        }

        public EpsgDatumType Type
        {
            get
            {
                switch (GetTypeName().ToLowerInvariant())
                {
                    case "geodetic": return EpsgDatumType.Geodetic;
                    case "vertical": return EpsgDatumType.Vertical;
                    case "engineering": return EpsgDatumType.Engineering;
                    default: return EpsgDatumType.Unknown;
                }
            }
        }

        public override bool IsValid()
        {
            if (GetName().StartsWith("Not specified"))
            {
                return false;
            }

            switch (Type)
            {
                case EpsgDatumType.Unknown:
                case EpsgDatumType.Engineering:
                    return false;
            }

            return base.IsValid();
        }

        /// <summary>
        /// The type of datum: geodetic, vertical, engineering.
        /// </summary>
        public string GetTypeName()
        {
            return (string)base["TypeName"];
        }

        /// <summary>
        /// A description of the anchor point, origin or datum definition. In ISO19111 called "datum anchor point".
        /// </summary>
        public string GetOriginDescription()
        {
            return (string)base["OriginDescription"];
        }

        /// <summary>
        /// The year in which the datum was realized.
        /// </summary>
        public string GetDatumEpoch()
        {
            return (string)base["DatumEpoch"];
        }

        /// <summary>
        /// Ellipsoid used in the definition of a datum where DATUM_TYPE="geodetic"
        /// </summary>
        public int GetEllipsoidCode()
        {
            return (int)base["EllipsoidCode"];
        }

        /// <summary>
        /// Prime Meridian used in the definition of a datum where DATUM_TYPE="geodetic"
        /// </summary>
        public int GetPrimeMeridianCode()
        {
            return (int)base["PrimeMeridianCode"];
        }

        /// <summary>
        /// The code of the Area of Use in which this datum can be validly used.
        /// </summary>
        public int GetAreaCode()
        {
            return (int)base["AreaCode"];
        }

        /// <summary>
        /// The application for which the datum is valid (e.g. primary geodetic; oil industry, etc)
        /// </summary>
        public string GetDatumScope()
        {
            return (string)base["DatumScope"];
        }

        public override void Read(IDataReader reader)
        {
            base["Code"] = reader.Get<int>("DATUM_CODE");
            base["Name"] = reader.Get<string>("DATUM_NAME");
            base["TypeName"] = reader.Get<string>("DATUM_TYPE");
            base["OriginDescription"] = reader.Get<string>("ORIGIN_DESCRIPTION");
            base["DatumEpoch"] = reader.Get<string>("REALIZATION_EPOCH");
            base["EllipsoidCode"] = reader.Get<int>("ELLIPSOID_CODE");
            base["PrimeMeridianCode"] = reader.Get<int>("PRIME_MERIDIAN_CODE");
            base["AreaCode"] = reader.Get<int>("AREA_OF_USE_CODE");
            base["DatumScope"] = reader.Get<string>("DATUM_SCOPE");
            base.Read(reader);
        }

        public override IDictionary<string, TypeCode> GetProperties()
        {
            var properties = base.GetProperties();

            properties.Add("Code", TypeCode.Int32);
            properties.Add("Name", TypeCode.String);
            properties.Add("TypeName", TypeCode.String);
            properties.Add("OriginDescription", TypeCode.String);
            properties.Add("DatumEpoch", TypeCode.String);
            properties.Add("EllipsoidCode", TypeCode.Int32);
            properties.Add("PrimeMeridianCode", TypeCode.Int32);
            properties.Add("AreaCode", TypeCode.Int32);
            properties.Add("DatumScope", TypeCode.String);

            return properties;
        }
    }

    public enum EpsgDatumType : int
    {
        Unknown = 0,
        Geodetic,
        Vertical,
        Engineering
    }
}
