//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgEllipsoidRecord : EpsgRecord
    {
        public override object GetKey()
        {
            return GetCode();
        }

        /// <summary>
        /// Unique code (integer) of the ellipsoid; primary key.
        /// </summary>
        public int GetCode()
        {
            return (int)base["Code"];
        }

        /// <summary>
        /// Name of the ellipsoid.
        /// </summary>
        public string GetName()
        {
            return (string)base["Name"];
        }

        /// <summary>
        /// Length of the semi-major axis of the ellipsoid.
        /// </summary>
        public double GetSemiMajorAxis()
        {
            return (double)base["SemiMajorAxis"];
        }

        /// <summary>
        /// ID of the unit measure of the ellipsoid's axes, as defined in this record.
        /// </summary>
        public int GetAxesUnitsCode()
        {
            return (int)base["AxesUnitsCode"];
        }

        public bool InverseFlatteningIsNull()
        {
            return (bool)base["InverseFlatteningIsNull"];
        }

        /// <summary>
        /// Preferred second defining parameter of the ellipsoid.
        /// </summary>
        public double GetInverseFlattening()
        {
            return (double)base["InverseFlattening"];
        }

        public bool SemiMinorAxisIsNull()
        {
            return (bool)base["SemiMinorAxisIsNull"];
        }

        /// <summary>
        /// Alternative to inverse flattening; it is preferred not to supply both inverse flattening and semi-minor axis.
        /// </summary>
        public double GetSemiMinorAxis()
        {
            return (double)base["SemiMinorAxis"];
        }

        /// <summary>
        /// Indicator of the shape of the ellipsoid: Yes = "Ellipsoid"; No = "Sphere".  
        /// Default is Yes. No equates to OGC second ellipsoid parameter being "isSphere" with the value of isSphere beinging "sphere".
        /// </summary>
        public bool IsEllipsoid()
        {
            return (bool)base["IsEllipsoid"];
        }

        public override void Read(IDataReader reader)
        {
            bool semiMinorAxisIsNull;
            bool inverseFlatteningIsNull;

            base["Code"] = reader.Get<int>("ELLIPSOID_CODE");
            base["Name"] = reader.Get<string>("ELLIPSOID_NAME");
            base["AxesUnitsCode"] = reader.Get<int>("UOM_CODE");
            base["SemiMajorAxis"] = reader.Get<double>("SEMI_MAJOR_AXIS");
            base["SemiMinorAxis"] = reader.Get<double>("SEMI_MINOR_AXIS", out semiMinorAxisIsNull);
            base["InverseFlattening"] = reader.Get<double>("INV_FLATTENING", out inverseFlatteningIsNull);
            base["IsEllipsoid"] = reader.Get<bool>("ELLIPSOID_SHAPE");
            base["SemiMinorAxisIsNull"] = semiMinorAxisIsNull;
            base["InverseFlatteningIsNull"] = inverseFlatteningIsNull;

            base.Read(reader);
        }

        public override IDictionary<string, TypeCode> GetProperties()
        {
            var properties = base.GetProperties();

            properties.Add("Code", TypeCode.Int32);
            properties.Add("Name", TypeCode.String);
            properties.Add("AxesUnitsCode", TypeCode.Int32);
            properties.Add("SemiMajorAxis", TypeCode.Double);
            properties.Add("SemiMinorAxis", TypeCode.Double);
            properties.Add("InverseFlattening", TypeCode.Double);
            properties.Add("IsEllipsoid", TypeCode.Boolean);
            properties.Add("SemiMinorAxisIsNull", TypeCode.Boolean);
            properties.Add("InverseFlatteningIsNull", TypeCode.Boolean);

            return properties;
        }
    }
}
