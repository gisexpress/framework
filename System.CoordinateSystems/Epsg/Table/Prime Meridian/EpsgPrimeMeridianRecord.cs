//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.CoordinateSystems.Epsg
{
    internal class EpsgPrimeMeridianRecord : EpsgRecord
    {
        public override object GetKey()
        {
            return GetCode();
        }

        /// <summary>
        /// Unique code (integer) of the prime meridian; primary key.
        /// </summary>
        public int GetCode()
        {
            return (int)base["Code"];
        }

        /// <summary>
        /// Name of the prime meridian.
        /// </summary>
        public string GetName()
        {
            return (string)base["Name"];
        }

        /// <summary>
        /// The longitude of the prime meridian in the Greenwich system.
        /// </summary>
        public double GetLongitudeFromGreenwich()
        {
            return (double)base["LongitudeFromGreenwich"];
        }

        /// <summary>
        /// ID of the unit of measure in which the longitude in the previous field is expressed.
        /// </summary>
        public int GetLongitudeUOM()
        {
            return (int)base["LongitudeUOM"];
        }

        public override void Read(IDataReader reader)
        {
            base["Code"] = reader.Get<int>("PRIME_MERIDIAN_CODE");
            base["Name"] = reader.Get<string>("PRIME_MERIDIAN_NAME");
            base["LongitudeFromGreenwich"] = reader.Get<double>("GREENWICH_LONGITUDE");
            base["LongitudeUOM"] = reader.Get<int>("UOM_CODE");
            base.Read(reader);
        }

        public override IDictionary<string, TypeCode> GetProperties()
        {
            var properties = base.GetProperties();

            properties.Add("Code", TypeCode.Int32);
            properties.Add("Name", TypeCode.String);
            properties.Add("LongitudeFromGreenwich", TypeCode.Double);
            properties.Add("LongitudeUOM", TypeCode.Int32);

            return properties;
        }
    }
}
