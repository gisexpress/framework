//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Geometries;

namespace System.CoordinateSystems
{
    internal class DatumTransform : MathTransform
    {
        public DatumTransform(int sourceSrid, int targetSrid, IBursaWolfParameterCollection conversion)
            : base(sourceSrid, targetSrid)
        {
            conversion.ToAffineParameters(out RS, out Ex, out Ey, out Ez, out Dx, out Dy, out Dz);
        }

        protected readonly double RS;
        protected readonly double Ex;
        protected readonly double Ey;
        protected readonly double Ez;
        protected readonly double Dx;
        protected readonly double Dy;
        protected readonly double Dz;

        protected override bool OnTransform(ICoordinate c)
        {
            double x = c.X;
            double y = c.Y;
            double z = c.Z;

            if (!IsInverse)
            {
                x = RS * x - Ez * y + Ey * z + Dx;
                y = Ez * x + RS * y - Ex * z + Dy;
                z = -Ey * x + Ex * y + RS * z + Dz;
            }
            else
            {
                x = RS * x + Ez * y - Ey * z - Dx;
                y = -Ez * x + RS * y + Ex * z - Dy;
                z = Ey * x - Ex * y + RS * z - Dz;
            }

            c.SetValues(x, y, z);

            return true;
        }
    }
}
