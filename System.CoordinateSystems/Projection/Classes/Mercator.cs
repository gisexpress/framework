//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Geometries;

namespace System.CoordinateSystems
{
    internal class Mercator : ProjectionCls
    {
        public Mercator(string name, Authority authority, IEllipsoid ellipsoid, ILinearUnit unit, ProjectionParameterCollection parameters)
            : base(name, authority, ellipsoid, unit, parameters)
        {
            CenterLongitude = CentralMeridian.Value.DegreeToRadian();
            CenterLatitude = LatitudeOfOrigin.Value.DegreeToRadian();
            FalseEastingValue = FalseEasting.Value * ellipsoid.AxisUnit.MetersPerUnit;
            FalseNorthingValue = FalseNorthing.Value * ellipsoid.AxisUnit.MetersPerUnit;

            if (name.ContainsIgnoreCase("Pseudo"))
            {
                K0 = 1.0;
                EccentricityHalf = 0.0;
            }
            else
            {
                EccentricityHalf = 1.0 - (ellipsoid.SemiMinorAxis / ellipsoid.SemiMajorAxis).Pow();
                EccentricitySqrt = EccentricityHalf.Sqrt();
                Eccentricity4 = EccentricitySqrt.Pow(4);
                Eccentricity6 = EccentricitySqrt.Pow(6);
                Eccentricity8 = EccentricitySqrt.Pow(8);
                EccentricityHalf *= .5;

                if (ScaleFactor.IsNull() || ScaleFactor.Value.IsZero())
                {
                    // This is a two standard parallel Mercator projection (2SP)
                    Name = "Mercator_2SP";
                    Authority = 9805;
                    K0 = Math.Cos(CenterLatitude) / (1.0 - EccentricityHalf * Math.Sin(CenterLatitude).Pow()).Sqrt();
                }
                else
                {
                    //This is a one standard parallel Mercator projection (1SP)
                    Name = "Mercator_1SP";
                    K0 = ScaleFactor.Value;
                }
            }
        }

        protected readonly double EccentricitySqrt;
        protected readonly double Eccentricity4;
        protected readonly double Eccentricity6;
        protected readonly double Eccentricity8;
        protected readonly double EccentricityHalf;
        protected readonly double FalseEastingValue;
        protected readonly double FalseNorthingValue;
        protected readonly double CenterLongitude;
        protected readonly double CenterLatitude;
        protected readonly double K0;

        protected ProjectionParameter CentralMeridian
        {
            get { return Parameters[ProjectionParameterKind.Central_Meridian]; }
        }

        protected ProjectionParameter LatitudeOfOrigin
        {
            get { return Parameters[ProjectionParameterKind.Latitude_Of_Origin]; }
        }

        protected ProjectionParameter FalseEasting
        {
            get { return Parameters[ProjectionParameterKind.False_Easting]; }
        }

        protected ProjectionParameter FalseNorthing
        {
            get { return Parameters[ProjectionParameterKind.False_Northing]; }
        }

        protected ProjectionParameter ScaleFactor
        {
            get { return Parameters[ProjectionParameterKind.Scale_Factor, false]; }
        }

        public override IMathTransform CreateTransform(int sourceSrid, int targetSrid)
        {
            return new MathTransform(sourceSrid, targetSrid, DegreesToMeters, MetersToDegrees);
        }

        bool DegreesToMeters(ICoordinate c)
        {
            double x = c.X;
            double y = c.Y;

            if (c.Y < -85.05113)
            {
                y = -85.05113;
            }
            else if (c.Y > 85.05113)
            {
                y = 85.05113;
            }

            double lon = x.DegreeToRadian();
            double lat = y.DegreeToRadian();
            double esinphi = EccentricitySqrt * Math.Sin(lat);

            x = (FalseEastingValue + Ellipsoid.SemiMajorAxis * K0 * (lon - CenterLongitude)) / Unit.MetersPerUnit;
            y = (FalseNorthingValue + Ellipsoid.SemiMajorAxis * K0 * Math.Log(Math.Tan(Math.PI * 0.25 + lat * 0.5) * ((1 - esinphi) / (1 + esinphi)).Pow(EccentricityHalf))) / Unit.MetersPerUnit;

            c.SetValues(x, y);

            return true;
        }

        bool MetersToDegrees(ICoordinate c)
        {
            double dX = c.X * Unit.MetersPerUnit - FalseEastingValue;
            double dY = c.Y * Unit.MetersPerUnit - FalseNorthingValue;
            double ts = Math.Exp(-dY / (Ellipsoid.SemiMajorAxis * K0));

            double chi = AppConstants.HalfPI - 2 * Math.Atan(ts);
            double lat = chi + (EccentricityHalf + 5 * Eccentricity4 / 24 + Eccentricity6 / 12 + 13 * Eccentricity8 / 360) * Math.Sin(2 * chi) + (7 * Eccentricity4 / 48 + 29 * Eccentricity6 / 240 + 811 * Eccentricity8 / 11520) * Math.Sin(4 * chi) + (7 * Eccentricity6 / 120 + 81 * Eccentricity8 / 1120) * Math.Sin(6 * chi) + (4279 * Eccentricity8 / 161280) * Math.Sin(8 * chi);
            double lon = dX / (Ellipsoid.SemiMajorAxis * K0) + CenterLongitude;

            c.SetValues(lon.RadianToDegree(), lat.RadianToDegree());

            return true;
        }
    }
}
