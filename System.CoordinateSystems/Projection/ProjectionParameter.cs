//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Globalization;
using System.IO;
using System.Xml;

namespace System.CoordinateSystems
{
    internal class ProjectionParameter : Info
    {
        public ProjectionParameter(string name, double value)
            : this(name, GetParameterKind(name), value)
        {
        }

        public ProjectionParameter(ProjectionParameterKind kind, double value)
            : this(GetParameterName(kind), kind, value)
        {
        }

        public ProjectionParameter(string name, ProjectionParameterKind kind, double value)
            : base(name, null)
        {
            Kind = kind;
            Value = value;
        }

        public ProjectionParameterKind Kind
        {
            get;
            private set;
        }

        public override string Name
        {
            get
            {
                switch (Kind)
                {
                    case ProjectionParameterKind.Central_Meridian:
                        return "Central_Meridian";
                    case ProjectionParameterKind.Latitude_Of_Origin:
                        return "Latitude_Of_Origin";
                    case ProjectionParameterKind.Scale_Factor:
                        return "Scale_Factor";
                    case ProjectionParameterKind.False_Easting:
                        return "False_Easting";
                    case ProjectionParameterKind.False_Northing:
                        return "False_Northing";
                    case ProjectionParameterKind.Standard_Parallel_1:
                        return "Standard_Parallel_1";
                    case ProjectionParameterKind.Standard_Parallel_2:
                        return "Standard_Parallel_2";
                }

                return base.Name;
            }
            set
            {
                base.Name = value;
            }
        }

        public double Value
        {
            get;
            set;
        }

        public static string GetParameterName(ProjectionParameterKind kind)
        {
            return CultureInfo.InvariantCulture.TextInfo.ToLower(Enum.GetName(typeof(ProjectionParameterKind), kind));
        }

        public static ProjectionParameterKind GetParameterKind(string name)
        {
            string parameterInvariantName = CultureInfo.InvariantCulture.TextInfo.ToLower(name).Replace(' ', '_');

            switch (parameterInvariantName)
            {
                case "scale_factor":
                case "scale_factor_at_natural_origin":
                    return ProjectionParameterKind.Scale_Factor;

                case "central_meridian":
                case "longitude_of_center":
                case "longitude_of_false_origin":
                case "longitude_of_natural_origin":
                    return ProjectionParameterKind.Central_Meridian;

                case "latitude_of_origin":
                case "latitude_of_center":
                case "latitude_of_false_origin":
                case "latitude_of_natural_origin":
                    return ProjectionParameterKind.Latitude_Of_Origin;

                case "standard_parallel_1":
                case "latitude_of_1st_standard_parallel":
                    return ProjectionParameterKind.Standard_Parallel_1;

                case "standard_parallel_2":
                case "latitude_of_2nd_standard_parallel":
                    return ProjectionParameterKind.Standard_Parallel_2;

                case "false_easting":
                case "easting_at_false_origin":
                    return ProjectionParameterKind.False_Easting;

                case "false_northing":
                case "northing_at_false_origin":
                    return ProjectionParameterKind.False_Northing;
            }

            foreach (ProjectionParameterKind e in Enum.GetValues(typeof(ProjectionParameterKind)))
            {
                if (Enum.GetName(typeof(ProjectionParameterKind), e).Equals(parameterInvariantName, StringComparison.OrdinalIgnoreCase))
                {
                    return e;
                }
            }

            return ProjectionParameterKind.Unknown;
        }

        public override bool IsEquivalent(object obj)
        {
            var other = obj as ProjectionParameter;

            if (other.HasValue())
            {
                return Kind == other.Kind && Value.IsEquivalent(other.Value);
            }

            return false;
        }

        public static bool Read(ITokenEnumerator e, out ProjectionParameter value)
        {
            if (e.Current.Equals("PARAMETER") && e.ReadNext('['))
            {
                if (ReadName(e, out string name) && e.Current.Equals(',') && e.ReadNumber(out NumberToken parameterValue) && e.ReadNext(']'))
                {
                    e.MoveNext();
                    value = new ProjectionParameter(name, Convert.ToDouble(parameterValue.Value));
                    return true;
                }
            }

            value = null;
            return false;
        }

        public override string ToString()
        {
            return string.Concat(@"PARAMETER[""", Name, @""",", Value.ToText(), @"]");
        }
    }
}
