//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;

namespace System.CoordinateSystems
{
    internal class ProjectionParameterCollection : SortedList<ProjectionParameterKind, ProjectionParameter>, IEnumerable<ProjectionParameter>
    {
        static object SyncRoot = string.Empty;

        public ProjectionParameterCollection(params ProjectionParameter[] parameters)
            : base()
        {
            foreach (ProjectionParameter parameter in parameters)
            {
                Add(parameter);
            }
        }

        public static ProjectionParameterCollection Empty
        {
            get { return new ProjectionParameterCollection(); }
        }

        public ProjectionParameter Add(ProjectionParameter parameter)
        {
            if (parameter.Kind != ProjectionParameterKind.Unknown)
            {
                base.Add(parameter.Kind, parameter);
            }
            else
            {
                base.Add((ProjectionParameterKind)(1000 + base.Count), parameter);
            }

            return parameter;
        }

        public ProjectionParameter Add(ProjectionParameterKind kind, double value)
        {
            return Add(new ProjectionParameter(kind, value));
        }

        public new ProjectionParameter this[ProjectionParameterKind kind]
        {
            get { return this[kind, true]; }
        }

        public ProjectionParameter this[ProjectionParameterKind kind, bool createNewOnMissing]
        {
            get
            {
                ProjectionParameter item = null;

                lock (SyncRoot)
                {
                    if (!base.ContainsKey(kind))
                    {
                        if (createNewOnMissing)
                        {
                            item = new ProjectionParameter(kind, 0);
                            base.Add(item.Kind, item);
                        }
                    }
                    else
                    {
                        item = base[kind];
                    }
                }

                return item;
            }
        }

        public ProjectionParameter this[string name]
        {
            get
            {
                foreach (ProjectionParameter item in base.Values)
                {
                    if (item.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
                    {
                        return item;
                    }
                }

                return null;
            }
        }

        public ProjectionParameter this[int index]
        {
            get
            {
                int n = 0;

                foreach (ProjectionParameter item in base.Values)
                {
                    if (index == n++)
                    {
                        return item;
                    }
                }

                return null;
            }
        }

        public static bool Read(ITokenEnumerator e, out ProjectionParameterCollection value)
        {
            ProjectionParameter parameter;
            value = null;

            while (ProjectionParameter.Read(e, out parameter))
            {
                value = value ?? new ProjectionParameterCollection();
                value.Add(parameter);

                if (e.Current.Equals(','))
                {
                    if (!e.MoveNext())
                    {
                        break;
                    }
                }
            }

            return value.HasValue();
        }

        public ProjectionParameter[] ToArray()
        {
            var array = new ProjectionParameter[Count];
            Values.CopyTo(array, 0);
            return array;
        }

        public new IEnumerator<ProjectionParameter> GetEnumerator()
        {
            return base.Values.GetEnumerator();
        }

        public ProjectionParameterCollection Clone()
        {
            return new ProjectionParameterCollection(ToArray());
        }
    }
}
