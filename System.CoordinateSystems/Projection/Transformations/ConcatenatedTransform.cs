//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Geometries;

namespace System.CoordinateSystems
{
    internal class ConcatenatedTransform : MathTransform
    {
        public ConcatenatedTransform(int sourceSrid, int targetSrid, params IMathTransform[] transforms)
            : base(sourceSrid, targetSrid)
        {
            Transforms = new List<IMathTransform>();
            Add(transforms);
        }

        protected readonly List<IMathTransform> Transforms;

        public void Add(params IMathTransform[] transforms)
        {
            foreach (IMathTransform item in transforms)
            {
                if (item.HasValue())
                {
                    Transforms.Add(item);
                }
            }
        }

        public IMathTransform GetTransform()
        {
            if (Transforms.Count > 0)
            {
                if (Transforms.Count == 1)
                {
                    return Transforms[0];
                }

                return this;
            }

            return null;
        }

        public override bool Invert()
        {
            Transforms.Reverse();

            foreach (IMathTransform transform in Transforms)
            {
                transform.Invert();
            }

            return true;
        }

        protected override bool OnTransform(ICoordinate c)
        {
            foreach (IMathTransform transform in Transforms)
            {
                if (!transform.Transform(c))
                {
                    return false;
                }
            }

            return true;
        }
    }
}
