//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data.Common;
using System.Data.IO;
using System.Geometries;

namespace System.Data.Dxf
{
    internal class DxfDataReader : DataReader
    {
        public DxfDataReader(SqlClause clause)
            : base(clause, default(DbCommand))
        {
            LayerName = clause.TableSources.First.Name;
            Enumerator = ((DxfConnection)clause.Connection).Document.Entities.GetEnumerator();
        }

        protected string LayerName;
        protected IEnumerator<AcDbObject> Enumerator;

        public override int FieldCount
        {
            get { return 0; }
        }

        public override void Open()
        {
        }

        protected override bool OnRead()
        {
            while (Enumerator.MoveNext())
            {
                if (Enumerator.Current.LayerName == LayerName)
                {
                    return true;
                }
            }

            return false;
        }

        public override object GetFeatureId()
        {
            return Position + 1;
        }

        protected override IGeometry OnReadGeometry()
        {
            return Enumerator.Current.GetGeometry();
        }

        public override object GetValue(int ordinal)
        {
            return Convert.DBNull;
        }

        public override object GetValue(string name)
        {
            return Convert.DBNull;
        }

        public override int GetValues(object[] values)
        {
            for (int n = 0; n < FieldCount; n++)
            {
                values[n] = GetValue(n);
            }

            return FieldCount;
        }

        protected override void Dispose(bool disposing)
        {
            Enumerator.Dispose();
            Enumerator = null;
            base.Dispose(disposing);
        }
    }
}
