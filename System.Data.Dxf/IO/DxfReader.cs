//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Globalization;
using System.IO;

namespace System.Data.Dxf
{
    public class DxfReader : IDisposable
    {
        public DxfReader(Stream s)
        {
            Reader = new StreamReader(s);
        }

        protected StreamReader Reader;

        public bool Eof
        {
            get { return Reader.EndOfStream; }
        }

        public int GroupCode
        {
            get;
            protected set;
        }

        public string Current
        {
            get;
            protected set;
        }

        public bool Read()
        {
            int value;

            if (int.TryParse(Current = Reader.ReadLine(), NumberStyles.Integer, CultureInfo.InvariantCulture, out value))
            {
                GroupCode = value;
                Current = Reader.ReadLine();
                return true;
            }

            return false;
        }

        public byte GetByte()
        {
            byte value;

            if (byte.TryParse(Current, NumberStyles.Integer, CultureInfo.InvariantCulture, out value))
            {
                return value;
            }

            return default(byte);
        }

        public int GetInt32()
        {
            int value;

            if (int.TryParse(Current, NumberStyles.Integer, CultureInfo.InvariantCulture, out value))
            {
                return value;
            }

            return default(int);
        }

        public float GetSingle()
        {
            float value;

            if (float.TryParse(Current, NumberStyles.Float, CultureInfo.InvariantCulture, out value))
            {
                return (float)value;
            }

            return default(float);
        }

        public double GetDouble()
        {
            decimal value;

            if (decimal.TryParse(Current, NumberStyles.Float, CultureInfo.InvariantCulture, out value))
            {
                return (double)value;
            }

            return default(double);
        }

        public string GetString()
        {
            return Current;
        }

        public override string ToString()
        {
            return string.Concat("Group Code: ", GroupCode, " Value: ", Current);
        }

        public void Dispose()
        {
            Reader.Dispose();
            Reader = null;
            GC.SuppressFinalize(this);
        }
    }
}
