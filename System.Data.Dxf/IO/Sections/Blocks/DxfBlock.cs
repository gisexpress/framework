//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.ObjectModel;
using System.Geometries;

namespace System.Data.Dxf
{
    internal class DxfBlock
    {
        public DxfBlock()
        {
            BasePoint = GeometryFactory.CreateCoordinate();
            Objects = new Collection<AcDbObject>();
        }

        public DxfDocument Document
        {
            get;
            internal set;
        }

        public string Name
        {
            get;
            set;
        }

        public string LayerName
        {
            get;
            set;
        }

        /// <summary>
        /// Block-type flags (bit-coded values, may be combined):
        /// 0 = Indicates none of the following flags apply
        /// 1 = This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application
        /// 2 = This block has non-constant attribute definitions (this bit is not set if the block has any attribute definitions that are constant, or has no attribute definitions at all)
        /// 4 = This block is an external reference (xref)
        /// 8 = This block is an xref overlay
        /// 16 = This block is externally dependent
        /// 32 = This is a resolved external reference, or dependent of an external reference (ignored on input)
        /// 64 = This definition is a referenced external reference (ignored on input)
        /// </summary>
        public int Flag
        {
            get;
            set;
        }

        public ICoordinate BasePoint
        {
            get;
            set;
        }

        public Collection<AcDbObject> Objects
        {
            get;
            protected set;
        }

        public void Read(DxfReader reader)
        {
            while (true)
            {
                switch (reader.GroupCode)
                {
                    case 0:
                        AddObject(reader);
                        break;
                    case 1:
                        // Xref path name
                        break;
                    case 2:
                        Name = reader.GetString();
                        break;
                    case 3:
                        break;
                    case 4:
                        // Block description (optional)
                        break;
                    case 5:
                        break;
                    case 8:
                        LayerName = reader.GetString();
                        break;
                    case 10:
                        BasePoint.X = reader.GetDouble();
                        break;
                    case 20:
                        BasePoint.Y = reader.GetDouble();
                        break;
                    case 30:
                        BasePoint.Z = reader.GetDouble();
                        break;
                    case 70:
                        Flag = reader.GetInt32();
                        break;
                    case 100:
                    case 102:
                    case 330:
                        break;
                }

                if (reader.GroupCode == 0 && reader.Current.Equals("ENDBLK"))
                {
                    break;
                }
                else
                {
                    reader.Read();
                }
            }
        }

        void AddObject(DxfReader reader)
        {
            AcDbObject obj;

            while (DxfEntitiesSection.ReadObject(Document, reader, out obj))
            {
                if (obj.HasValue())
                {
                    Objects.Add(obj);
                }
                else
                {
                    break;
                }
            }
        }

        public override string ToString()
        {
            return string.Concat(LayerName, " : ", Name);
        }
    }
}
