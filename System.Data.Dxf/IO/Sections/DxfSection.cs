//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace System.Data.Dxf
{
    internal abstract class DxfSection : DxfObject
    {
        protected static Dictionary<string, Type> RegisteredSections;

        static DxfSection()
        {
            RegisteredSections = new Dictionary<string, Type>(StringComparer.InvariantCultureIgnoreCase);
            RegisteredSections.Add(DxfHeaderSection.Keyword, typeof(DxfHeaderSection));
            RegisteredSections.Add(DxfClassesSection.Keyword, typeof(DxfClassesSection));
            RegisteredSections.Add(DxfTablesSection.Keyword, typeof(DxfTablesSection));
            RegisteredSections.Add(DxfBlocksSection.Keyword, typeof(DxfBlocksSection));
            RegisteredSections.Add(DxfEntitiesSection.Keyword, typeof(DxfEntitiesSection));
            RegisteredSections.Add(DxfObjectsSection.Keyword, typeof(DxfObjectsSection));
            RegisteredSections.Add(DxfThumbnailImageSection.Keyword, typeof(DxfThumbnailImageSection));
        }

        public DxfDocument Document
        {
            get;
            internal set;
        }

        public abstract string Name
        {
            get;
        }

        protected bool ReadNext(DxfReader reader)
        {
            return reader.Read() && !IsEndSection(reader);
        }

        public static bool IsEndSection(DxfReader reader)
        {
            return reader.GroupCode == 0 && reader.Current.Equals("ENDSEC");
        }

        public static bool Read(DxfReader reader, out DxfSection section)
        {
            while (!reader.Eof)
            {
                if (reader.GroupCode == 0 && reader.Current.Equals("SECTION"))
                {
                    reader.Read();
                    break;
                }

                reader.Read();
            }

            if (reader.GroupCode == 2)
            {
                Type sectionType;

                if (RegisteredSections.TryGetValue(reader.Current, out sectionType))
                {
                    section = (DxfSection)Activator.CreateInstance(sectionType);
                    return true;
                }
            }

            section = null;
            return false;
        }
    }
}
