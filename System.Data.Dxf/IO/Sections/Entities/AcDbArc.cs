//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Geometries;

namespace System.Data.Dxf
{
    internal class AcDbArc : AcDbCircle
    {
        public double StartAngle
        {
            get;
            set;
        }

        public double EndAngle
        {
            get;
            set;
        }

        public override IGeometry GetGeometry()
        {
            if (Center.IsEmpty())
            {
                return default(IGeometry);
            }

            IArc arc = GeometryFactory.CreateArc();

            double angleStart = StartAngle.DegreeToRadian();
            double angleEnd = (EndAngle > StartAngle ? EndAngle : EndAngle + 360).DegreeToRadian();

            arc.Add(Center.X - Radius, Center.Y + Radius);
            arc.Add(Center.X + Radius, Center.Y - Radius);

            arc.StartAngle = angleStart;
            arc.SweepAngle = angleEnd - angleStart;

            return arc;
        }

        protected override void OnRead(DxfReader reader)
        {
            switch (reader.GroupCode)
            {
                case 50:
                    StartAngle = reader.GetDouble();
                    break;
                case 51:
                    EndAngle = reader.GetDouble();
                    break;
            }

            base.OnRead(reader);
        }
    }
}
