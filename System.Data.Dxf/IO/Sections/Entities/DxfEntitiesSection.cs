//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace System.Data.Dxf
{
    internal class DxfEntitiesSection : DxfSection, IEnumerable<AcDbObject>
    {
        public const string Keyword = "ENTITIES";

        public DxfEntitiesSection()
        {
            Objects = new Collection<AcDbObject>();
        }

        protected Collection<AcDbObject> Objects;

        public override string Name
        {
            get { return Keyword; }
        }

        public override bool Read(DxfReader reader)
        {
            if (reader.Read())
            {
                while (true)
                {
                    if (reader.GroupCode == 0)
                    {
                        AcDbObject obj;

                        if (ReadObject(Document, reader, out obj))
                        {
                            if (obj.HasValue())
                            {
                                Objects.Add(obj);
                                continue;
                            }
                        }
                    }

                    if (!ReadNext(reader))
                    {
                        break;
                    }
                }
            }

            return true;
        }

        public static bool ReadObject(DxfDocument document, DxfReader reader, out AcDbObject obj)
        {
            Type objType;

            obj = null;

            if (AcDbObject.Types.TryGetValue(reader.Current, out objType))
            {
                if (objType.HasValue())
                {
                    obj = Activator.CreateInstance(objType) as AcDbObject;
                    obj.Document = document;
                    obj.Read(reader);
                }

                return true;
            }

            return false;
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public IEnumerator<AcDbObject> GetEnumerator()
        {
            return Objects.GetEnumerator();
        }
    }
}
