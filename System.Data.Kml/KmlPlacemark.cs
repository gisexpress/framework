//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
using System.ComponentModel;
using System.Geometries;
using System.Linq;
using System.Xml;

namespace System.Data.Kml
{
    class KmlPlacemark : DataFeature, IKeyedObject
    {
        public KmlPlacemark(XmlDocument document) : base(document)
        {
        }

        public override int GetFeatureId()
        {
            XmlAttribute id = Attributes[Constants.Xml.Id];

            if (id == null)
            {
                int n;
                SetFeatureId(n = Command.GetNextId());
                return n;
            }

            return XmlConvert.ToInt32(id.Value);
        }

        public override void SetFeatureId(object value)
        {
            SetAttribute(Constants.Xml.Id, value);
        }

        protected override object OnGetValue(string name)
        {
            return Get(name, string.Empty);
        }

        protected override void OnSetValue(string name, object value)
        {
            Set(name, value);
        }

        protected override IGeometry OnGetGeometry()
        {
            return Geometry ?? ChildNodes.OfType<IGeometry>().FirstOrDefault();
        }

        protected override void OnSetGeometry(IGeometry value)
        {
            var e = (XmlElementBase)value;

            e.Remove();
            AppendChild(e);
        }

        protected override void OnRegisterProperties(PropertyNodeCollection properties)
        {
            properties.Add(Constants.Xml.Id, Types.Int32, Categories.Data).IsReadOnly = true;
            properties.Add(Constants.Xml.Name, Types.String, Categories.Data);
            properties.Add(Constants.Xml.Description, Types.String, Categories.Data);
            properties.Add(Constants.Xml.StyleUrl, Types.String, Categories.Data);
        }
    }
}
