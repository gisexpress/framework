//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel.Design;
using System.Linq;

namespace System.Geometries
{
    internal class ArcComponent : RectangleComponent
    {
        public ArcComponent(IApplicationComponentDesigner designer, Arc value)
            : base(designer, value)
        {
            SegmentA = new LineSegment(0, 0, 0, 0);
            SegmentB = new LineSegment(0, 0, 0, 0);
            SegmentCenter = new LineSegment(0, 0, 0, 0);
        }

        protected int Index;
        protected double Height;
        protected ICoordinate P0;
        protected ICoordinate P1;
        protected LineSegment SegmentA;
        protected LineSegment SegmentB;
        protected LineSegment SegmentCenter;

        protected override bool IsClosed
        {
            get { return false; }
        }

        public override bool AllowAlignments
        {
            get { return Value.NumPoints() < 3; }
            set { }
        }

        public override bool AllowBeginValidation
        {
            get { return false; }
        }

        protected override bool IsValid(Rectangle g)
        {
            return g.NumPoints() == 3;
        }

        protected override void OnRectangleBeginEdit(ICoordinate c)
        {
            var points = Value.GetEditableCoordinates(this).ToArray();

            Value.Coordinates.Clear();
            Value.Coordinates.Add(points);
        }

        protected override void OnCoordinateBeginEdit(IApplicationComponent component, ICoordinate c)
        {
            base.OnCoordinateBeginEdit(component, c);

            if (Value.NumPoints() > 2)
            {
                P0 = new Coordinate(Value.Coordinates.Get(0));
                P1 = new Coordinate(Value.Coordinates.Get(1));
                Height = -LineSegment.SignedDistancePerpendicular(P0, P1, Value.Coordinates.Get(2));

                if (!Detached)
                {
                    Index = Value.Coordinates.IndexOf(Value.Coordinates.LastOrDefault(item => item.IsEquivalent(c)));
                    OnValidateRect(c);
                    Designer.Flush();
                }
                else
                {
                    Index = Value.Coordinates.IndexOf(c);
                }
            }
        }

        protected override void OnCoordinateValidating(ApplicationComponentEventArgs e)
        {
            e.Cancel = !OnValidateRect(e.Component.Value as ICoordinate);
        }

        protected override bool OnValidateRect(ICoordinate location)
        {
            if (P0.HasValue() && P1.HasValue() && Value.NumPoints() > 2)
            {
                if (Index == 0)
                {
                    location.CopyTo(P0);
                }
                else if (Index == 1)
                {
                    location.CopyTo(P1);
                }

                P0.CopyTo(SegmentCenter.P0);
                P1.CopyTo(SegmentCenter.P1);

                if (Index == 2)
                {
                    SegmentCenter.Rotate(90);

                    if (SegmentCenter.Project(location))
                    {
                        location.CopyTo(Value.Coordinates.Get(2));
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    ICoordinate c = SegmentCenter.PointAlongOffset(0.5, Height);

                    if (c.HasValue())
                    {
                        c.CopyTo(Value.Coordinates.Get(2));
                    }
                }

                P0.CopyTo(SegmentA.P0);
                P1.CopyTo(SegmentB.P0);

                Value.Coordinates.Get(2).CopyTo(SegmentA.P1);
                Value.Coordinates.Get(2).CopyTo(SegmentB.P1);

                double distance = LineSegment.SignedDistancePerpendicular(P0, P1, Value.Coordinates.Get(2));

                if (distance.Abs() > Designer.Transform.PixelSize)
                {
                    if (!((Arc)Value).Build(P0, P1, Value.Coordinates.Get(2), SegmentA, SegmentB))
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }

            if (Value.NumPoints() > 1)
            {
                if (Value.Coordinates.GetDistance(0, 1) <= Designer.Transform.PixelSize)
                {
                    return false;
                }
            }

            return true;
        }

        protected override void OnEditCompleted(ComponentEditCompleteAction action)
        {
            if (Value.NumPoints() == 3)
            {
                Value.Coordinates.RemoveAt(2);
            }

            base.OnEditCompleted(action);
        }
    }
}
