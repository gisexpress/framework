//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Linq;
using System.Windows.Forms;

namespace System.Geometries
{
    internal class LineStringComponent : LineStringComponent<LineString>
    {
        public LineStringComponent(IApplicationComponentDesigner designer, LineString value)
            : base(designer, value)
        {
        }
    }

    internal class LineStringComponent<T> : GeometryComponent<T> where T : Geometry
    {
        public LineStringComponent(IApplicationComponentDesigner designer, T value)
            : base(designer, value)
        {
            SegmentAngle1 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentAngle1);
            SegmentAngle2 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentAngle2);
            SegmentLength1 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentLength1);
            SegmentLength2 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentLength2);
        }

        protected PropertyDescriptor SegmentAngle1;
        protected PropertyDescriptor SegmentAngle2;
        protected PropertyDescriptor SegmentLength1;
        protected PropertyDescriptor SegmentLength2;

        public override void AddProperties(PropertyDescriptorCollection properties)
        {
            if (ActivePoint.HasValue() && Value.NumPoints() > 1)
            {
                int n = Value.Coordinates.IndexOf(ActivePoint.Value as ICoordinate);

                if (Value.NumPoints() > 2)
                {
                    base.AddProperties(properties);
                }

                properties.Add(SegmentAngle1);
                properties.Add(SegmentLength1);

                if (!Detached && Value.NumPoints() > 2 && n > 0 && n < Value.NumPoints() - 1)
                {
                    properties.Add(SegmentAngle2);
                    properties.Add(SegmentLength2);
                }
            }
        }

        protected override void OnCoordinateEditCompleted(ApplicationComponentEditCompletedEventArgs e)
        {
            bool isDetached = Detached;
            var coordinate = ActivePoint.Value as ICoordinate;

            base.OnCoordinateEditCompleted(e);

            if (e.Action == ComponentEditCompleteAction.Delete)
            {
                if (Value.NumPoints() > 1)
                {
                    int n = Value.Coordinates.IndexOf(coordinate);

                    e.Handled = true;
                    Detached = isDetached;

                    if (Value.Coordinates.Remove(coordinate))
                    {
                        ICoordinate c;

                        if (isDetached)
                        {
                            c = Value.Coordinates.Last();
                            coordinate.CopyTo(c);
                            OnCoordinateBeginEdit(c);
                        }
                        else if (Value.NumPoints() > 1)
                        {
                            OnCoordinateBeginEdit(Value.Coordinates.ElementAt(Math.Max(0, n - 1)));
                        }
                    }

                    if (!isDetached && !IsValid(Value))
                    {
                        base.OnEndEdit(ComponentEditCompleteAction.Delete);
                    }
                }
                else
                {
                    if (!IsValid(Value))
                    {
                        Value.Coordinates.Clear();
                        base.OnEndEdit(e.Action);
                    }
                }
            }
            else if (e.Action == ComponentEditCompleteAction.Cancel)
            {
                if (!IsValid(Value))
                {
                    Value.Coordinates.Clear();
                    base.OnEndEdit(e.Action);
                }
            }
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            if (Detached && Value.NumPoints() > 1 && !e.Location.IsEmpty)
            {
                double x, y;

                if (Designer.Transform.ClientToWorld(e.Location.X, e.Location.Y, out x, out y))
                {
                    Value.EndPoint.SetValues(x, y);
                }
            }
        }
    }
}
