//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Linq;

namespace System.Geometries
{
    internal class PolygonComponent : LineStringComponent<Polygon>
    {
        public PolygonComponent(IApplicationComponentDesigner designer, Polygon value)
            : base(designer, value)
        {
            SegmentAngle1 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentAngle1);
            SegmentAngle2 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentAngle2);
            SegmentLength1 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentLength1);
            SegmentLength2 = GeometryFactory.CreatePropertyDescriptor(this, GeometryProperty.SegmentLength2);
        }

        protected override bool IsClosed
        {
            get { return true; }
        }

        protected override bool IsValid(Polygon g)
        {
            return g.NumPoints() > 2;
        }

        public override void AddProperties(PropertyDescriptorCollection properties)
        {
            if (Value.NumPoints() > 2)
            {
                foreach (var item in Value.GetProperties(this).Cast<PropertyDescriptor>())
                {
                    properties.Add(item);
                }
            }

            if (Value.NumPoints() > 1)
            {
                properties.Add(SegmentAngle1);
                properties.Add(SegmentLength1);

                if (Value.NumPoints() > 2)
                {
                    properties.Add(SegmentAngle2);
                    properties.Add(SegmentLength2);
                }
            }
        }

        protected override void OnEditCompleted(ComponentEditCompleteAction action)
        {
            if (Value.NumPoints() > 2)
            {
                Value.Coordinates.IsClosed = true;
            }
            else
            {
                Value.Coordinates.Clear();

                if (ActivePoint.HasValue())
                {
                    ActivePoint.EndEdit(ComponentEditCompleteAction.Delete);
                    ActivePoint = null;
                }
            }

            base.OnEditCompleted(action);
        }
    }
}
