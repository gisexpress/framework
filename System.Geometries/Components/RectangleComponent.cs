//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace System.Geometries
{
    internal class RectangleComponent : LineStringComponent<Rectangle>
    {
        public RectangleComponent(IApplicationComponentDesigner designer, Rectangle value)
            : base(designer, value)
        {
        }

        protected bool IsDragging;

        protected override bool IsClosed
        {
            get { return true; }
        }

        protected override bool IsValid(Rectangle g)
        {
            return g.NumPoints() == 2;
        }

        public override void AddProperties(PropertyDescriptorCollection properties)
        {
            foreach (var item in Value.GetProperties(this).Cast<PropertyDescriptor>())
            {
                properties.Add(item);
            }
        }

        protected override void OnCoordinateBeginEdit(IApplicationComponent component, ICoordinate c)
        {
            IsDragging = false;

            if (!Detached)
            {
                if (c.IsEquivalent(Value.GetCentroid()))
                {
                    IsDragging = true;
                }
                else
                {
                    OnRectangleBeginEdit(c);
                }
            }

            base.OnCoordinateBeginEdit(component, c);
        }

        protected virtual void OnRectangleBeginEdit(ICoordinate c)
        {
            IEnvelope bounds = Value.GetBounds();

            double w = bounds.GetWidth();
            double h = bounds.GetHeight();

            Value.Coordinates.Set(c);

            if (c.X.IsEquivalent(bounds.Max.X))
            {
                w = -w;
            }

            if (c.Y.IsEquivalent(bounds.Max.Y))
            {
                h = -h;
            }

            Value.Coordinates.Get(1).SetValues(c.X + w, c.Y + h);
        }

        protected override void OnCoordinateValidating(ApplicationComponentEventArgs e)
        {
            e.Handled = OnValidateRect(e.Component.Value as ICoordinate);
        }

        protected virtual bool OnValidateRect(ICoordinate location)
        {
            if (IsDragging && !Detached)
            {
                double dx = Value.Width / 2.0;
                double dy = Value.Height / 2.0;

                Value.StartPoint.SetValues(location.X - dx, location.Y - dy);
                Value.EndPoint.SetValues(location.X + dx, location.Y + dy);

                return true;
            }

            return false;
        }

        protected override void OnCoordinateEditCompleted(ApplicationComponentEditCompletedEventArgs e)
        {
            if (e.Action == ComponentEditCompleteAction.Cancel)
            {
                if (Detached)
                {
                    Value.Coordinates.Clear();
                }
                else
                {
                    OnValidateRect(e.Component.Value as ICoordinate);
                }
            }

            if (e.Action == ComponentEditCompleteAction.Complete && IsValid(Value))
            {
                OnEndEdit(e.Action);
            }
            else
            {
                base.OnCoordinateEditCompleted(e);
            }
        }

        protected override RectangleF OnDrawEditablePoints(PaintEventArgs e)
        {
            if (ActivePoint == null)
            {
                return base.OnDrawEditablePoints(e);
            }

            return RectangleF.Empty;
        }

        protected override void OnDrawCenterPoint(PaintEventArgs e, RectangleF bounds)
        {
            if (ActivePoint.HasValue())
            {
                base.OnDrawCenterPoint(e, bounds);
            }
        }

        protected override void OnEndEdit(ComponentEditCompleteAction action)
        {
            if ((Detached && action != ComponentEditCompleteAction.Complete) || ActivePoint == null || !AllowProperties)
            {
                base.OnEndEdit(action);
            }

            Detached = false;
            ActivePoint = null;
            Designer.Refresh();
        }
    }
}