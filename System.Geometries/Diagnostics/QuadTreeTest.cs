//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Diagnostics;
using System.Geometries.Index;
using System.Geometries.Index.Quadtree;
using System.Linq;

namespace System.Geometries.Diagnostics
{
    internal class QuadTreeTest : IUnitTest
    {
        public int Priority
        {
            get { return 1001; }
        }

        public void Run()
        {
            //Metric();
            //Geographic();
        }

        void Metric()
        {
            IList<ISpatialObject> r;
            var index = new Quadtree<ISpatialObject>();
            IList<ISpatialObject> items = GetMetricObjects().ToList();

            foreach (ISpatialObject o in items)
            {
                index.Insert(o);
            }

            r = index.Query(Envelope.Read("480393.464523252,480393.650431361,4419335.83903711,4419336.0728268"));
            Debug.Assert(r.Count == 1 && r[0].Equals(items[6]));

            r = index.Query(Envelope.Read("480164,480171,4419357,4419365"));
            Debug.Assert(r.Count == 1 && r[0].Equals(items[11]));

            r = index.Query(Envelope.Read("480091,480092,4419362,4419363"));
            Debug.Assert(r.Count == 1 && r[0].Equals(items[16]));

            r = index.Query(Envelope.Read("480093.107,480093.108,4419363.789,4419363.79"));
            Debug.Assert(r.Count == 0);

            Debug.Assert(index.Remove(items[6]));
            Debug.Assert(index.Remove(items[11]));
            Debug.Assert(index.Remove(items[16]));

            r = index.Query(Envelope.Read("480392,480394,4419334,4419336"));
            Debug.Assert(r.Count == 0);

            r = index.Query(Envelope.Read("480164,480171,4419357,4419365"));
            Debug.Assert(r.Count == 0);

            r = index.Query(Envelope.Read("480091,480092,4419362,4419363"));
            Debug.Assert(r.Count == 0);

            //Debug.Assert(index.GetQuadNodeCount() == 5);
            //Debug.Assert(index.GetAllNodes().Count == 17);
        }

        void Geographic()
        {
            IList<ISpatialObject> r;
            ISpatialIndex<ISpatialObject> index = new Quadtree<ISpatialObject>();
            IList<ISpatialObject> items = GetGeographicObjects().ToList();

            foreach (ISpatialObject o in items)
            {
                index.Insert(o);
            }

            r = index.Query(Envelope.Read("32.7703060769899,32.7703082440277,39.9063733205246,39.9063754303916"));
            Debug.Assert(r.Count == 1 && r[0].Equals(items[5]));

            r = index.Query(Envelope.Read("32.7676220013132,32.767703618433,39.9065585545148,39.9066307682465"));
            Debug.Assert(r.Count == 1 && r[0].Equals(items[10]));

            r = index.Query(Envelope.Read("32.766768160967,32.7667798247866,39.9066018717603,39.9066109014945"));
            Debug.Assert(r.Count == 1 && r[0].Equals(items[15]));

            r = index.Query(Envelope.Read("32.7667927463492,32.7667927580131,39.9066180334328,39.9066180424625"));
            Debug.Assert(r.Count == 0);

            Debug.Assert(index.Remove(items[5]));
            Debug.Assert(index.Remove(items[10]));
            Debug.Assert(index.Remove(items[15]));

            r = index.Query(Envelope.Read("32.7703060769899,32.7703082440277,39.9063733205246,39.9063754303916"));
            Debug.Assert(r.Count == 0);

            r = index.Query(Envelope.Read("32.7676220013132,32.767703618433,39.9065585545148,39.9066307682465"));
            Debug.Assert(r.Count == 0);

            r = index.Query(Envelope.Read("32.766768160967,32.7667798247866,39.9066018717603,39.9066109014945"));
            Debug.Assert(r.Count == 0);

            //Debug.Assert(index.GetQuadNodeCount() == 5);
            //Debug.Assert(index.GetAllNodes().Count == 17);
        }

        IEnumerable<ISpatialObject> GetMetricObjects()
        {
            yield return QuadObject.Parse("POINT (479884.34782616 4419384.66261768)");
            yield return QuadObject.Parse("POINT (479884.34782616 4419384.66261768)");
            yield return QuadObject.Parse("POINT (479991.881948474 4419466.89459357)");
            yield return QuadObject.Parse("POINT (480048.179224273 4419234.7474001)");
            yield return QuadObject.Parse("POINT (480112.067144001 4419294.83999787)");
            yield return QuadObject.Parse("POINT (480240.475537117 4419381.49984938)");
            yield return QuadObject.Parse("POINT (480393.553522999 4419335.95598581)");

            yield return QuadObject.Parse("LINESTRING (479850.822482144 4419411.86242509, 479904.589543301 4419465.62948625)");
            yield return QuadObject.Parse("LINESTRING (480306.893671487 4419406.80199581, 480306.893671487 4419469.42480821)");
            yield return QuadObject.Parse("LINESTRING (479983.026197224 4419421.35073, 480048.811777934 4419421.35073)");
            yield return QuadObject.Parse("LINESTRING (479924.198706782 4419301.79808814, 479989.984287492 4419301.79808814)");
            yield return QuadObject.Parse("LINESTRING (480168.3644198 4419327.10023456, 480168.3644198 4419389.72304697)");
            yield return QuadObject.Parse("LINESTRING (480217.703605333 4419201.22205609, 480217.703605333 4419263.8448685)");
            yield return QuadObject.Parse("LINESTRING (480306.893671487 4419406.80199581, 480306.893671487 4419469.42480821)");
            yield return QuadObject.Parse("LINESTRING (480360.660732644 4419241.07293671, 480426.446313354 4419241.07293671)");

            yield return QuadObject.Parse("POLYGON ((479877.389735892 4419180.34778529, 479846.394606519 4419211.34291466, 479876.124628571 4419241.07293671, 479907.119757944 4419210.07780734, 479877.389735892 4419180.34778529))");
            yield return QuadObject.Parse("POLYGON ((480063.360512129 4419334.05832483, 480032.365382756 4419365.0534542, 480062.095404808 4419394.78347625, 480093.090534181 4419363.78834688, 480063.360512129 4419334.05832483))");
            yield return QuadObject.Parse("POLYGON ((480160.773775872 4419430.83903491, 480129.7786465 4419461.83416429, 480159.508668551 4419491.56418634, 480190.503797924 4419460.56905696, 480160.773775872 4419430.83903491))");
            yield return QuadObject.Parse("POLYGON ((480292.344937292 4419284.08658564, 480261.349807919 4419315.08171501, 480291.07982997 4419344.81173706, 480322.074959343 4419313.81660769, 480292.344937292 4419284.08658564))");
            yield return QuadObject.Parse("POLYGON ((480416.958008444 4419417.55540804, 480385.962879071 4419448.55053741, 480415.692901122 4419478.28055946, 480446.688030495 4419447.28543009, 480416.958008444 4419417.55540804))");
        }

        IEnumerable<ISpatialObject> GetGeographicObjects()
        {
            yield return QuadObject.Parse("POINT (32.764350797366 39.9068010904446)");
            yield return QuadObject.Parse("POINT (32.765605819492 39.9075442377657)");
            yield return QuadObject.Parse("POINT (32.766271294057 39.905454799222)");
            yield return QuadObject.Parse("POINT (32.7670165765993 39.9059975095629)");
            yield return QuadObject.Parse("POINT (32.7685155905578 39.9067809941256)");
            yield return QuadObject.Parse("POINT (32.7703071142642 39.9063743758516)");

            yield return QuadObject.Parse("LINESTRING (32.7639578982059 39.9070452603254, 32.7645850159663 39.9075307760428)");
            yield return QuadObject.Parse("LINESTRING (32.764929346739 39.9063465084413, 32.7649274191252 39.9069105028563)");
            yield return QuadObject.Parse("LINESTRING (32.7648193809882 39.9060557408667, 32.7655886949639 39.9060572985142)");
            yield return QuadObject.Parse("LINESTRING (32.7655036542623 39.9071338506655, 32.7662729803346 39.9071354038081)");
            yield return QuadObject.Parse("LINESTRING (32.7676739499743 39.9062893730479, 32.7676720448703 39.9068533675789)");
            yield return QuadObject.Parse("LINESTRING (32.7682547573068 39.9051568413756, 32.7682528570417 39.9057208360401)");
            yield return QuadObject.Parse("LINESTRING (32.7692915457937 39.9070104185839, 32.7692896539059 39.9075744131092)");
            yield return QuadObject.Parse("LINESTRING (32.769925313859 39.9055190759155, 32.7706946221105 39.9055205996733)");

            yield return QuadObject.Parse("POLYGON ((32.7642757332048 39.9049608219224, 32.7639123156297 39.9052392333837, 32.7642590645185 39.9055076956295, 32.7646224821193 39.9052292830945, 32.7642757332048 39.9049608219224))");
            yield return QuadObject.Parse("POLYGON ((32.7664457894209 39.9063495724996, 32.7660823732312 39.9066279906991, 32.7664291375968 39.9068964464366, 32.7667925538119 39.9066180271634, 32.7664457894209 39.9063495724996))");
            yield return QuadObject.Parse("POLYGON ((32.7675820254966 39.9072234891099, 32.7672186092542 39.9075019108282, 32.7675653824611 39.907770363153, 32.7679287987287 39.9074919403609, 32.7675820254966 39.9072234891099))");
            yield return QuadObject.Parse("POLYGON ((32.7691251165566 39.9059048784303, 32.7687617135305 39.9061833050856, 32.7691084861592 39.9064517528552, 32.7694718892103 39.9061733251262, 32.7691251165566 39.9059048784303))");
            yield return QuadObject.Parse("POLYGON ((32.7705783625068 39.9071098197446, 32.7702149589519 39.9073882508947, 32.7705617433264 39.9076566942963, 32.7709251469062 39.9073782620723, 32.7705783625068 39.9071098197446))");
        }

        class QuadObject : ISpatialObject
        {
            public QuadObject(IGeometry g)
            {
                Shape = g;
            }

            public readonly IGeometry Shape;

            public static ISpatialObject Parse(string wkt)
            {
                return new QuadObject(Geometry.Read(wkt));
            }

            public IEnvelope GetBounds()
            {
                return Shape.GetBounds();
            }
        }
    }
}
