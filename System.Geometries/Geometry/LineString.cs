//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Xml;

namespace System.Geometries
{
    internal class LineString : Geometry, ILineString
    {
        public LineString(XmlDocument doc) : base(Constants.Xml.LineString, doc)
        {
        }

        public LineString(string localName, XmlDocument doc) : base(localName, doc)
        {
        }

        public override IApplicationComponent GetComponent(IApplicationComponentDesigner designer)
        {
            return new LineStringComponent(designer, this);
        }

        public override string TypeName
        {
            get { return Constants.Xml.LineString; }
        }

        public override Dimensions GetDimension()
        {
            return Dimensions.Curve;
        }

        public override Dimensions GetBoundaryDimension()
        {
            return IsClosed() ? Dimensions.False : Dimensions.Point;
        }

        public IGeometry Offset(double distance)
        {
            throw new NotImplementedException();
        }

        public IGeometry Offset(double distance, JoinStyle joinStyle)
        {
            throw new NotImplementedException();
        }

        public override double GetDistance(ICoordinate c)
        {
            return GetSegments().Min(item => item.Distance(c));
        }

        public override double GetDistance(IGeometry other)
        {
            throw new NotImplementedException();
        }

        public override bool Contains(ICoordinate c)
        {
            return false;
        }

        public override bool Contains(IEnvelope e)
        {
            return false;
        }

        public override IGeometry MakeValid()
        {
            if (NumPoints() == 1)
            {
                return Factory.Create<IPoint>(StartPoint.Clone());
            }
            else if (NumPoints() == 2)
            {
                if (StartPoint.IsEquivalent(EndPoint))
                {
                    return Factory.Create<IPoint>(StartPoint.Clone());
                }
            }

            if (IsClosed() && !(this is LinearRing))
            {
                if (NumPoints() > 3)
                {
                    return Factory.Create<IPolygon>(Coordinates);
                }
            }

            return base.MakeValid();
        }

        public override bool IsEquivalent(IGeometry other)
        {
            var otherLine = other as LineString;

            if (otherLine.HasValue() && NumPoints() == otherLine.NumPoints())
            {
                return Coordinates.IsEquivalent(otherLine.Coordinates, ArrayComparison.Reversed);
            }

            return false;
        }

        public override Locations Locate(ICoordinate c)
        {
            if (!IsClosed() && (StartPoint.IsEquivalent(c) || EndPoint.IsEquivalent(c)))
            {
                return Locations.Boundary;
            }

            if (Coordinates.IsOnLine(c))
            {
                return Locations.Interior;
            }

            return Locations.Exterior;
        }

        protected override void OnWrite(BinaryWriter writer)
        {
            writer.Write((byte)WkbByteOrder.LittleEndian);
            writer.Write((int)GeometryType.LineString);
            base.OnWrite(writer);
        }

        public override void AppendToPath(Graphics g, GraphicsPath path, Func<ICoordinate, PointF> transform, bool raiseEvents)
        {
            if (NumPoints() == 2)
            {
                ICoordinate c1 = Coordinates.Get(0);
                ICoordinate c2 = Coordinates.Get(1);

                if (c1.IsEmpty() || c2.IsEmpty())
                {
                    return;
                }

                PointF p1 = transform(c1);
                PointF p2 = transform(c2);

                path.StartFigure();
                path.AddLine(p1, p2);

                if (raiseEvents && PointVisitorSettings.Current.Enabled)
                {
                    if (PointVisitorSettings.Current.MidPoint)
                    {
                        Coordinate.InvokeVisited(LineSegment.GetMidPoint(c1, c2), transform, true, false);
                    }

                    if (PointVisitorSettings.Current.EndPoint)
                    {
                        Coordinate.InvokeVisited(c1, p1);
                        Coordinate.InvokeVisited(c2, p2);
                    }
                }
            }
            else if (NumPoints() > 2)
            {
                GeometryExtensions.AddLines(Coordinates, g, path, transform, raiseEvents);
            }
        }

        protected override void OnDrawPath(Graphics g, GraphicsPath path, PaintStyle style)
        {
            g.TryDrawPath(style.LineStyle.GetPen(), path);
        }

        protected override void OnFillPath(Graphics g, GraphicsPath path, PaintStyle style)
        {
        }

        public override void SetValue(GeometryProperty property, object value)
        {
            switch (property)
            {
                case GeometryProperty.Angle:
                    LineSegment.SetAngle(StartPoint, EndPoint, (double)value);
                    break;
                case GeometryProperty.Length:
                    LineSegment.SetLength(StartPoint, EndPoint, (double)value);
                    break;
            }

            base.SetValue(property, value);
        }

        public override IEnumerable<PropertyDescriptor> GetProperties(IApplicationComponent component)
        {
            var readOnly = new ReadOnlyAttribute(NumPoints() > 2);

            yield return GeometryFactory.CreatePropertyDescriptor(component, GeometryProperty.Angle, readOnly);
            yield return GeometryFactory.CreatePropertyDescriptor(component, GeometryProperty.Azimuth, readOnly);
            yield return GeometryFactory.CreatePropertyDescriptor(component, GeometryProperty.Length, readOnly);
        }

        protected override IGeometry OnClone()
        {
            var c = (LineString)base.OnClone();
            c.Coordinates.Add(Coordinates.Clone());
            return c;
        }

        public override int GetHashCode()
        {
            return Hash.Get(TypeName.ToLowerInvariant(), Coordinates.GetHashCode());
        }
    }
}
