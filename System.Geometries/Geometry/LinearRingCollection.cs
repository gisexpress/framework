//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Xml;

namespace System.Geometries
{
    internal class LinearRingCollection : XmlElementCollectionBase<LinearRing>, ILinearRingCollection
    {
        public LinearRingCollection(XmlDocument document, string localName) : base(document, localName)
        {
        }

        public void BeginInit()
        {
            foreach (LinearRing ring in GetItems())
            {
                ring.BeginInit();
            }
        }

        public void EndInit()
        {
            foreach (LinearRing ring in GetItems())
            {
                ring.EndInit();
                ring.Remove();
                AppendChild(ring);
            }
        }

        public void Add(ILinearRing ring)
        {
            base.Add((LinearRing)ring);
        }

        ILinearRing ILinearRingCollection.Get(int i)
        {
            return Get(i);
        }

        public void MakeValid()
        {
            foreach (LinearRing ring in GetItems())
            {
                ring.MakeValid();
            }
        }

        IEnumerator<ILinearRing> IEnumerable<ILinearRing>.GetEnumerator()
        {
            return GetEnumerator();
        }

        public new ILinearRingCollection Clone()
        {
            var c = (ILinearRingCollection)MemberwiseClone();

            for (int i = 0; i < Count; i++)
            {
                c.Add((ILinearRing)Get(i).Clone());
            }

            return c;
        }

        public override int GetHashCode()
        {
            return Hash.Get(GetItems());
        }
    }
}
