//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Runtime.InteropServices;
using System.Xml;

namespace System.Geometries
{
    [Guid("B5A1D27C-50F7-4A53-9BCC-790D3993E5F8")]
    internal class Point : Geometry, IPoint
    {
        public Point(XmlDocument document) : base(Constants.Xml.Point, document)
        {
        }

        public Point(XmlDocument document, double x, double y) : base(Constants.Xml.Point, document)
        {
            Coordinates.Add(x, y);
        }

        public override IApplicationComponent GetComponent(IApplicationComponentDesigner designer)
        {
            if (IsEmpty())
            {
                Coordinates.Add();
            }

            return new PointComponent(designer, this);
        }

        public override bool IsRing()
        {
            return false;
        }

        public override bool IsClosed()
        {
            return true;
        }

        public override string TypeName
        {
            get { return Constants.Xml.Point; }
        }

        public ICoordinate Coordinate
        {
            get { return StartPoint; }
        }

        public override ICoordinate GetCentroid()
        {
            return Coordinate;
        }

        public override Dimensions GetDimension()
        {
            return Dimensions.Point;
        }

        public override Dimensions GetBoundaryDimension()
        {
            return Dimensions.False;
        }

        public override double GetLength()
        {
            return 0.0;
        }

        public override double GetArea()
        {
            return 0.0;
        }

        public override IEnvelope GetBounds()
        {
            if (IsEmpty())
            {
                return default(IEnvelope);
            }

            return Coordinate.GetBounds();
        }

        public override double GetDistance(ICoordinate c)
        {
            return Coordinate.Distance(c);
        }

        public override double GetDistance(IGeometry other)
        {
            return other.GetDistance(Coordinate);
        }

        public override bool Contains(ICoordinate c)
        {
            return false;
        }

        public override bool Contains(IEnvelope e)
        {
            return false;
        }

        public override bool IsEquivalent(IGeometry other)
        {
            var otherPoint = other as Point;

            if (otherPoint.HasValue())
            {
                return Coordinate.IsEquivalent(otherPoint.Coordinate);
            }

            return false;
        }

        public override Locations Locate(ICoordinate c)
        {
            return Locations.Exterior;
        }

        protected override void OnWrite(BinaryWriter writer)
        {
            writer.Write((byte)1);
            writer.Write((int)GeometryType.Point);

            Coordinate.Write(writer);
        }

        public override void AppendToPath(Graphics g, GraphicsPath path, Func<ICoordinate, PointF> transform, bool raiseEvents)
        {
            if (IsEmpty())
            {
                return;
            }

            Coordinate.AppendToPath(g, path, transform, 3f, raiseEvents);
        }

        public override void Paint(Graphics g, PaintStyle style, Func<ICoordinate, PointF> transform, bool raiseEvents)
        {
            base.Paint(g, style, transform, raiseEvents);
        }

        public override IEnumerable<ILineSegment> GetSegments()
        {
            yield break;
        }

        public override IEnumerable<PropertyDescriptor> GetProperties(IApplicationComponent component)
        {
            yield return GeometryFactory.CreatePropertyDescriptor(component, GeometryProperty.X);
            yield return GeometryFactory.CreatePropertyDescriptor(component, GeometryProperty.Y);
        }

        public override int GetHashCode()
        {
            return Hash.Get(TypeName.ToLowerInvariant(), Coordinate.GetHashCode());
        }
    }
}
