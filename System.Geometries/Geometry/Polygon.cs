//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.CoordinateSystems;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Xml;

namespace System.Geometries
{
    internal class Polygon : Geometry, IPolygon
    {
        public Polygon(XmlDocument document) : base(Constants.Xml.Polygon, document)
        {
        }

        ILinearRingCollection Outer;
        ILinearRingCollection Inner;

        public override bool IsRing()
        {
            return true;
        }

        public override void BeginInit()
        {
            if (Outer == null)
            {
                return;
            }

            Outer.BeginInit();

            if (Inner == null)
            {
                return;
            }

            Inner.BeginInit();
        }

        public override void EndInit()
        {
            Outer.EndInit();

            if (Inner == null)
            {
                return;
            }

            Inner.EndInit();
        }

        public override IApplicationComponent GetComponent(IApplicationComponentDesigner designer)
        {
            return new PolygonComponent(designer, this);
        }

        public override string TypeName
        {
            get { return Constants.Xml.Polygon; }
        }

        public override ICoordinateCollection Coordinates
        {
            get { return ExteriorRing.Coordinates; }
            set { ExteriorRing.Coordinates = value; }
        }

        public override bool IsRectangle()
        {
            if (NumPoints() == 5 && InteriorRings.Count == 0)
            {
                IEnvelope bounds = GetBounds();

                foreach (ICoordinate c in this)
                {
                    if (!(c.X.IsEquivalent(bounds.Min.X) || c.X.IsEquivalent(bounds.Max.X)))
                    {
                        return false;
                    }

                    if (!(c.Y.IsEquivalent(bounds.Min.Y) || c.Y.IsEquivalent(bounds.Max.Y)))
                    {
                        return false;
                    }
                }

                for (int n = 0; n <= 4; n++)
                {
                    ICoordinate c1 = Coordinates.Get(n);
                    ICoordinate c2 = Coordinates.Get(n);

                    if (c1.X.IsEquivalent(c2.X) && c1.Y.IsEquivalent(c2.Y) == false)
                    {
                        return false;
                    }
                }

                return true;
            }

            return false;
        }

        public ILinearRing ExteriorRing
        {
            get
            {
                return ExteriorRings.Get(0);
            }
            set
            {
                ExteriorRings.Clear();
                ExteriorRings.Add(value);
            }
        }

        public ILinearRingCollection ExteriorRings
        {
            get
            {
                Outer = (ILinearRingCollection)base[Constants.Xml.OuterBoundaryIs];

                if (Outer == null)
                {
                    AppendChild((XmlElement)(Outer = new LinearRingCollection(OwnerDocument, Constants.Xml.OuterBoundaryIs) { new LinearRing(OwnerDocument) }));
                }

                return Outer;
            }
        }

        public ILinearRingCollection InteriorRings
        {
            get
            {
                Inner = (ILinearRingCollection)base[Constants.Xml.InnerBoundaryIs];

                if (Inner == null)
                {
                    AppendChild((XmlElement)(Inner = new LinearRingCollection(OwnerDocument, Constants.Xml.InnerBoundaryIs)));
                }

                return Inner;
            }
        }

        public override int NumPoints()
        {
            return ExteriorRing.NumPoints() + InteriorRings.Sum(r => r.NumPoints());
        }

        public override double GetArea()
        {
            return ExteriorRing.GetArea() - InteriorRings.Sum(ring => ring.GetArea());
        }

        public override double GetLength()
        {
            return ExteriorRing.GetLength() + InteriorRings.Sum(ring => ring.GetLength());
        }

        public override bool Contains(ICoordinate c)
        {
            if (ExteriorRing.Contains(c))
            {
                for (int n = 0; n < InteriorRings.Count; n++)
                {
                    if (InteriorRings.Get(n).Contains(c))
                    {
                        return false;
                    }
                }

                return true;
            }

            return false;
        }

        public override bool Contains(IEnvelope e)
        {
            throw new NotImplementedException();
        }

        protected override bool IsOnLine(ICoordinate c, double tolerance)
        {
            if (ExteriorRing.Coordinates.IsOnLine(c, tolerance))
            {
                return true;
            }

            if (InteriorRings.Count > 0)
            {
                foreach (ILinearRing ring in InteriorRings)
                {
                    if (ring.Coordinates.IsOnLine(c, tolerance))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        public override IGeometry MakeValid()
        {
            Outer.MakeValid();

            if (Inner == null)
            {
                return this;
            }

            Inner.MakeValid();
            return this;
        }

        protected override ICoordinate OnCalculateCentroid()
        {
            if (InteriorRings.Count > 0)
            {
                var c = (CoordinateCollection)Coordinates;

                double x = c.CenterX;
                double y = c.CenterY;
                double z = c.CenterZ;
                double sum = c.AreaSum;

                foreach (LinearRing ring in InteriorRings)
                {
                    c = (CoordinateCollection)ring.Coordinates;

                    if (c.AreaSum.IsValid())
                    {
                        x += c.CenterX;
                        y += c.CenterY;
                        z += c.CenterZ;
                        sum += c.AreaSum;
                    }
                }

                return new Coordinate(x / sum / 3.0, y / sum / 3.0, z / sum / 3.0);
            }

            return base.OnCalculateCentroid();
        }

        protected override IGeometry OnTransform(IMathTransform transform)
        {
            var g = base.OnTransform(transform) as IPolygon;

            if (Inner == null)
            {
                return g;
            }
            
            g.InteriorRings.Clear();

            foreach (LinearRing ring in InteriorRings)
            {
                g.InteriorRings.Add(ring.Transform(transform) as ILinearRing);
            }

            return g;
        }

        public override bool Read(ITokenEnumerator e)
        {
            if (e.ReadNext('('))
            {
                if (ExteriorRing.Read(e))
                {
                    while (e.ReadNext(','))
                    {
                        var ring = new LinearRing(OwnerDocument);

                        if (ring.Read(e))
                        {
                            InteriorRings.Add(ring);
                        }
                    }

                    return true;
                }
            }

            return false;
        }

        protected override void OnWrite(BinaryWriter writer)
        {
            writer.Write((byte)WkbByteOrder.LittleEndian);
            writer.Write((int)GeometryType.Polygon);
            writer.Write(InteriorRings.Count + 1);

            ExteriorRing.Coordinates.Write(writer);

            foreach (LinearRing ring in InteriorRings)
            {
                ring.Coordinates.Write(writer);
            }
        }

        public override void AppendToPath(Graphics g, GraphicsPath path, Func<ICoordinate, PointF> transform, bool raiseEvents)
        {
            GeometryExtensions.AddLines(Coordinates, g, path, transform, raiseEvents);

            if (ExteriorRing.NumPoints() > 2)
            {
                path.CloseFigure();
            }

            foreach (LinearRing ring in InteriorRings)
            {
                ring.AppendToPath(g, path, transform, raiseEvents);
            }
        }

        public override IEnumerable<ICoordinate> GetEditableCoordinates(IApplicationComponent component)
        {
            int i = IsClosed() ? 1 : 0;

            for (int n = 0; n < ExteriorRing.NumPoints() - i; n++)
            {
                yield return ExteriorRing.Coordinates.Get(n);
            }

            foreach (LinearRing ring in InteriorRings)
            {
                for (int n = 0; n < ring.NumPoints() - 1; n++)
                {
                    yield return ring.Coordinates.Get(n);
                }
            }
        }

        public override void SetAltitude(double value, bool append)
        {
            ExteriorRing.Coordinates.SetAltitude(value, append);
            InteriorRings.ForEach(item => item.Coordinates.SetAltitude(value, append));
        }

        public override IEnumerable<ICoordinate> GetCoordinates()
        {
            foreach (ICoordinate c in ExteriorRing.Coordinates)
            {
                yield return c;
            }

            foreach (LinearRing ring in InteriorRings)
            {
                foreach (ICoordinate c in ring)
                {
                    yield return c;
                }
            }
        }

        public override void SetObjects(object[] values)
        {
            throw new NotImplementedException();
            //IEnumerator<IEnumerable<ICoordinate>> e = values.Cast<object[]>().Select(coordinates => coordinates.Cast<object[]>().Select(item => CreateCoordinate(item))).GetEnumerator();

            //if (e.MoveNext())
            //{
            //    Add(e.Current);
            //}

            //while (e.MoveNext())
            //{
            //    InteriorRings.Add(Factory.CreateLinearRing(e.Current.ToArray()));
            //}
        }

        public override bool IsEquivalent(IGeometry other)
        {
            var otherPoly = other as IPolygon;

            if (otherPoly == null)
            {
                return false;
            }

            if (ExteriorRing.IsEquivalent(otherPoly.ExteriorRing))
            {
                if (InteriorRings.Count == otherPoly.InteriorRings.Count)
                {
                    return InteriorRings.IsEquivalent(otherPoly.InteriorRings, GetHashCode, ArrayComparison.Disorderly);
                }
            }

            return false;
        }

        public override string ToText()
        {
            if (InteriorRings.Count > 0)
            {
                return string.Concat('(', ExteriorRing.ToText(), ',', InteriorRings.Select(ring => ring.ToText()).Join(","), ')');
            }

            return string.Concat('(', ExteriorRing.ToText(), ')');
        }

        public IGeometry Offset(double distance)
        {
            throw new NotImplementedException();
        }

        public IGeometry Offset(double distance, JoinStyle lineJoin)
        {
            throw new NotImplementedException();
        }

        public override Dimensions GetDimension()
        {
            return ExteriorRing.GetDimension();
        }

        public override Dimensions GetBoundaryDimension()
        {
            throw new NotImplementedException();
        }

        public override double GetDistance(ICoordinate c)
        {
            throw new NotImplementedException();
        }

        public override double GetDistance(IGeometry other)
        {
            throw new NotImplementedException();
        }

        public override Locations Locate(ICoordinate c)
        {
            return ExteriorRing.Locate(c);
        }

        public override IEnumerable<PropertyDescriptor> GetProperties(IApplicationComponent component)
        {
            return ExteriorRing.GetProperties(component);
        }

        public override int GetHashCode()
        {
            return Hash.Get(TypeName.ToLowerInvariant(), Outer.GetHashCode(), Inner == null ? 0 : Inner.GetHashCode());
        }

        protected override IGeometry OnClone()
        {
            var c = (Polygon)base.OnClone();

            c.ExteriorRing = (LinearRing)ExteriorRing.Clone();

            if (Inner == null)
            {
                return c;
            }

            c.Inner = Inner.Clone();

            return c;
        }
    }
}
