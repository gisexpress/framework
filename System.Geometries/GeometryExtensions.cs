//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace System.Geometries
{
    internal static class GeometryExtensions
    {
        const float Distance = 1F;

        public static void AddLines(this ICoordinateCollection items, Graphics g, GraphicsPath path, Func<ICoordinate, PointF> transform, bool raiseEvents)
        {
            using (IEnumerator<ICoordinate> e = items.GetEnumerator())
            {
                if (e.MoveNext())
                {
                    ICoordinate c1, c2;
                    ICoordinate previous = null;
                    PointF p1 = transform(c1 = e.Current), p2;
                    RectangleF bounds = g.VisibleClipBounds;

                    path.StartFigure();

                    if (raiseEvents && PointVisitorSettings.Current.Enabled)
                    {
                        if (PointVisitorSettings.Current.Center && items.IsClosed)
                        {
                            Coordinate.InvokeVisited(items.GetCentroid(), transform, false, true);
                        }

                        if (PointVisitorSettings.Current.EndPoint)
                        {
                            Coordinate.InvokeVisited(c1, p1);
                        }
                    }

                    bool isValidated = false;

                    while (e.MoveNext())
                    {
                        c2 = e.Current;

                        if (c2.IsEmpty() == false)
                        {
                            p2 = transform(c2);

                            if (!bounds.IsVisible(p1) && !bounds.IsVisible(p2))
                            {
                                isValidated = true;
                                bounds.Validate(ref p1);
                                bounds.Validate(ref p2);
                            }
                            else if (isValidated)
                            {
                                isValidated = false;
                                p1 = transform(previous ?? c1);
                            }

                            if (p1.Distance(p2) > Distance)
                            {
                                if (raiseEvents && PointVisitorSettings.Current.Enabled)
                                {
                                    if (PointVisitorSettings.Current.MidPoint)
                                    {
                                        Coordinate.InvokeVisited(LineSegment.GetMidPoint(c1, c2), transform, true, false);
                                    }

                                    if (PointVisitorSettings.Current.EndPoint)
                                    {
                                        Coordinate.InvokeVisited(c2, p2);
                                    }
                                }

                                path.AddLine(p1, p2);

                                p1 = p2;
                                c1 = c2;
                            }
                        }

                        previous = e.Current;
                    }
                }
            }
        }
    }
}
