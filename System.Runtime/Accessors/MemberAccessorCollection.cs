//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace System.Runtime
{
    public class MemberAccessorCollection : IEnumerable<IMemberAccessor>
    {
        public MemberAccessorCollection()
        {
        }

        public MemberAccessorCollection(IEnumerable<IMemberAccessor> members)
        {
            foreach (IMemberAccessor accessor in members)
            {
                Add(accessor);
            }
        }

        protected readonly List<IMemberAccessor> Items = new List<IMemberAccessor>();

        public int Count
        {
            get { return Items.Count; }
        }

        public int Add(IMemberAccessor member)
        {
            member.Ordinal = Items.Count;
            Items.Add(member);
            return member.Ordinal;
        }

        public int Add(PropertyInfo property)
        {
            return Add(new MemberAccessor(property));
        }

        public IMemberAccessor this[int i]
        {
            get { return Items[i]; }
        }

        public IMemberAccessor this[string name]
        {
            get { return Items.FirstOrDefault(e => e.Name == name); }
        }

        public int GetOrdinal(string name)
        {
            IMemberAccessor member = this[name];

            if (member.IsNull())
            {
                return -1;
            }

            return member.Ordinal;
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public IEnumerator<IMemberAccessor> GetEnumerator()
        {
            return Items.AsEnumerable().GetEnumerator();
        }
    }
}