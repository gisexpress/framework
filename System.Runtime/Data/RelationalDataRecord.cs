//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime;

namespace System.Data
{
    public class RelationalDataRecord : DataRecord, IRelationalDataRecord
    {
        public static IRelationalDataRecord Empty;

        static RelationalDataRecord()
        {
            Empty = new RelationalDataRecord();

            MethodGetRowEnumerator = typeof(RelationalDataRecord).GetField("RowEnumerator", BindingFlags.NonPublic | BindingFlags.Instance);
            MethodGetRowEnumeratorIndex = typeof(IRowEnumerator).GetProperty("Index").GetGetMethod();
            MethodGetParameters = typeof(IRelationalDataRecord).GetProperty("Parameters").GetGetMethod();
            MethodGetParent = typeof(IRelationalDataRecord).GetProperty("Parent").GetGetMethod();
            MethodGetRows = typeof(IRelationalDataRecord).GetProperty("Rows").GetGetMethod();
            MethodGetGroupKey = typeof(IRelationalDataRecord).GetProperty("GroupKey").GetGetMethod();
        }

        protected static readonly FieldInfo MethodGetRowEnumerator;
        protected static readonly MethodInfo MethodGetRowEnumeratorIndex;
        protected static readonly MethodInfo MethodGetParameters;
        protected static readonly MethodInfo MethodGetParent;
        protected static readonly MethodInfo MethodGetRows;
        protected static readonly MethodInfo MethodGetGroupKey;

        public RelationalDataRecord()
        {
        }

        public RelationalDataRecord(IDataTable table)
            : this(table, default(object))
        {
        }

        public RelationalDataRecord(IDataTable table, object component)
            : base(table.Name)
        {
            Table = table;
            DataSet = table.DataSet;
            HasRow = true;
            RowEnumerator = component as IRowEnumerator;
        }

        public RelationalDataRecord(IEnumerable<IDataRecord> childRows)
            : base(childRows)
        {
            IsGrouped = true;
        }

        public RelationalDataRecord(IEnumerable<IDataRecord> childRows, string groupName, object groupKey)
            : base(childRows)
        {
            IsGrouped = true;
            GroupName = groupName;
            GroupKey = groupKey;
        }

        public const string ParameterPrefix = "@";
        public const string SysParameterPrefix = "@@";
        public const string RowIdentity = SysParameterPrefix + "Fid";

        protected bool IsChild;
        protected IRelationalDataRecord ParentRow;

        protected readonly ICloneable Cloneable;
        protected readonly IRowEnumerator RowEnumerator;

        [Browsable(false)]
        public IDataSet DataSet
        {
            get;
            set;
        }

        [Browsable(false)]
        public virtual IDataTable Table
        {
            get;
            set;
        }

        public IDataParameterCollection Parameters
        {
            get;
            set;
        }

        [Browsable(false)]
        public IRelationalDataRecord Parent
        {
            get { return ParentRow; }
            set
            {
                IsChild = true;
                ParentRow = value;
            }
        }

        IDataRecord IRelationalDataRecord.Row
        {
            get { return Row; }
            set { Row = value; }
        }

        [Browsable(false)]
        public IRelationalDataRecord[] Rows
        {
            get;
            set;
        }

        [Browsable(false)]
        public bool IsJoined
        {
            get;
            set;
        }

        [Browsable(false)]
        public bool IsGrouped
        {
            get;
            set;
        }

        [Browsable(false)]
        public string GroupName
        {
            get;
            set;
        }

        [Browsable(false)]
        public object GroupKey
        {
            get;
            set;
        }

        public override int PutMemberInstructions(IInstructionEventArgs e, string name, IEnumerator<string> members, out Type returnType)
        {
            if (name.StartsWith(ParameterPrefix))
            {
                if (name.StartsWith(SysParameterPrefix))
                {
                    if (name.EqualsIgnoreCase(RowIdentity))
                    {
                        e.Generator.Emit(OpCodes.Ldarg_0);
                        e.Generator.Emit(OpCodes.Ldfld, MethodGetRowEnumerator);
                        e.Generator.Emit(OpCodes.Call, MethodGetRowEnumeratorIndex);

                        returnType = Types.Int32;
                        return 1;
                    }
                }

                var parameter = Parameters[name] as IDbDataParameter;

                if (parameter.HasValue())
                {
                    e.Generator.Emit(OpCodes.Ldarg_0);
                    e.Generator.Emit(OpCodes.Call, MethodGetParameters);
                    e.Generator.Emit(OpCodes.Ldstr, name);
                    e.Generator.Emit(OpCodes.Call, MethodCache.DataCommand.ParametersIndexer);
                    e.Generator.Emit(OpCodes.Castclass, Types.IDataParameter);
                    e.Generator.Emit(OpCodes.Call, MethodCache.DataCommand.GetParameterValue);

                    returnType = parameter.Value.GetType();
                    e.Generator.Emit(OpCodes.Unbox_Any, returnType);

                    return 1;
                }
            }

            if (IsGrouped && GroupName == name)
            {
                returnType = GroupKey.GetType();

                e.Generator.Emit(OpCodes.Ldarg_0);
                e.Generator.Emit(OpCodes.Call, MethodGetGroupKey);
                e.Generator.Emit(OpCodes.Unbox_Any, returnType);

                while (members.MoveNext())
                {
                    continue;
                }

                return 1;
            }

            if (HasRow)
            {
                int n = 0;

                if (Table.Name == members.Current)
                {
                    n++;

                    if (members.MoveNext() == false)
                    {
                        n--;
                        members.Reset();
                        members.MoveNext();
                    }
                }

                n += base.PutMemberInstructions(e, name, members, out returnType);

                if (n > 0)
                {
                    return n;
                }

                if (IsChild)
                {
                    int i;

                    if (ParentRow.Table.Name == members.Current)
                    {
                        n++;
                        members.MoveNext();
                    }

                    if ((i = ParentRow.GetOrdinal(members.Current)) >= 0)
                    {
                        e.Generator.Emit(OpCodes.Ldarg_0);
                        e.Generator.Emit(OpCodes.Call, MethodGetParent);
                        base.OnPutMemberInstructions(e, i, returnType = ParentRow.GetFieldType(i));
                        return n + 1;
                    }
                }
            }

            if (IsJoined)
            {
                int n = 0;

                foreach (IRelationalDataRecord r in Rows)
                {
                    if (r.HasValue())
                    {
                        int i, j = 0;

                        if (r.Table.Name == members.Current)
                        {
                            j++;
                            members.MoveNext();
                        }

                        if ((i = r.GetOrdinal(members.Current)) >= 0)
                        {
                            e.Generator.Emit(OpCodes.Ldarg_0);
                            e.Generator.Emit(OpCodes.Call, MethodGetRows);
                            e.Generator.Emit(OpCodes.Ldc_I4, n);
                            e.Generator.Emit(OpCodes.Ldelem_Ref);
                            base.OnPutMemberInstructions(e, i, returnType = r.GetFieldType(i));
                            return j + 1;
                        }
                    }

                    n++;
                }
            }

            throw new ExpressionParserException("Member '{0}' not found.".FormatInvariant(name));
            //returnType = default(Type);
            //return 0;
        }

        public override object this[int i]
        {
            get { return GetPropertyValue(GetName(i)); }
        }

        public override object this[string name]
        {
            get { return GetPropertyValue(name); }
        }

        public override object GetPropertyValue(string name)
        {
            if (IsJoined)
            {
                if (name.Contains("."))
                {
                    using (IEnumerator<string> e = name.SplitWithoutEmptyEntries().GetEnumerator())
                    {
                        if (e.MoveNext())
                        {
                            if (Table.Name == e.Current)
                            {
                                if (e.MoveNext())
                                {
                                    return base.GetPropertyValue(e.Current);
                                }
                            }
                            else
                            {
                                IRelationalDataRecord r = Rows.First(item => item.Table.Name == e.Current);

                                if (e.MoveNext())
                                {
                                    return r[e.Current];
                                }
                            }
                        }
                    }
                }
            }

            return base.GetPropertyValue(name);
        }

        public IRelationalDataRecord Clone()
        {
            IRelationalDataRecord c = MemberwiseClone();

#if DEBUG
            int numFields = c.FieldCount;
#endif
            c.Row = Row.CloneSafely();
#if DEBUG
            Debug.Assert(c.FieldCount == numFields);
#endif

            return c;
        }

        public new IRelationalDataRecord MemberwiseClone()
        {
            return (IRelationalDataRecord)base.MemberwiseClone();
        }
    }
}
