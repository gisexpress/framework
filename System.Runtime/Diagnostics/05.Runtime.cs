//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Diagnostics;
using System.IO.Runtime;
using System.Linq;
using System.Reflection;
using System.Runtime;

namespace System.Data.Sqn.Diagnostics
{
    internal partial class UnitTest
    {
        [DisplayName("005.Runtime Evaluation")]
        public class Runtime : UnitBase
        {
            public string Name
            {
                get { return string.Empty; }
            }

            [MTAThread]
            public int Parse()
            {
                Trace.Assert(ExpressionParser.Parse("[Quantity] * [UnitPrice] * (1 - [BonusAmount])").Equals("Quantity", '*', "UnitPrice", '*', '(', 1, '-', "BonusAmount", ')'));
                Trace.Assert(ExpressionParser.Parse("[FirstName] + ' ' + [LastName]").Equals("FirstName", '+', " ", '+', "LastName"));
                Trace.Assert(ExpressionParser.Parse("[Country] == 'USA'").Equals("Country", '=', '=', "USA"));
                Trace.Assert(ExpressionParser.Parse("#8/16/1994#").Equals(new DateTime(1994, 8, 16)));
                Trace.Assert(ExpressionParser.Parse("[OrderDate] > #8/16/1994# AND [Quantity] < 20").Equals("OrderDate", '>', new DateTime(1994, 8, 16), "AND", "Quantity", '<', 20));

                return 1;
            }

            [MTAThread]
            public int Eval()
            {
                Trace.Assert(Equals(Evaluator.Eval("1 And 1"), true));
                Trace.Assert(Equals(Evaluator.Eval("1 And 0"), false));
                Trace.Assert(Equals(Evaluator.Eval("0 And 1"), false));
                Trace.Assert(Equals(Evaluator.Eval("0 And 0"), false));

                Trace.Assert(Equals(Evaluator.Eval("1 Or 1"), true));
                Trace.Assert(Equals(Evaluator.Eval("1 Or 0"), true));
                Trace.Assert(Equals(Evaluator.Eval("0 Or 1"), true));
                Trace.Assert(Equals(Evaluator.Eval("0 Or 0"), false));

                Trace.Assert(Equals(Evaluator.Eval("1 And 0 Or 1 Or 0"), true));
                Trace.Assert(Equals(Evaluator.Eval("(1 And 0) Or (1 Or 0)"), true));

                Trace.Assert(Equals(Evaluator.Eval("true And true"), true));
                Trace.Assert(Equals(Evaluator.Eval("true And true And false"), false));
                Trace.Assert(Equals(Evaluator.Eval("true And true Or false"), true));
                Trace.Assert(Equals(Evaluator.Eval("false Or true Or false"), true));

                Trace.Assert(Equals(Evaluator.Eval("0"), 0));
                Trace.Assert(Equals(Evaluator.Eval("1"), 1));
                Trace.Assert(Equals(Evaluator.Eval("-1"), -1));
                Trace.Assert(Equals(Evaluator.Eval("3.33"), 3.33));
                Trace.Assert(Equals(Evaluator.Eval("-3.33"), -3.33));
                Trace.Assert(Equals(Evaluator.Eval("55.5 % 5"), 55.5 % 5));
                Trace.Assert(Equals(Evaluator.Eval("55 % .75"), 55 % .75));

                Trace.Assert(Equals(Evaluator.Eval("22 + 33"), 22 + 33));
                Trace.Assert(Equals(Evaluator.Eval("22 + 33.0d"), 22 + 33.0d));
                Trace.Assert(Equals(Evaluator.Eval("22 * 33.0f"), 22 * 33.0f));
                Trace.Assert(Equals(Evaluator.Eval("22 + 33.0m"), 22 + 33.0m));
                Trace.Assert(Equals(Evaluator.Eval("33 / 11"), 33 / 11));
                Trace.Assert(Equals(Evaluator.Eval("33 - 11"), 33 - 11));

                Trace.Assert(Equals(Evaluator.Eval("(1 = 1) = true"), true));
                Trace.Assert(Equals(Evaluator.Eval("(1 <> 1) = false"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 = 33"), true));
                Trace.Assert(Equals(Evaluator.Eval("Not 33 <> 33"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 = 33.0f"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 = 33.0d"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 = 33.0m"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 = 33l"), true));
                Trace.Assert(Equals(Evaluator.Eval("'33' = '33'"), true));
                //Trace.Assert(Equals(Evaluator.Eval("33 = '33'"), true));

                Trace.Assert(Equals(Evaluator.Eval("33 <> 11"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 <> 11m"), true));
                Trace.Assert(Equals(Evaluator.Eval("33m <> 11"), true));

                Trace.Assert(Equals(Evaluator.Eval("33 > 11"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 > 11m"), true));
                Trace.Assert(Equals(Evaluator.Eval("33m > 11"), true));
                Trace.Assert(Equals(Evaluator.Eval("'10' > '1'"), true));

                Trace.Assert(Equals(Evaluator.Eval("11 < 33"), true));
                Trace.Assert(Equals(Evaluator.Eval("11 < 33m"), true));
                Trace.Assert(Equals(Evaluator.Eval("11m < 33"), true));
                Trace.Assert(Equals(Evaluator.Eval("'1' < '10'"), true));

                Trace.Assert(Equals(Evaluator.Eval("11 <= 33"), true));
                Trace.Assert(Equals(Evaluator.Eval("11 <= 33m"), true));
                Trace.Assert(Equals(Evaluator.Eval("11m <= 33"), true));
                Trace.Assert(Equals(Evaluator.Eval("'1' <= '10'"), true));

                Trace.Assert(Equals(Evaluator.Eval("33 >= 11"), true));
                Trace.Assert(Equals(Evaluator.Eval("33 >= 11m"), true));
                Trace.Assert(Equals(Evaluator.Eval("33m >= 11"), true));
                Trace.Assert(Equals(Evaluator.Eval("'10' >= '1'"), true));

                Trace.Assert(Equals(Evaluator.Eval("1 < 1 And 1 < 2"), false));
                Trace.Assert(Equals(Evaluator.Eval("1 < 1 Or 1 < 2"), true));
                Trace.Assert(Equals(Evaluator.Eval("1 = 1 And 1 > 2 Or 1 <> 3"), true));
                Trace.Assert(Equals(Evaluator.Eval("3 * 3 = 9 And 9 = 3 * 3"), true));
                Trace.Assert(Equals(Evaluator.Eval("3 * 3 = 9 And 3 * 3 = 3 * 3"), true));
                Trace.Assert(Equals(Evaluator.Eval("3 * 3 = 3 * 3 And 3 * 3 = 3 * 3"), true));

                Trace.Assert(Equals(Evaluator.Eval("'Sample Text' Like '*t'"), true));
                Trace.Assert(Equals(Evaluator.Eval("'Sample Text' Like '*amp*'"), true));
                Trace.Assert(Equals(Evaluator.Eval("'Sample Text' Like 'a*'"), false));
                Trace.Assert(Equals(Evaluator.Eval("'Sample Text' Like ''"), false));

                Trace.Assert(Equals(Evaluator.Eval("'Sample Text' iLike 's*'"), true));
                Trace.Assert(Equals(Evaluator.Eval("'Sample Text' iLike '*te_t'"), true));

                Trace.Assert(Equals(Evaluator.Eval("~5"), -6));
                Trace.Assert(Equals(Evaluator.Eval("~5 * -6"), ~5 * -6));
                Trace.Assert(Equals(Evaluator.Eval("17 & 24"), 17 & 24));
                Trace.Assert(Equals(Evaluator.Eval("17 | 24"), 17 | 24));

                Trace.Assert(Equals(Evaluator.Eval("1 << 5"), 1 << 5));
                Trace.Assert(Equals(Evaluator.Eval("1 << 6"), 1 << 6));

                Trace.Assert(Equals(Evaluator.Eval("5 >> 1"), 5 >> 1));
                Trace.Assert(Equals(Evaluator.Eval("-14 >> 2"), -14 >> 2));

                Trace.Assert(Equals(Evaluator.Eval("2 + 3 * 4"), 2 + 3 * 4));
                Trace.Assert(Equals(Evaluator.Eval("(2 + 3) * 4"), (2 + 3) * 4));
                Trace.Assert(Equals(Evaluator.Eval("10 - 4 - 2"), 10 - 4 - 2));
                Trace.Assert(Equals(Evaluator.Eval("10 - (4 - 2)"), 10 - (4 - 2)));
                Trace.Assert(Equals(Evaluator.Eval("12 - (6 - (4 - 2))"), 12 - (6 - (4 - 2))));
                Trace.Assert(Equals(Evaluator.Eval("12 / 3 + 3"), 12 / 3 + 3));
                Trace.Assert(Equals(Evaluator.Eval("12 / (3 + 3)"), 12 / (3 + 3)));
                Trace.Assert(Equals(Evaluator.Eval("2 ^ 3 * 3"), 2 ^ 3 * 3));
                Trace.Assert(Equals(Evaluator.Eval("2 ^ (3 * 3)"), 2 ^ (3 * 3)));
                Trace.Assert(Equals(Evaluator.Eval("12 / 2 * 3"), 12 / 2 * 3));
                Trace.Assert(Equals(Evaluator.Eval("12 / 2 / 3"), 12 / 2 / 3));
                Trace.Assert(Equals(Evaluator.Eval("18 / 3 ^ 2"), 18 / 3 ^ 2));
                Trace.Assert(Equals(Evaluator.Eval("(18 / 3) ^ 2"), (18 / 3) ^ 2));

                Trace.Assert(Equals(Evaluator.Eval("Max(18, 33)"), Math.Max(18, 33)));

                Trace.Assert(Equals(Evaluator.Eval("'A' = 'A'"), true));
                Trace.Assert(Equals(Evaluator.Eval("'A' = 'a'.ToUpper"), true));
                Trace.Assert(Equals(Evaluator.Eval("'A' = 'a'.ToUpper()"), true));
                Trace.Assert(Equals(Evaluator.Eval("'AbC' iLike 'abc'"), true));
                Trace.Assert(Equals(Evaluator.Eval("'AbC' + 'abc'"), "AbCabc"));
                Trace.Assert(Equals(Evaluator.Eval("AbC + abc"), "AbCabc"));

                Trace.Assert(Equals(Evaluator.Eval("#8/16/1994#"), new DateTime(1994, 8, 16)));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1994# =  #8/16/1994#"), true));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1995# >  #1/16/1994#"), true));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1996# >= #1/16/1994#"), true));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1993# <  #1/16/1994#"), true));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1992# <= #1/16/1994#"), true));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1992# <= #1/16/1994#"), true));

                Trace.Assert(Equals(Evaluator.Eval("#8/16/1994#.Year"), 1994));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1994#.AddYears(16).Year"), 2010));
                Trace.Assert(Equals(Evaluator.Eval("#8/16/1994#.Equals(#8/16/1994#)"), true));

                Trace.Assert(Equals(Evaluator.Eval("GetDate()"), DateTime.Now));
                Trace.Assert(Equals(Evaluator.Eval("GetDate().Year"), DateTime.Now.Year));

                return 1;
            }

            [MTAThread]
            public int EvalComponent()
            {
                var component = new Component();

                Trace.Assert(Equals(Evaluator.Eval("DBNull Is Null", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DBNull Is Not Null", component), false));
                Trace.Assert(Equals(Evaluator.Eval("Not DBNull Is Not Null", component), true));
                Trace.Assert(Equals(Evaluator.Eval("Not (DBNull Is Not Null)", component), true));

                Trace.Assert(Equals(Evaluator.Eval("Int32 Between 1 And 2", component), true));
                Trace.Assert(Equals(Evaluator.Eval("Int32 Between (1, 2)", component), true));
                Trace.Assert(Equals(Evaluator.Eval("Int32 In (1)", component), true));
                Trace.Assert(Equals(Evaluator.Eval("Int32 In (2, 3)", component), false));
                Trace.Assert(Equals(Evaluator.Eval("Int32 In (1, 2, 3)", component), true));

                Trace.Assert(Equals(Evaluator.Eval("String.Substring(0, 6)", component), "Sample"));
                Trace.Assert(Equals(Evaluator.Eval("String.Substring(7).Equals('Text')", component), true));
                Trace.Assert(Equals(Evaluator.Eval("String.Substring(6).EndsWith('Text')", component), true));
                Trace.Assert(Equals(Evaluator.Eval("String.Substring(7).ToUpper.Equals('TEXT')", component), true));
                Trace.Assert(Equals(Evaluator.Eval("String.Substring(7).ToUpper().Equals('TEXT')", component), true));

                Trace.Assert(Equals(Evaluator.Eval("GetDate()", component), DateTime.Now));
                Trace.Assert(Equals(Evaluator.Eval("GetDate().Year", component), DateTime.Now.Year));

                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year >= DateTime.Year - 1", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year <= DateTime.Year + 1", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year >= DateTime.Year - 1 And DateTime.Year <= DateTime.Year + 1", component), true));

                Trace.Assert(Equals(ExpressionOperator.Parse("DateTime.Now.AddYears(1).Date.AddYears(2)").LegacyToString(), "DateTime.Now.AddYears(1).Date.AddYears(2)"));
                Trace.Assert(Equals(ExpressionOperator.Parse("DateTime.Year Not Between (DateTime.Year + 1, DateTime.Year - 1)").LegacyToString(), "Not DateTime.Year Between(DateTime.Year + 1, DateTime.Year - 1)"));
                Trace.Assert(Equals(ExpressionOperator.Parse("Not DateTime.Year Between (DateTime.Year - 5, DateTime.Year - 10)").LegacyToString(), "Not DateTime.Year Between(DateTime.Year - 5, DateTime.Year - 10)"));

                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year", component), DateTime.Now.Year));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year In (DateTime.Year - 1, DateTime.Year, DateTime.Year + 1)", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Not In (DateTime.Year - 1, DateTime.Year, DateTime.Year + 1)", component), false));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Between (DateTime.Year - 1, DateTime.Year + 1)", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Between (DateTime.Year + 1, DateTime.Year - 1)", component), false));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Not Between (DateTime.Year + 1, DateTime.Year - 1)", component), true));
                Trace.Assert(Equals(Evaluator.Eval("Not DateTime.Year Between (DateTime.Year - 5, DateTime.Year - 10)", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Between DateTime.Year - 1 And DateTime.Year + 1", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Between DateTime.Year + 1 And DateTime.Year - 1", component), false));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Not Between DateTime.Year + 1 And DateTime.Year - 1", component), true));

                Trace.Assert(Equals(Evaluator.Eval("DateTime.AddYears(100).AddYears(66).Year", component), DateTime.Now.AddYears(100).AddYears(66).Year));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Between DateTime.Year - 1 And DateTime.Year + 1 Or DateTime.Year Between DateTime.Year / 2 And DateTime.Year * 2", component), true));
                Trace.Assert(Equals(Evaluator.Eval("DateTime.Year Between (DateTime.Year - 1) And (DateTime.Year + 1) Or DateTime.Year Between (DateTime.Year / 2) And (DateTime.Year * 2) + 2", component), true));
                Trace.Assert(Equals(Evaluator.Eval("(DateTime.Year Between (DateTime.Year - 1) And (DateTime.Year + 1)) Or DateTime.Year Between (DateTime.Year / 2) And ((DateTime.Year * 2) + 2)", component), true));

                return 1;
            }

            [MTAThread]
            public int ParseSql()
            {
                ValidateExpression(@"Create Database Northwind FileName='C:\Test.sqn',PageSize=1024MB");
                ValidateExpression("Drop Database Northwind");

                ValidateExpression("Create Table Products (ProductID int Not Null, ProductName string, SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
                ValidateExpression("Create Table Products (ProductID int Primary Key, ProductName string, SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
                ValidateExpression("Create Table Products (ProductID int Identity(1, 1) Primary Key, ProductName string, SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
                ValidateExpression("Create Table Products (ProductID int Identity(1, 1) Primary Key, ProductName string(50), SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");

                ValidateExpression("Create Primary Index PK_Products On Products (ProductID)");
                ValidateExpression("Create Unique Index UK_Products On Products (SupplierID, CategoryID)");
                ValidateExpression("Create Index IX_Products On Products (SupplierID, CategoryID)");

                ValidateExpression("Alter Table Products Add Country string(50)");
                ValidateExpression("Alter Table Products Add Country string(50), City string(50)");
                ValidateExpression("Alter Table Products Add Country string(50) Not Null, City string(50) Null");

                ValidateExpression("Alter Table Products Alter Column Country int");
                ValidateExpression("Alter Table Products Alter Column Country int Null, City int Null");

                ValidateExpression("Alter Table Products Drop Column Country");
                ValidateExpression("Alter Table Products Drop Column Country, City");

                ValidateExpression("Insert Into Products (ProductID, ProductName) Values (1, 'Chai')");
                ValidateExpression("Insert Into Products (ProductID, ProductName) Values (@ProductID, @ProductName)");
                ValidateExpression("Insert Into ProductsBackup Select * From Products");

                ValidateExpression("Update Products Set Discontinued = 0");
                ValidateExpression("Update Products Set ProductName = 'Chai', QuantityPerUnit = '10 boxes x 20 bags', UnitPrice = 18, Discontinued = 0 Where ProductID = 1");
                ValidateExpression("Update Products Set ProductName = @ProductName, QuantityPerUnit = @QuantityPerUnit, UnitPrice = @UnitPrice, Discontinued = @Discontinued Where ProductID = @ProductID");

                ValidateExpression("Delete From Products Where Discontinued = 0");
                ValidateExpression("Delete From Products Where Discontinued = @Discontinued");

                ValidateExpression("Drop Table Products");
                ValidateExpression("Drop Index PK_Products On Products");

                return 1;
            }

            protected IExpressionOperator ValidateExpression(string expression)
            {
                IExpressionOperator o = ExpressionOperator.Parse(expression);
                Trace.Assert(expression == o.LegacyToString());
                return o;
            }

            protected void ValidateSelect(string expression, params object[] values)
            {
                ValidateSelect(expression, default(SampleData.NorthwindDatabase), values);
            }

            protected void ValidateSelect(string expression, SampleData.NorthwindDatabase component, params object[] values)
            {
                int count;
                IExpressionOperator o = ValidateExpression(expression);
                IEnumerable<IDataRecord> e = Execute(o, component, out count);

                using (IEnumerator<IDataRecord> source = e.GetEnumerator())
                {
                    if (!source.MoveNext())
                    {
                        Trace.Assert(false);
                    }

                    for (int n = 0; n < values.Length; n++)
                    {
                        object a = source.Current[n];
                        object b = values[n];

                        if (a != b)
                        {
                            Trace.Assert(false);
                        }
                    }

                    if (source.MoveNext())
                    {
                        Trace.Assert(false);
                    }
                }
            }

            protected void ValidateSelect(string expression, SampleData.NorthwindDatabase component, IEnumerable<IDataRecord> other)
            {
                int count;
                IExpressionOperator o = ValidateExpression(expression);
                IEnumerable<IDataRecord> e = Execute(o, component, out count);
                Compare(e, other, count);
            }

            protected IEnumerable<IDataRecord> Execute(IExpressionOperator o, object component, out int count)
            {
                IEnumerable<IDataRecord> e;
                Stopwatch watch = Stopwatch.StartNew();

                watch.Start();
                e = (IEnumerable<IDataRecord>)(component.IsNull() ? o.Evaluate() : o.Evaluate(component));
                count = e.Count();
                watch.Stop();
                "{0} : {1} row(s), {2} sec {3} msec".FormatInvariant(o.LegacyToString(), count, watch.Elapsed.Seconds, watch.Elapsed.Milliseconds).Print();

                return e;
            }

            protected void ExecuteNonQuery(DbCommand command, string commandText)
            {
                using (Stopwatch.StartNew().Print(string.Concat("ExecuteNonQuery:", commandText)))
                {
                    command.CommandText = commandText;
                    command.ExecuteNonQuery();
                }
            }

            protected DbDataReader ExecuteReader(DbCommand command, string commandText, out int count)
            {
                Stopwatch watch = Stopwatch.StartNew();

                count = 0;
                command.CommandText = commandText;

                using (DbDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        count++;
                    }
                }

                watch.Stop();

                if (watch.Elapsed.Milliseconds > 0)
                {
                    "ExecuteReader: {0} : {1} row(s), {2} sec {3} msec".FormatInvariant(commandText, count, watch.Elapsed.Seconds, watch.Elapsed.Milliseconds).Print();
                }

                return command.ExecuteReader();
            }

            protected void Compare(DbDataReader reader, IEnumerable<IDataRecord> other, int count)
            {
                using (reader)
                {
                    Compare(reader.Cast<IDataRecord>(), other, count);
                }
            }

            protected void Compare(DbDataReader reader, IEnumerable<DataHashRecord> other, int count)
            {
                using (reader)
                {
                    Compare(reader.Cast<IDataRecord>(), other.Cast<IDataRecord>(), count);
                }
            }

            protected void Compare(DbDataReader reader, IEnumerable<IRelationalDataRecord> other, int count)
            {
                using (reader)
                {
                    Compare(reader.Cast<IDataRecord>(), other.Cast<IDataRecord>(), count);
                }
            }

            protected void Compare(DbDataReader reader, IEnumerable<RelationalDataRecord> other, int count)
            {
                using (reader)
                {
                    Compare(reader.Cast<IDataRecord>(), other.Cast<IDataRecord>(), count);
                }
            }

            protected void Compare(IEnumerable<IDataRecord> e, IEnumerable<IDataRecord> other, int count)
            {
                if (count != other.Count())
                {
                    Trace.Fail("Comparison failed, number of records does not match.");
                    return;
                }

                using (IEnumerator<IDataRecord> source = e.GetEnumerator())
                {
                    using (IEnumerator<IDataRecord> target = other.GetEnumerator())
                    {
                        string name;

                        while (true)
                        {
                            if (target.MoveNext())
                            {
                                Trace.Assert(source.MoveNext());
                            }
                            else
                            {
                                Trace.Assert(source.MoveNext() == false);
                                break;
                            }

                            if (source.Current.IsNotNull())
                            {
                                Trace.Assert(source.Current.FieldCount > 0);

                                for (int n = 0; n < source.Current.FieldCount; n++)
                                {
                                    name = source.Current.GetName(n);

                                    object a = source.Current[name];
                                    object b = target.Current[name];

                                    if (Equals(a, b))
                                    {
                                        continue;
                                    }

                                    Trace.Fail("Comparison failed, values of field does not match.");
                                    return;
                                }
                            }
                        }
                    }

                    Trace.Assert(source.MoveNext() == false);
                }
            }

            [Obfuscation(Exclude = true, ApplyToMembers = true)]
            public class Component
            {
                public bool Boolean { get { return true; } }
                public byte Byte { get { return 1; } }
                public sbyte SByte { get { return 1; } }
                public char Char { get { return '1'; } }
                public short Int16 { get { return 1; } }
                public ushort UInt16 { get { return 1; } }
                public int Int32 { get { return 1; } }
                public uint UInt32 { get { return 1; } }
                public long Int64 { get { return 1; } }
                public ulong UInt64 { get { return 1; } }
                public float Single { get { return 1; } }
                public double Double { get { return 1; } }
                public decimal Decimal { get { return 1; } }
                public DateTime DateTime { get { return DateTime.Now; } }
                public string String { get { return "Sample Text"; } }
                public object DBNull { get { return Convert.DBNull; } }
            }
        }
    }
}