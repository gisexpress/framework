//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.IO;
using System.IO.Runtime;
using System.Linq;
using System.Reflection;
using System.Runtime.IO;

namespace System.Runtime.Diagnostics
{
    [Obfuscation(Exclude = true)]
    public class EvaluatorTest : IUnitTest
    {
        public int Priority
        {
            get { return 1; }
        }

        public void Run()
        {
            string path = Path.GetTempFileName();

            try
            {
                File.Move(path, path = Path.ChangeExtension(path, "SQN"));

                Parse();
                Eval();
                EvalComponent();
                ParseSql();
                SqlEngine(path);
            }
            finally
            {
                File.Delete(path);
            }
        }

        public object Instructions(IRelationalDataRecord[] rows)
        {
            return rows[5];
        }

        public string Name
        {
            get { return string.Empty; }
        }

        void Parse()
        {
            var method = default(MethodInfo);

            //method = Types.Decimal.GetMethods().Where(e => e.IsSpecialName && e.Name.Contains("GreaterThanOrEqual")).FirstOrDefault();
            //method = Types.Decimal.GetMethods().Where(e => e.IsSpecialName && e.Name.Contains("Implicit") && e.GetParameters()[0].ParameterType == Types.Int16).FirstOrDefault();

            var reader = new MethodBodyReader(method ?? GetType().GetMethod("Instructions"));

            string codes = reader.GetBodyCode();

            Debug.Assert(ExpressionParser.Parse("[Quantity] * [UnitPrice] * (1 - [BonusAmount])").Equals("Quantity", '*', "UnitPrice", '*', '(', 1, '-', "BonusAmount", ')'));
            Debug.Assert(ExpressionParser.Parse("[FirstName] + ' ' + [LastName]").Equals("FirstName", '+', " ", '+', "LastName"));
            Debug.Assert(ExpressionParser.Parse("[Country] == 'USA'").Equals("Country", '=', '=', "USA"));
            Debug.Assert(ExpressionParser.Parse("#8/16/1994#").Equals(new DateTime(1994, 8, 16)));
            Debug.Assert(ExpressionParser.Parse("[OrderDate] > #8/16/1994# AND [Quantity] < 20").Equals("OrderDate", '>', new DateTime(1994, 8, 16), "AND", "Quantity", '<', 20));
        }

        void Eval()
        {
            if (LicenseManager.IsLicensed(typeof(Evaluator)))
            {
                Debug.Assert(Equals(Evaluator.Eval("1 And 1"), true));
                Debug.Assert(Equals(Evaluator.Eval("1 And 0"), false));
                Debug.Assert(Equals(Evaluator.Eval("0 And 1"), false));
                Debug.Assert(Equals(Evaluator.Eval("0 And 0"), false));

                Debug.Assert(Equals(Evaluator.Eval("1 Or 1"), true));
                Debug.Assert(Equals(Evaluator.Eval("1 Or 0"), true));
                Debug.Assert(Equals(Evaluator.Eval("0 Or 1"), true));
                Debug.Assert(Equals(Evaluator.Eval("0 Or 0"), false));

                Debug.Assert(Equals(Evaluator.Eval("1 And 0 Or 1 Or 0"), true));
                Debug.Assert(Equals(Evaluator.Eval("(1 And 0) Or (1 Or 0)"), true));

                Debug.Assert(Equals(Evaluator.Eval("true And true"), true));
                Debug.Assert(Equals(Evaluator.Eval("true And true And false"), false));
                Debug.Assert(Equals(Evaluator.Eval("true And true Or false"), true));
                Debug.Assert(Equals(Evaluator.Eval("false Or true Or false"), true));

                Debug.Assert(Equals(Evaluator.Eval("0"), 0));
                Debug.Assert(Equals(Evaluator.Eval("1"), 1));
                Debug.Assert(Equals(Evaluator.Eval("-1"), -1));
                Debug.Assert(Equals(Evaluator.Eval("3.33"), 3.33));
                Debug.Assert(Equals(Evaluator.Eval("-3.33"), -3.33));
                Debug.Assert(Equals(Evaluator.Eval("55.5 % 5"), 55.5 % 5));
                Debug.Assert(Equals(Evaluator.Eval("55 % .75"), 55 % .75));

                Debug.Assert(Equals(Evaluator.Eval("22 + 33"), 22 + 33));
                Debug.Assert(Equals(Evaluator.Eval("22 + 33.0d"), 22 + 33.0d));
                Debug.Assert(Equals(Evaluator.Eval("22 * 33.0f"), 22 * 33.0f));
                Debug.Assert(Equals(Evaluator.Eval("22 + 33.0m"), 22 + 33.0m));
                Debug.Assert(Equals(Evaluator.Eval("33 / 11"), 33 / 11));
                Debug.Assert(Equals(Evaluator.Eval("33 - 11"), 33 - 11));

                Debug.Assert(Equals(Evaluator.Eval("(1 = 1) = true"), true));
                Debug.Assert(Equals(Evaluator.Eval("(1 <> 1) = false"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 = 33"), true));
                Debug.Assert(Equals(Evaluator.Eval("Not 33 <> 33"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 = 33.0f"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 = 33.0d"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 = 33.0m"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 = 33l"), true));
                Debug.Assert(Equals(Evaluator.Eval("'33' = '33'"), true));
                //Debug.Assert(Equals(Evaluator.Eval("33 = '33'"), true));

                Debug.Assert(Equals(Evaluator.Eval("33 <> 11"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 <> 11m"), true));
                Debug.Assert(Equals(Evaluator.Eval("33m <> 11"), true));

                Debug.Assert(Equals(Evaluator.Eval("33 > 11"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 > 11m"), true));
                Debug.Assert(Equals(Evaluator.Eval("33m > 11"), true));
                Debug.Assert(Equals(Evaluator.Eval("'10' > '1'"), true));

                Debug.Assert(Equals(Evaluator.Eval("11 < 33"), true));
                Debug.Assert(Equals(Evaluator.Eval("11 < 33m"), true));
                Debug.Assert(Equals(Evaluator.Eval("11m < 33"), true));
                Debug.Assert(Equals(Evaluator.Eval("'1' < '10'"), true));

                Debug.Assert(Equals(Evaluator.Eval("11 <= 33"), true));
                Debug.Assert(Equals(Evaluator.Eval("11 <= 33m"), true));
                Debug.Assert(Equals(Evaluator.Eval("11m <= 33"), true));
                Debug.Assert(Equals(Evaluator.Eval("'1' <= '10'"), true));

                Debug.Assert(Equals(Evaluator.Eval("33 >= 11"), true));
                Debug.Assert(Equals(Evaluator.Eval("33 >= 11m"), true));
                Debug.Assert(Equals(Evaluator.Eval("33m >= 11"), true));
                Debug.Assert(Equals(Evaluator.Eval("'10' >= '1'"), true));

                Debug.Assert(Equals(Evaluator.Eval("1 < 1 And 1 < 2"), false));
                Debug.Assert(Equals(Evaluator.Eval("1 < 1 Or 1 < 2"), true));
                Debug.Assert(Equals(Evaluator.Eval("1 = 1 And 1 > 2 Or 1 <> 3"), true));
                Debug.Assert(Equals(Evaluator.Eval("3 * 3 = 9 And 9 = 3 * 3"), true));
                Debug.Assert(Equals(Evaluator.Eval("3 * 3 = 9 And 3 * 3 = 3 * 3"), true));
                Debug.Assert(Equals(Evaluator.Eval("3 * 3 = 3 * 3 And 3 * 3 = 3 * 3"), true));

                Debug.Assert(Equals(Evaluator.Eval("'Sample Text' Like '*t'"), true));
                Debug.Assert(Equals(Evaluator.Eval("'Sample Text' Like '*amp*'"), true));
                Debug.Assert(Equals(Evaluator.Eval("'Sample Text' Like 'a*'"), false));
                Debug.Assert(Equals(Evaluator.Eval("'Sample Text' Like ''"), false));

                Debug.Assert(Equals(Evaluator.Eval("'Sample Text' iLike 's*'"), true));
                Debug.Assert(Equals(Evaluator.Eval("'Sample Text' iLike '*te_t'"), true));

                Debug.Assert(Equals(Evaluator.Eval("~5"), -6));
                Debug.Assert(Equals(Evaluator.Eval("~5 * -6"), ~5 * -6));
                Debug.Assert(Equals(Evaluator.Eval("17 & 24"), 17 & 24));
                Debug.Assert(Equals(Evaluator.Eval("17 | 24"), 17 | 24));

                Debug.Assert(Equals(Evaluator.Eval("1 << 5"), 1 << 5));
                Debug.Assert(Equals(Evaluator.Eval("1 << 6"), 1 << 6));

                Debug.Assert(Equals(Evaluator.Eval("5 >> 1"), 5 >> 1));
                Debug.Assert(Equals(Evaluator.Eval("-14 >> 2"), -14 >> 2));

                Debug.Assert(Equals(Evaluator.Eval("2 + 3 * 4"), 2 + 3 * 4));
                Debug.Assert(Equals(Evaluator.Eval("(2 + 3) * 4"), (2 + 3) * 4));
                Debug.Assert(Equals(Evaluator.Eval("10 - 4 - 2"), 10 - 4 - 2));
                Debug.Assert(Equals(Evaluator.Eval("10 - (4 - 2)"), 10 - (4 - 2)));
                Debug.Assert(Equals(Evaluator.Eval("12 - (6 - (4 - 2))"), 12 - (6 - (4 - 2))));
                Debug.Assert(Equals(Evaluator.Eval("12 / 3 + 3"), 12 / 3 + 3));
                Debug.Assert(Equals(Evaluator.Eval("12 / (3 + 3)"), 12 / (3 + 3)));
                Debug.Assert(Equals(Evaluator.Eval("2 ^ 3 * 3"), 2 ^ 3 * 3));
                Debug.Assert(Equals(Evaluator.Eval("2 ^ (3 * 3)"), 2 ^ (3 * 3)));
                Debug.Assert(Equals(Evaluator.Eval("12 / 2 * 3"), 12 / 2 * 3));
                Debug.Assert(Equals(Evaluator.Eval("12 / 2 / 3"), 12 / 2 / 3));
                Debug.Assert(Equals(Evaluator.Eval("18 / 3 ^ 2"), 18 / 3 ^ 2));
                Debug.Assert(Equals(Evaluator.Eval("(18 / 3) ^ 2"), (18 / 3) ^ 2));

                Debug.Assert(Equals(Evaluator.Eval("Max(18, 33)"), Math.Max(18, 33)));

                Debug.Assert(Equals(Evaluator.Eval("'A' = 'A'"), true));
                Debug.Assert(Equals(Evaluator.Eval("'A' = 'a'.ToUpper"), true));
                Debug.Assert(Equals(Evaluator.Eval("'A' = 'a'.ToUpper()"), true));
                Debug.Assert(Equals(Evaluator.Eval("'AbC' iLike 'abc'"), true));
                Debug.Assert(Equals(Evaluator.Eval("'AbC' + 'abc'"), "AbCabc"));
                Debug.Assert(Equals(Evaluator.Eval("AbC + abc"), "AbCabc"));

                Debug.Assert(Equals(Evaluator.Eval("#8/16/1994#"), new DateTime(1994, 8, 16)));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1994# =  #8/16/1994#"), true));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1995# >  #1/16/1994#"), true));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1996# >= #1/16/1994#"), true));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1993# <  #1/16/1994#"), true));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1992# <= #1/16/1994#"), true));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1992# <= #1/16/1994#"), true));

                Debug.Assert(Equals(Evaluator.Eval("#8/16/1994#.Year"), 1994));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1994#.AddYears(16).Year"), 2010));
                Debug.Assert(Equals(Evaluator.Eval("#8/16/1994#.Equals(#8/16/1994#)"), true));

                Debug.Assert(DateTime.Now.Subtract((DateTime)Evaluator.Eval("GetDate()")).TotalMilliseconds < 10.0);
                Debug.Assert(Equals(Evaluator.Eval("GetDate().Year"), DateTime.Now.Year));
            }
        }

        void EvalComponent()
        {
            if (LicenseManager.IsLicensed(typeof(Evaluator)))
            {
                var component = new Component();

                Debug.Assert(Equals(Evaluator.Eval("DBNull Is Null", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DBNull Is Not Null", component), false));
                Debug.Assert(Equals(Evaluator.Eval("Not DBNull Is Not Null", component), true));
                Debug.Assert(Equals(Evaluator.Eval("Not (DBNull Is Not Null)", component), true));

                Debug.Assert(Equals(Evaluator.Eval("Int32 Between 1 And 2", component), true));
                Debug.Assert(Equals(Evaluator.Eval("Int32 Between (1, 2)", component), true));
                Debug.Assert(Equals(Evaluator.Eval("Int32 In (1)", component), true));
                Debug.Assert(Equals(Evaluator.Eval("Int32 In (2, 3)", component), false));
                Debug.Assert(Equals(Evaluator.Eval("Int32 In (1, 2, 3)", component), true));

                Debug.Assert(Equals(Evaluator.Eval("String.Substring(0, 6)", component), "Sample"));
                Debug.Assert(Equals(Evaluator.Eval("String.Substring(7).Equals('Text')", component), true));
                Debug.Assert(Equals(Evaluator.Eval("String.Substring(6).EndsWith('Text')", component), true));
                Debug.Assert(Equals(Evaluator.Eval("String.Substring(7).ToUpper.Equals('TEXT')", component), true));
                Debug.Assert(Equals(Evaluator.Eval("String.Substring(7).ToUpper().Equals('TEXT')", component), true));

                Debug.Assert(Equals(Evaluator.Eval("GetDate()", component), DateTime.Now));
                Debug.Assert(Equals(Evaluator.Eval("GetDate().Year", component), DateTime.Now.Year));

                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year >= DateTime.Year - 1", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year <= DateTime.Year + 1", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year >= DateTime.Year - 1 And DateTime.Year <= DateTime.Year + 1", component), true));

                Debug.Assert(Equals(ExpressionOperator.Parse("DateTime.Now.AddYears(1).Date.AddYears(2)").LegacyToString(), "DateTime.Now.AddYears(1).Date.AddYears(2)"));
                Debug.Assert(Equals(ExpressionOperator.Parse("DateTime.Year Not Between (DateTime.Year + 1, DateTime.Year - 1)").LegacyToString(), "Not(DateTime.Year Between(DateTime.Year + 1, DateTime.Year - 1))"));
                Debug.Assert(Equals(ExpressionOperator.Parse("Not DateTime.Year Between (DateTime.Year - 5, DateTime.Year - 10)").LegacyToString(), "Not(DateTime.Year Between(DateTime.Year - 5, DateTime.Year - 10))"));

                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year", component), DateTime.Now.Year));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year In (DateTime.Year - 1, DateTime.Year, DateTime.Year + 1)", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Not In (DateTime.Year - 1, DateTime.Year, DateTime.Year + 1)", component), false));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Between (DateTime.Year - 1, DateTime.Year + 1)", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Between (DateTime.Year + 1, DateTime.Year - 1)", component), false));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Not Between (DateTime.Year + 1, DateTime.Year - 1)", component), true));
                Debug.Assert(Equals(Evaluator.Eval("Not DateTime.Year Between (DateTime.Year - 5, DateTime.Year - 10)", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Between DateTime.Year - 1 And DateTime.Year + 1", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Between DateTime.Year + 1 And DateTime.Year - 1", component), false));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Not Between DateTime.Year + 1 And DateTime.Year - 1", component), true));

                Debug.Assert(Equals(Evaluator.Eval("DateTime.AddYears(100).AddYears(66).Year", component), DateTime.Now.AddYears(100).AddYears(66).Year));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Between DateTime.Year - 1 And DateTime.Year + 1 Or DateTime.Year Between DateTime.Year / 2 And DateTime.Year * 2", component), true));
                Debug.Assert(Equals(Evaluator.Eval("DateTime.Year Between (DateTime.Year - 1) And (DateTime.Year + 1) Or DateTime.Year Between (DateTime.Year / 2) And (DateTime.Year * 2) + 2", component), true));
                Debug.Assert(Equals(Evaluator.Eval("(DateTime.Year Between (DateTime.Year - 1) And (DateTime.Year + 1)) Or DateTime.Year Between (DateTime.Year / 2) And ((DateTime.Year * 2) + 2)", component), true));
            }
        }

        public void ParseSql()
        {
            ValidateExpression(@"Create Database Northwind FileName='C:\Test.sqn',PageSize=1024MB");
            ValidateExpression("Drop Database Northwind");

            ValidateExpression("Create Table Products (ProductID int Not Null, ProductName string, SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
            ValidateExpression("Create Table Products (ProductID int Primary Key, ProductName string, SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
            ValidateExpression("Create Table Products (ProductID int Identity(1, 1) Primary Key, ProductName string, SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
            ValidateExpression("Create Table Products (ProductID int Identity(1, 1) Primary Key, ProductName string(50), SupplierID int, CategoryID int, QuantityPerUnit string, UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");

            ValidateExpression("Create Primary Index PK_Products On Products (ProductID)");
            ValidateExpression("Create Unique Index UK_Products On Products (SupplierID, CategoryID)");
            ValidateExpression("Create Index IX_Products On Products (SupplierID, CategoryID)");

            ValidateExpression("Alter Table Products Add Country string(50)");
            ValidateExpression("Alter Table Products Add Country string(50), City string(50)");
            ValidateExpression("Alter Table Products Add Country string(50) Not Null, City string(50) Null");

            ValidateExpression("Alter Table Products Alter Column Country int");
            ValidateExpression("Alter Table Products Alter Column Country int Null, City int Null");

            ValidateExpression("Alter Table Products Drop Column Country");
            ValidateExpression("Alter Table Products Drop Column Country, City");

            ValidateExpression("Insert Into Products (ProductID, ProductName) Values (1, 'Chai')");
            ValidateExpression("Insert Into Products (ProductID, ProductName) Values (@ProductID, @ProductName)");
            ValidateExpression("Insert Into ProductsBackup Select * From Products");

            ValidateExpression("Update Products Set Discontinued = 0");
            ValidateExpression("Update Products Set ProductName = 'Chai', QuantityPerUnit = '10 boxes x 20 bags', UnitPrice = 18, Discontinued = 0 Where ProductID = 1");
            ValidateExpression("Update Products Set ProductName = @ProductName, QuantityPerUnit = @QuantityPerUnit, UnitPrice = @UnitPrice, Discontinued = @Discontinued Where ProductID = @ProductID");

            ValidateExpression("Delete From Products Where Discontinued = 0");
            ValidateExpression("Delete From Products Where Discontinued = @Discontinued");

            ValidateExpression("Drop Table Products");
            ValidateExpression("Drop Index PK_Products On Products");
        }

        public void SqlEngine(string path)
        {
            return;
            DbProviderFactory factory = DbProviderFactories.GetFactory("SQNil");

            using (Stopwatch.StartNew().Print("SqlEngine"))
            {
                using (DbConnection connection = factory.CreateConnection())
                {
                    connection.Open();

                    using (DbCommand command = connection.CreateCommand())
                    {
                        ExecuteNonQuery(command, "Create Database Northwind FileName={0};PageSize=10KB".FormatInvariant(path));

                        ExecuteNonQuery(command, "Create Table Shippers (ShipperID int Primary Key, CompanyName string(40), Phone string(24))");
                        ExecuteNonQuery(command, "Create Table Products (ProductID int Primary Key, ProductName string(40), SupplierID int, CategoryID int, QuantityPerUnit string(20), UnitPrice decimal, UnitsInStock short, UnitsOnOrder short, ReorderLevel short, Discontinued bool)");
                        ExecuteNonQuery(command, "Create Table Employees (EmployeeID int Primary Key, LastName string(20), FirstName string(10), Title string(30), TitleOfCourtesy string(25), BirthDate datetime, HireDate datetime, Address string(60), City string(15), Region string(15), PostalCode string(10), Country string(15), HomePhone string(24), Extension string(4), Photo image, Notes string(500), ReportsTo int, PhotoPath string(255))");
                        ExecuteNonQuery(command, "Create Table Customers (CustomerID string(5) Primary Key, CompanyName string(40), ContactName string(30), ContactTitle string(30), Address string(60), City string(15), Region string(15), PostalCode string(10), Country string(15), Phone string(24), Fax string(24))");
                        ExecuteNonQuery(command, "Create Table Orders (OrderID int Primary Key, CustomerID string(5), EmployeeID int, OrderDate DateTime, RequiredDate DateTime, ShippedDate DateTime, ShipVia int, Freight decimal, ShipName string(40), ShipAddress string(60), ShipCity string(15), ShipRegion string(15), ShipPostalCode string(10), ShipCountry string(15))");
                        ExecuteNonQuery(command, "Create Table [Order Details] (OrderID int Primary Key, ProductID int, UnitPrice decimal, Quantity short, Discount float)");
                        ExecuteNonQuery(command, "Create Table Test (ID int Primary Key, Name string(5), Value int)");

                        using (Stopwatch.StartNew().Print("Shippers {0} Row(s)".FormatInvariant(SampleData.Northwind.Shippers.Count)))
                        {
                            command.CommandText = "Insert Into Shippers (ShipperID, CompanyName, Phone) Values (@ShipperID, @CompanyName, @Phone)";

                            foreach (SampleData.NorthwindDatabase.Shipper r in SampleData.Northwind.Shippers)
                            {
                                command.Parameters["@ShipperID"].Value = r.ShipperID;
                                command.Parameters["@CompanyName"].Value = r.CompanyName;
                                command.Parameters["@Phone"].Value = r.Phone;
                                command.ExecuteNonQuery();
                            }

                            command.Parameters.Clear();
                        }

                        using (Stopwatch.StartNew().Print("Products {0} Row(s)".FormatInvariant(SampleData.Northwind.Products.Count)))
                        {
                            command.CommandText = "Insert Into Products (ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued) Values (@ProductID, @ProductName, @SupplierID, @CategoryID, @QuantityPerUnit, @UnitPrice, @UnitsInStock, @UnitsOnOrder, @ReorderLevel, @Discontinued)";

                            foreach (SampleData.NorthwindDatabase.Product r in SampleData.Northwind.Products)
                            {
                                command.Parameters["@ProductID"].Value = r.ProductID;
                                command.Parameters["@ProductName"].Value = r.ProductName;
                                command.Parameters["@SupplierID"].Value = r.SupplierID;
                                command.Parameters["@CategoryID"].Value = r.CategoryID;
                                command.Parameters["@QuantityPerUnit"].Value = r.QuantityPerUnit;
                                command.Parameters["@UnitPrice"].Value = r.UnitPrice;
                                command.Parameters["@UnitsInStock"].Value = r.UnitsInStock;
                                command.Parameters["@UnitsOnOrder"].Value = r.UnitsOnOrder;
                                command.Parameters["@ReorderLevel"].Value = r.ReorderLevel;
                                command.Parameters["@Discontinued"].Value = r.Discontinued;
                                command.ExecuteNonQuery();
                            }

                            command.Parameters.Clear();
                        }

                        using (Stopwatch.StartNew().Print("Employees {0} Row(s)".FormatInvariant(SampleData.Northwind.Employees.Count)))
                        {
                            command.CommandText = "Insert Into Employees (EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, ReportsTo, PhotoPath) Values (@EmployeeID, @LastName, @FirstName, @Title, @TitleOfCourtesy, @BirthDate, @HireDate, @Address, @City, @Region, @PostalCode, @Country, @HomePhone, @Extension, @Photo, @Notes, @ReportsTo, @PhotoPath)";

                            foreach (SampleData.NorthwindDatabase.Employee r in SampleData.Northwind.Employees)
                            {
                                command.Parameters["@EmployeeID"].Value = r.EmployeeID;
                                command.Parameters["@LastName"].Value = r.LastName;
                                command.Parameters["@FirstName"].Value = r.FirstName;
                                command.Parameters["@Title"].Value = r.Title;
                                command.Parameters["@TitleOfCourtesy"].Value = r.TitleOfCourtesy;
                                command.Parameters["@BirthDate"].Value = r.BirthDate;
                                command.Parameters["@HireDate"].Value = r.HireDate;
                                command.Parameters["@Address"].Value = r.Address;
                                command.Parameters["@City"].Value = r.City;
                                command.Parameters["@Region"].Value = r.Region;
                                command.Parameters["@PostalCode"].Value = r.PostalCode;
                                command.Parameters["@Country"].Value = r.Country;
                                command.Parameters["@HomePhone"].Value = r.HomePhone;
                                command.Parameters["@Extension"].Value = r.Extension;
                                command.Parameters["@Photo"].Value = r.Photo;
                                command.Parameters["@Notes"].Value = r.Notes;
                                command.Parameters["@ReportsTo"].Value = r.ReportsTo;
                                command.Parameters["@Photo"].Value = r.Photo;
                                command.Parameters["@PhotoPath"].Value = r.PhotoPath;
                                command.ExecuteNonQuery();
                            }

                            command.Parameters.Clear();
                        }

                        using (Stopwatch.StartNew().Print("Customers {0} Row(s)".FormatInvariant(SampleData.Northwind.Customers.Count)))
                        {
                            command.CommandText = "Insert Into Customers (CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax) Values (@CustomerID, @CompanyName, @ContactName, @ContactTitle, @Address, @City, @Region, @PostalCode, @Country, @Phone, @Fax)";

                            foreach (SampleData.NorthwindDatabase.Customer r in SampleData.Northwind.Customers)
                            {
                                command.Parameters["@CustomerID"].Value = r.CustomerID;
                                command.Parameters["@CompanyName"].Value = r.CompanyName;
                                command.Parameters["@ContactName"].Value = r.ContactName;
                                command.Parameters["@ContactTitle"].Value = r.ContactTitle;
                                command.Parameters["@Address"].Value = r.Address;
                                command.Parameters["@City"].Value = r.City;
                                command.Parameters["@Region"].Value = r.Region;
                                command.Parameters["@PostalCode"].Value = r.PostalCode;
                                command.Parameters["@Country"].Value = r.Country;
                                command.Parameters["@Phone"].Value = r.Phone;
                                command.Parameters["@Fax"].Value = r.Fax;
                                command.ExecuteNonQuery();
                            }

                            command.Parameters.Clear();
                        }

                        using (Stopwatch.StartNew().Print("Orders {0} Row(s)".FormatInvariant(SampleData.Northwind.Orders.Count)))
                        {
                            command.CommandText = "Insert Into Orders (OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry) Values (@OrderID, @CustomerID, @EmployeeID, @OrderDate, @RequiredDate, @ShippedDate, @ShipVia, @Freight, @ShipName, @ShipAddress, @ShipCity, @ShipRegion, @ShipPostalCode, @ShipCountry)";

                            foreach (SampleData.NorthwindDatabase.Order r in SampleData.Northwind.Orders)
                            {
                                command.Parameters["@OrderID"].Value = r.OrderID;
                                command.Parameters["@CustomerID"].Value = r.CustomerID;
                                command.Parameters["@EmployeeID"].Value = r.EmployeeID;
                                command.Parameters["@OrderDate"].Value = r.OrderDate;
                                command.Parameters["@RequiredDate"].Value = r.RequiredDate;
                                command.Parameters["@ShippedDate"].Value = r.ShippedDate;
                                command.Parameters["@ShipVia"].Value = r.ShipVia;
                                command.Parameters["@Freight"].Value = r.Freight;
                                command.Parameters["@ShipName"].Value = r.ShipName;
                                command.Parameters["@ShipAddress"].Value = r.ShipAddress;
                                command.Parameters["@ShipCity"].Value = r.ShipCity;
                                command.Parameters["@ShipRegion"].Value = r.ShipRegion;
                                command.Parameters["@ShipPostalCode"].Value = r.ShipPostalCode;
                                command.Parameters["@ShipCountry"].Value = r.ShipCountry;
                                command.ExecuteNonQuery();
                            }

                            command.Parameters.Clear();
                        }

                        using (Stopwatch.StartNew().Print("OrderDetails {0} Row(s)".FormatInvariant(SampleData.Northwind.OrderDetails.Count)))
                        {
                            command.CommandText = "Insert Into [Order Details] (OrderID, ProductID, UnitPrice, Quantity, Discount) Values (@OrderID, @ProductID, @UnitPrice, @Quantity, @Discount)";

                            foreach (SampleData.NorthwindDatabase.OrderDetail r in SampleData.Northwind.OrderDetails)
                            {
                                command.Parameters["@OrderID"].Value = r.OrderID;
                                command.Parameters["@ProductID"].Value = r.ProductID;
                                command.Parameters["@UnitPrice"].Value = r.UnitPrice;
                                command.Parameters["@Quantity"].Value = r.Quantity;
                                command.Parameters["@Discount"].Value = r.Discount;
                                command.ExecuteNonQuery();
                            }

                            command.Parameters.Clear();
                        }

                        //using (Stopwatch.StartNew().Print("Test {0} Row(s)".FormatInvariant(1000000)))
                        //{
                        //    command.CommandText = "Insert Into Test (ID, Name, Value) Values (@ID, @Name, @Value)";

                        //    var random = new Random();

                        //    for (int n = 1; n <= 1000000; n++)
                        //    {
                        //        command.Parameters["@ID"].Value = n;
                        //        command.Parameters["@Name"].Value = StringExtensions.RandomString(5);
                        //        command.Parameters["@Value"].Value = random.Next();
                        //        command.ExecuteNonQuery();
                        //    }

                        //    command.Parameters.Clear();
                        //}

                        RunQueries(command, SampleData.Northwind);
                    }
                }
            }

            //using (Stopwatch.StartNew().Print("RunQueries"))
            //{
            //    using (DbConnection connection = factory.CreateConnection())
            //    {
            //        connection.ConnectionString = "Data Source = {0};".FormatInvariant(path);
            //        connection.Open();

            //        using (DbCommand command = connection.CreateCommand())
            //        {
            //            RunQueries(command, SampleData.Northwind);
            //        }
            //    }
            //}
        }

        void RunQueries(DbCommand command, SampleData.NorthwindDatabase northwind)
        {
            int count;

            // Expression
            Compare(ExecuteReader(command, "Select 2", out count), new IDataRecord[] { new DataHashRecord { { "1", 2 } } }, count);
            Compare(ExecuteReader(command, "Select 2 + 4", out count), new IDataRecord[] { new DataHashRecord { { "1", 6 } } }, count);
            Compare(ExecuteReader(command, "Select 2 + 4, 4 + 8", out count), new IDataRecord[] { new DataHashRecord { { "1", 6 }, { "2", 12 } } }, count);

            // Ordinary
            Compare(ExecuteReader(command, "Select * From Products", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select * From [Products]", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select * From Orders", out count), northwind.Orders, count);
            Compare(ExecuteReader(command, "Select * From Customers", out count), northwind.Customers, count);

            Compare(ExecuteReader(command, "Select [UnitPrice] From [Products]", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select Products.UnitPrice From Products", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select [Products].[UnitPrice] From [Products]", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select P.* From Products P", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select P.UnitPrice From Products P", out count), northwind.Products, count);
            Compare(ExecuteReader(command, "Select * From Products Where UnitPrice > 39", out count), northwind.Products.Where(P => P.UnitPrice > 39m), count);
            Compare(ExecuteReader(command, "Select * From Orders Where CustomerID = 'QUEEN'", out count), northwind.Orders.Where(O => O.CustomerID == "QUEEN"), count);
            Compare(ExecuteReader(command, "Select * From Orders Where EmployeeID = 6 And CustomerID = 'QUEEN'", out count), northwind.Orders.Where(O => O.EmployeeID == 6 && O.CustomerID == "QUEEN"), count);
            Compare(ExecuteReader(command, "Select Products.* From Products Where UnitPrice > 39", out count), northwind.Products.Where(P => P.UnitPrice > 39m), count);
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice * UnitsOnOrder Total From Products Where UnitPrice * UnitsOnOrder > 0", out count), SampleData.Northwind.Products.Where(P => P.UnitPrice * P.UnitsOnOrder > 39m).Select(P => new DataHashRecord { { "ProductName", P.ProductName }, { "Total", P.UnitPrice * P.UnitsOnOrder } }), count);
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice * UnitsOnOrder As Total From Products Where UnitPrice * UnitsOnOrder > 0", out count), SampleData.Northwind.Products.Where(P => P.UnitPrice * P.UnitsOnOrder > 39m).Select(P => new DataHashRecord { { "ProductName", P.ProductName }, { "Total", P.UnitPrice * P.UnitsOnOrder } }), count);

            // Order
            Compare(ExecuteReader(command, "Select * From Customers Order By CompanyName", out count), northwind.Customers.OrderBy(C => C.CompanyName), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID", out count), northwind.Products.OrderBy(P => P.CategoryID), count);
            Compare(ExecuteReader(command, "Select * From Products Order By ProductName", out count), northwind.Products.OrderBy(P => P.ProductName), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID, UnitPrice", out count), northwind.Products.OrderBy(P => P.CategoryID).ThenBy(P => P.UnitPrice), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID Asc, UnitPrice Desc", out count), northwind.Products.OrderBy(P => P.CategoryID).ThenByDescending(P => P.UnitPrice), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID Desc, UnitPrice", out count), northwind.Products.OrderByDescending(P => P.CategoryID).ThenBy(P => P.UnitPrice), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID Desc, UnitPrice Desc", out count), northwind.Products.OrderByDescending(P => P.CategoryID).ThenByDescending(P => P.UnitPrice), count);
            Compare(ExecuteReader(command, "Select * From Products Order By UnitPrice * UnitsInStock Desc", out count), northwind.Products.OrderByDescending(P => P.UnitPrice * P.UnitsInStock), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID Asc, (UnitPrice * UnitsInStock) Asc", out count), northwind.Products.OrderBy(P => P.CategoryID).ThenBy(P => P.UnitPrice * P.UnitsInStock), count);
            Compare(ExecuteReader(command, "Select * From Products Order By CategoryID Asc, UnitPrice * UnitsInStock Desc", out count), northwind.Products.OrderBy(P => P.CategoryID).ThenByDescending(P => P.UnitPrice * P.UnitsInStock), count);

            // Group
            Compare(ExecuteReader(command, "Select CategoryID From Products Group By CategoryID", out count), northwind.Products.GroupBy(P => P.CategoryID, (key, P) => new DataHashRecord { { "CategoryID", key } }), count);
            Compare(ExecuteReader(command, "Select CategoryID From Products Group By CategoryID Order By CategoryID Desc", out count), northwind.Products.OrderByDescending(P => P.CategoryID).GroupBy(P => P.CategoryID, (key, P) => new DataHashRecord { { "CategoryID", key } }), count);

            // Aggregate
            Compare(ExecuteReader(command, "Select Count(*) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Count() } } }, count);
            Compare(ExecuteReader(command, "Select Count(UnitPrice) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Count() } } }, count);
            Compare(ExecuteReader(command, "Select Avg(UnitPrice) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Average(P => P.UnitPrice) } } }, count);
            Compare(ExecuteReader(command, "Select Max(UnitPrice) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Max(P => P.UnitPrice) } } }, count);
            Compare(ExecuteReader(command, "Select Min(UnitPrice) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Min(P => P.UnitPrice) } } }, count);
            Compare(ExecuteReader(command, "Select Sum(UnitPrice) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Sum(P => P.UnitPrice) } } }, count);
            Compare(ExecuteReader(command, "Select Sum(UnitPrice) / Avg(UnitPrice) From Products", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Products.Sum(P => P.UnitPrice) / SampleData.Northwind.Products.Average(P => P.UnitPrice) } } }, count);
            Compare(ExecuteReader(command, "Select ShippedDate.Year From Orders Group By ShippedDate.Year", out count), northwind.Orders.GroupBy(O => O.ShippedDate.Year, (key, O) => new DataHashRecord { { "ShippedDate.Year", key } }), count);
            Compare(ExecuteReader(command, "Select Orders.ShippedDate.Year From Orders Group By Orders.ShippedDate.Year", out count), northwind.Orders.GroupBy(O => O.ShippedDate.Year, (key, O) => new DataHashRecord { { "Orders.ShippedDate.Year", key } }), count);

            // Group + Aggregate
            Compare(ExecuteReader(command, "Select CategoryID, Sum(UnitPrice) / Avg(UnitPrice) From Products Group By CategoryID Order By CategoryID", out count), northwind.Products.OrderBy(P => P.CategoryID).GroupBy(P => P.CategoryID, (key, P) => new DataHashRecord { { "CategoryID", key }, { "1", P.Sum(P0 => P0.UnitPrice) / P.Average(P0 => P0.UnitPrice) } }), count);

            // Where + Order + Group
            Compare(ExecuteReader(command, "Select * From Products Where ProductName Like 'C*' Order By ProductName", out count), northwind.Products.Where(P => P.ProductName.StartsWith("C")).OrderBy(P => P.ProductName), count);
            Compare(ExecuteReader(command, "Select * From Products Where ProductName.StartsWith('C') Order By ProductName", out count), northwind.Products.Where(P => P.ProductName.StartsWith("C")).OrderBy(P => P.ProductName), count);
            Compare(ExecuteReader(command, "Select CategoryID, Avg(UnitPrice * UnitsInStock) From Products Where ProductName Like 'C*' Group By CategoryID Order By CategoryID Desc", out count), northwind.Products.Where(P => P.ProductName.StartsWith("C")).OrderByDescending(P => P.CategoryID).GroupBy(P => P.CategoryID, (key, P) => new DataHashRecord { { "CategoryID", key }, { "1", P.Average(P0 => P0.UnitPrice * P0.UnitsInStock) } }), count);

            // Sub-query
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice From Products Where UnitPrice > (Select Avg(UnitPrice) From Products)", out count), northwind.Products.Where(P0 => P0.UnitPrice > SampleData.Northwind.Products.Average(P1 => P1.UnitPrice)), count);
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice From Products Where (UnitPrice > (Select Avg(UnitPrice) From Products))", out count), northwind.Products.Where(P0 => P0.UnitPrice > SampleData.Northwind.Products.Average(P1 => P1.UnitPrice)), count);
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice From Products Where (UnitPrice > (Select Avg(UnitPrice) From Products)) Order By ProductName", out count), northwind.Products.Where(P0 => P0.UnitPrice > SampleData.Northwind.Products.Average(P1 => P1.UnitPrice)).OrderBy(P => P.ProductName), count);
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice From Products Where (UnitPrice > (Select Avg(UnitPrice) From Products)) Order By UnitsInStock Desc", out count), northwind.Products.Where(P0 => P0.UnitPrice > SampleData.Northwind.Products.Average(P1 => P1.UnitPrice)).OrderByDescending(P => P.UnitsInStock), count);
            Compare(ExecuteReader(command, "Select ProductName, UnitPrice From Products Where UnitPrice Between (Select Min(UnitPrice) From Products) And (Select Sum(UnitPrice) / Count(*) From Products)", out count), northwind.Products.Where(P => P.UnitPrice.IsBetween(SampleData.Northwind.Products.Min(P0 => P0.UnitPrice), SampleData.Northwind.Products.Sum(P1 => P1.UnitPrice) / SampleData.Northwind.Products.Count())), count);
            Compare(ExecuteReader(command, "Select * From Orders Where CustomerID In (Select CustomerID From Customers Where Country = 'France') And ShippedDate.Year = 1 Order By GetDate().Subtract(OrderDate).Days Desc", out count), northwind.Orders.Where(O => SampleData.Northwind.Customers.Where(C => C.Country.Equals("France")).Select(C => C.CustomerID).Contains(O.CustomerID) && O.ShippedDate.Year == 1).OrderByDescending(C => DateTime.Now.Subtract(C.OrderDate).Days), count);
            Compare(ExecuteReader(command, "Select * From Orders Where CustomerID In (Select CustomerID From Customers Where Country.ToUpper() = 'FRANCE') And ShippedDate.Year = 1 Order By GetDate().Subtract(OrderDate).Days Desc", out count), northwind.Orders.Where(O => SampleData.Northwind.Customers.Where(C => C.Country.ToUpperInvariant() == "FRANCE").Select(C => C.CustomerID).Contains(O.CustomerID) && O.ShippedDate.Year == 1).OrderByDescending(C => DateTime.Now.Subtract(C.OrderDate).Days), count);

            // Parent conditional sub-query
            Compare(ExecuteReader(command, "Select * From Orders Where CustomerID In (Select CustomerID From Customers Where Country = ShipCountry And Region.Length = 0) And ShippedDate.Year = 1", out count), northwind.Orders.Where(O => SampleData.Northwind.Customers.Where(Customer => Customer.Country == O.ShipCountry && Customer.Region.Length == 0).Select(Customer => Customer.CustomerID).Contains(O.CustomerID) && O.ShippedDate.Year == 1), count);
            Compare(ExecuteReader(command, "Select CustomerID, ContactName, Country, (Select Count(*) From Orders Where CustomerID = Customers.CustomerID) Total From Customers Where Country = 'UK' Order By Total Desc", out count), northwind.Customers.Where(C => C.Country == "UK").Select(C => new DataHashRecord { { "CustomerID", C.CustomerID }, { "ContactName", C.ContactName }, { "Country", C.Country }, { "Total", SampleData.Northwind.Orders.Where(O => O.CustomerID == C.CustomerID).Count() } }).OrderByDescending(R => R["Total"]), count);
            Compare(ExecuteReader(command, "Select CustomerID, ContactName, Country, (Select Min(Freight) From Orders Where CustomerID = Customers.CustomerID) MinFreight From Customers Order By Country, MinFreight", out count), northwind.Customers.Select(C => new DataHashRecord { { "CustomerID", C.CustomerID }, { "ContactName", C.ContactName }, { "Country", C.Country }, { "MinFreight", SampleData.Northwind.Orders.Where(O => O.CustomerID == C.CustomerID).Select(O => O.Freight).DefaultIfEmpty(default(decimal)).Min() } }).OrderBy(R => R["Country"]).ThenBy(R => R["MinFreight"]), count);

            // Multiple tables
            Compare(ExecuteReader(command, "Select Count(*) From Customers C, Orders O", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Customers.Join(SampleData.Northwind.Orders, Customer => 1, Order => 1, (C, O) => default(DataRecord)).Count() } } }, count);
            Compare(ExecuteReader(command, "Select Count(*) From Customers C, Orders O Where C.CustomerID = O.CustomerID", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Customers.Join(SampleData.Northwind.Orders, C => C.CustomerID, O => O.CustomerID, (C, O) => default(DataRecord)).Count() } } }, count);
            Compare(ExecuteReader(command, "Select C.*, O.* From Customers C, Orders O Where C.CustomerID = O.CustomerID", out count), northwind.Customers.Join(SampleData.Northwind.Orders, C => C.CustomerID, O => O.CustomerID, (C, O) => DataRecord.Concat(C, "C", O, "O")), count);
            Compare(ExecuteReader(command, "Select [C].*, [O].* From [Customers] [C], [Orders] [O] Where [C].[CustomerID] = [O].[CustomerID]", out count), northwind.Customers.Join(SampleData.Northwind.Orders, C => C.CustomerID, O => O.CustomerID, (C, O) => DataRecord.Concat(C, "C", O, "O")), count);
            Compare(ExecuteReader(command, "Select [C].*, [O].* From [Customers] As [C], [Orders] As [O] Where [C].[CustomerID] = [O].[CustomerID]", out count), northwind.Customers.Join(SampleData.Northwind.Orders, C => C.CustomerID, O => O.CustomerID, (C, O) => DataRecord.Concat(C, "C", O, "O")), count);

            Compare(ExecuteReader(command, "Select Count(*) From Customers C, (Select * From Orders Where EmployeeID > 6) O", out count), new IDataRecord[] { new DataHashRecord { { "1", northwind.Customers.Join(SampleData.Northwind.Orders.Where(O => O.EmployeeID > 6), C => 1, O => 1, (C, O) => default(DataRecord)).Count() } } }, count);
            Compare(ExecuteReader(command, "Select * From Customers C, (Select CustomerID From Orders Where EmployeeID = 6) O Where C.CustomerID = O.CustomerID", out count), northwind.Customers.Join(SampleData.Northwind.Orders.Where(O => O.EmployeeID == 6), C => C.CustomerID, O => O.CustomerID, (C, O) => DataRecord.Concat(C, "C", O, "O")), count);
            Compare(ExecuteReader(command, "Select * From Products P0, Products P1 Where P0.ProductID = P1.ProductID", out count), northwind.Products.Join(northwind.Products, P0 => P0.ProductID, P1 => P1.ProductID, (P0, P1) => RelationalDataRecord.Concat(P0, "P0", P1, "P1")), count);

            Compare(ExecuteReader(command, "Select [Order Details].[OrderID], [Order Details].[ProductID], Products.ProductName, [Order Details].[UnitPrice], [Order Details].[Quantity], [Order Details].[Discount], (([Order Details].[UnitPrice] * [Order Details].[Quantity]) * (1 - [Order Details].[Discount]) / 100) * 100 As ExtendedPrice From Products, [Order Details] Where Products.ProductID = [Order Details].[ProductID]", out count), northwind.Products.Join(SampleData.Northwind.OrderDetails, P => P.ProductID, O => O.ProductID, (P, O) => new DataHashRecord { { "Order Details.OrderID", O.OrderID }, { "Order Details.ProductID", O.ProductID }, { "Products.ProductName", P.ProductName }, { "Order Details.UnitPrice", O.UnitPrice }, { "Order Details.Quantity", O.Quantity }, { "Order Details.Discount", O.Discount }, { "ExtendedPrice", ((O.UnitPrice * O.Quantity) * (decimal)(1 - O.Discount) / 100) * 100 } }), count);
            Compare(ExecuteReader(command, "Select Products.ProductName, (([Order Details].[UnitPrice] * [Order Details].[Quantity]) * (1 - [Order Details].[Discount]) / 100) * 100 As ExtendedPrice From Products, [Order Details], Orders Where Products.ProductID = [Order Details].[ProductID] And [Order Details].[OrderID] = Orders.OrderID", out count), northwind.OrderDetails.Join(northwind.Products, D => D.ProductID, P => P.ProductID, (D, P) => new { D, P }).Join(northwind.Orders, DP => DP.D.OrderID, O => O.OrderID, (DP, O) => new DataHashRecord { { "Products.ProductName", DP.P.ProductName }, { "ExtendedPrice", ((DP.D.UnitPrice * DP.D.Quantity) * (decimal)(1 - DP.D.Discount) / 100) * 100 } }), count);
            Compare(ExecuteReader(command, "Select Customers.CompanyName, Products.ProductName, (([Order Details].[UnitPrice] * [Order Details].[Quantity]) * (1 - [Order Details].[Discount]) / 100) * 100 As ExtendedPrice From Customers, Orders, [Order Details], Products Where Customers.CustomerID = Orders.CustomerID And Orders.OrderID = [Order Details].[OrderID] And [Order Details].[ProductID] = Products.ProductID", out count), northwind.Orders.Join(northwind.Customers, O => O.CustomerID, C => C.CustomerID, (O, C) => new { O, C }).Join(northwind.OrderDetails, OC => OC.O.OrderID, D => D.OrderID, (OC, D) => new { OC, D }).Join(northwind.Products, OCD => OCD.D.ProductID, P => P.ProductID, (OCD, P) => new DataHashRecord { { "Customers.CompanyName", OCD.OC.C.CompanyName }, { "Products.ProductName", P.ProductName }, { "ExtendedPrice", ((OCD.D.UnitPrice * OCD.D.Quantity) * (decimal)(1 - OCD.D.Discount) / 100) * 100 } }), count);
            Compare(ExecuteReader(command, "Select Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, Orders.ShipRegion, Orders.ShipPostalCode, Orders.ShipCountry, Orders.CustomerID, Customers.CompanyName As CustomerName, Customers.Address, Customers.City, Customers.Region, Customers.PostalCode, Customers.Country, Employees.FirstName + ' ' + Employees.LastName As Salesperson, Orders.OrderID, Orders.OrderDate, Orders.RequiredDate, Orders.ShippedDate, Shippers.CompanyName As ShipperName, [Order Details].[ProductID], Products.ProductName, [Order Details].[UnitPrice], [Order Details].[Quantity], [Order Details].[Discount], (([Order Details].[UnitPrice] * [Order Details].[Quantity]) * (1 - [Order Details].[Discount]) / 100) * 100 As ExtendedPrice, Orders.Freight From Shippers, Customers, Employees, Products, Orders, [Order Details] Where Customers.CustomerID = Orders.CustomerID And Employees.EmployeeID = Orders.EmployeeID And Orders.OrderID = [Order Details].[OrderID] And Products.ProductID = [Order Details].[ProductID] And Shippers.ShipperID = Orders.ShipVia", out count), northwind.Orders.Join(northwind.Shippers, O => O.ShipVia, S => S.ShipperID, (O, S) => new { O, S }).Join(northwind.Customers, OS => OS.O.CustomerID, C => C.CustomerID, (OS, C) => new { OS, C }).Join(northwind.Employees, OSC => OSC.OS.O.EmployeeID, E => E.EmployeeID, (OSC, E) => new { OSC, E }).Join(northwind.OrderDetails, OSCE => OSCE.OSC.OS.O.OrderID, D => D.OrderID, (OSCE, D) => new { OSCE, D }).Join(northwind.Products, OSCED => OSCED.D.ProductID, P => P.ProductID, (OSCED, P) => new DataHashRecord { { "Orders.ShipName", OSCED.OSCE.OSC.OS.O.ShipName }, { "Orders.ShipAddress", OSCED.OSCE.OSC.OS.O.ShipAddress }, { "Orders.ShipCity", OSCED.OSCE.OSC.OS.O.ShipCity }, { "Orders.ShipRegion", OSCED.OSCE.OSC.OS.O.ShipRegion }, { "Orders.ShipPostalCode", OSCED.OSCE.OSC.OS.O.ShipPostalCode }, { "Orders.ShipCountry", OSCED.OSCE.OSC.OS.O.ShipCountry }, { "Orders.CustomerID", OSCED.OSCE.OSC.OS.O.CustomerID }, { "CustomerName", OSCED.OSCE.OSC.C.CompanyName }, { "Customers.Address", OSCED.OSCE.OSC.C.Address }, { "Customers.City", OSCED.OSCE.OSC.C.City }, { "Customers.Region", OSCED.OSCE.OSC.C.Region }, { "Customers.PostalCode", OSCED.OSCE.OSC.C.PostalCode }, { "Customers.Country", OSCED.OSCE.OSC.C.Country }, { "Salesperson", OSCED.OSCE.E.FirstName + ' ' + OSCED.OSCE.E.LastName }, { "Orders.OrderID", OSCED.OSCE.OSC.OS.O.OrderID }, { "Orders.OrderDate", OSCED.OSCE.OSC.OS.O.OrderDate }, { "Orders.RequiredDate", OSCED.OSCE.OSC.OS.O.RequiredDate }, { "Orders.ShippedDate", OSCED.OSCE.OSC.OS.O.ShippedDate }, { "ShipperName", OSCED.OSCE.OSC.OS.S.CompanyName }, { "Order Details.ProductID", OSCED.D.ProductID }, { "Products.ProductName", P.ProductName }, { "Order Details.UnitPrice", OSCED.D.UnitPrice }, { "Order Details.Quantity", OSCED.D.Quantity }, { "Order Details.Discount", OSCED.D.Discount }, { "ExtendedPrice", ((OSCED.D.UnitPrice * OSCED.D.Quantity) * (decimal)(1 - OSCED.D.Discount) / 100) * 100 }, { "Orders.Freight", OSCED.OSCE.OSC.OS.O.Freight } }), count);

            using (ExecuteReader(command, "Select Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, Orders.ShipRegion, Orders.ShipPostalCode, Orders.ShipCountry, Orders.CustomerID, Customers.CompanyName As CustomerName, Customers.Address, Customers.City, Customers.Region, Customers.PostalCode, Customers.Country, Employees.FirstName + ' ' + Employees.LastName As Salesperson, Orders.OrderID, Orders.OrderDate, Orders.RequiredDate, Orders.ShippedDate, Shippers.CompanyName As ShipperName, [Order Details].[ProductID], Products.ProductName, [Order Details].[UnitPrice], [Order Details].[Quantity], [Order Details].[Discount], (([Order Details].[UnitPrice] * [Order Details].[Quantity]) * (1 - [Order Details].[Discount]) / 100) * 100 As ExtendedPrice, Orders.Freight From Shippers, Products, Employees, Customers, Orders, [Order Details] Where Customers.CustomerID = Orders.CustomerID And Employees.EmployeeID = Orders.EmployeeID And Orders.OrderID = [Order Details].[OrderID] And Products.ProductID = [Order Details].[ProductID]", out count))
            {
                Debug.Assert(count == 6465);
            }

            //using (ExecuteReader(command, "Select * From Test Where ID = 999999", out count))
            //{
            //    Debug.Assert(count == 1);
            //}

            // Select City, CompanyName, ContactName, 'Customers' Relationship From Customers Union Select City, CompanyName, ContactName, 'Suppliers' From Suppliers
        }

        void ValidateSelect(string expression, params object[] values)
        {
            ValidateSelect(expression, default(SampleData.NorthwindDatabase), values);
        }

        void ValidateSelect(string expression, SampleData.NorthwindDatabase component, params object[] values)
        {
            int count;
            IExpressionOperator o = ValidateExpression(expression);
            IEnumerable<IDataRecord> e = Execute(o, component, out count);

            using (IEnumerator<IDataRecord> source = e.GetEnumerator())
            {
                if (!source.MoveNext())
                {
                    Debug.Assert(false);
                }

                for (int n = 0; n < values.Length; n++)
                {
                    object a = source.Current[n];
                    object b = values[n];

                    if (a != b)
                    {
                        Debug.Assert(false);
                    }
                }

                if (source.MoveNext())
                {
                    Debug.Assert(false);
                }
            }
        }

        void ValidateSelect(string expression, SampleData.NorthwindDatabase component, IEnumerable<IDataRecord> other)
        {
            int count;
            IExpressionOperator o = ValidateExpression(expression);
            IEnumerable<IDataRecord> e = Execute(o, component, out count);
            Compare(e, other, count);
        }

        void Compare(DbDataReader reader, IEnumerable<IDataRecord> other, int count)
        {
            using (reader)
            {
                Compare(reader.Cast<IDataRecord>(), other, count);
            }
        }

        void Compare(IEnumerable<IDataRecord> e, IEnumerable<IDataRecord> other, int count)
        {
            if (count != other.Count())
            {
                Debug.Assert(false);
                return;
            }

            using (IEnumerator<IDataRecord> source = e.GetEnumerator())
            {
                using (IEnumerator<IDataRecord> target = other.GetEnumerator())
                {
                    string name;

                    while (true)
                    {
                        if (target.MoveNext())
                        {
                            if (!source.MoveNext())
                            {
                                Debug.Assert(false);
                            }
                        }
                        else
                        {
                            if (source.MoveNext())
                            {
                                Debug.Assert(false);
                            }
                            break;
                        }

                        if (source.Current.HasValue())
                        {
                            Debug.Assert(source.Current.FieldCount > 0);

                            for (int n = 0; n < source.Current.FieldCount; n++)
                            {
                                name = source.Current.GetName(n);

                                object a = source.Current[name];
                                object b = target.Current[name];

                                if (Equals(a, b))
                                {
                                    continue;
                                }

                                Debug.Assert(false);
                                return;
                            }
                        }
                    }
                }

                Debug.Assert(source.MoveNext() == false);
            }
        }

        IExpressionOperator ValidateExpression(string expression)
        {
            IExpressionOperator o = ExpressionOperator.Parse(expression);
            Debug.Assert(expression == o.LegacyToString());
            return o;
        }

        IEnumerable<IDataRecord> Execute(IExpressionOperator o, object component, out int count)
        {
            IEnumerable<IDataRecord> e;
            Stopwatch watch = Stopwatch.StartNew();

            watch.Start();
            e = (IEnumerable<IDataRecord>)(component.IsNull() ? o.Evaluate() : o.Evaluate(component));
            count = e.Count();
            watch.Stop();
            "{0} : {1} row(s), {2} sec {3} msec".FormatInvariant(o.LegacyToString(), count, watch.Elapsed.Seconds, watch.Elapsed.Milliseconds).Print();

            return e;
        }

        void ExecuteNonQuery(DbCommand command, string commandText)
        {
            using (Stopwatch.StartNew().Print(string.Concat("ExecuteNonQuery:", commandText)))
            {
                command.CommandText = commandText;
                command.ExecuteNonQuery();
            }
        }

        DbDataReader ExecuteReader(DbCommand command, string commandText, out int count)
        {
            Stopwatch watch = Stopwatch.StartNew();

            count = 0;
            command.CommandText = commandText;

            using (DbDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    count++;
                }
            }

            watch.Stop();

            if (watch.Elapsed.Milliseconds > 0)
            {
                "ExecuteReader: {0} : {1} row(s), {2} sec {3} msec".FormatInvariant(commandText, count, watch.Elapsed.Seconds, watch.Elapsed.Milliseconds).Print();
            }

            return command.ExecuteReader();
        }

        [Obfuscation(Exclude = true, ApplyToMembers = true)]
        public class Component
        {
            public bool Boolean { get { return true; } }
            public byte Byte { get { return 1; } }
            public sbyte SByte { get { return 1; } }
            public char Char { get { return '1'; } }
            public short Int16 { get { return 1; } }
            public ushort UInt16 { get { return 1; } }
            public int Int32 { get { return 1; } }
            public uint UInt32 { get { return 1; } }
            public long Int64 { get { return 1; } }
            public ulong UInt64 { get { return 1; } }
            public float Single { get { return 1; } }
            public double Double { get { return 1; } }
            public decimal Decimal { get { return 1; } }
            public DateTime DateTime { get { return DateTime.Now; } }
            public string String { get { return "Sample Text"; } }
            public object DBNull { get { return Convert.DBNull; } }
        }
    }
}
