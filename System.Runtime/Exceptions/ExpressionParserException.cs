//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Data;
using System.Reflection;

namespace System.Runtime
{
    [Obfuscation(Exclude = true)]
    public class ExpressionParserException : SyntaxErrorException
    {
        public ExpressionParserException()
        {
        }

        public ExpressionParserException(string message)
            : base(message)
        {
        }

        public ExpressionParserException(string message, Exception innerException)
            : base(message, innerException)
        {
        }

        public ExpressionParserException(string message, int line, int position)
            : base(GetMessage(message, line, position))
        {
            Line = line;
            Position = position;
        }

        public ExpressionParserException(string message, int line, int position, Exception innerException)
            : base(GetMessage(message, line, position), innerException)
        {
            Line = line;
            Position = position;
        }

        public int Line
        {
            get;
            protected set;
        }

        public int Position
        {
            get;
            protected set;
        }

        static string GetMessage(string message, int line, int position)
        {
            if (line > 0 && position > 0)
            {
                return "{0} at line:{1} position:{2}".FormatInvariant(message, line, position);
            }

            if (position > 0)
            {
                return "{0} at position: {1}".FormatInvariant(message, position);
            }

            return message;
        }
    }
}
