//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace System.Runtime
{
    public class BeetweenOperator : ExpressionFunction, IBeetweenOperator
    {
        public BeetweenOperator()
        {
        }

        public BeetweenOperator(IExpressionOperator leftOperand, IExpressionOperator lowerBoundary, IExpressionOperator upperBoundary)
        {
            LeftOperand = leftOperand;
            LowerBoundary = lowerBoundary;
            UpperBoundary = upperBoundary;
        }

        protected bool UseParentheses = true;

        public override string GetFunctionName()
        {
            return "Between";
        }

        public override bool IsEmpty()
        {
            return LeftOperand.IsNull() || UpperBoundary.IsNull() || LowerBoundary.IsNull();
        }

        public override bool IsLogical()
        {
            return true;
        }

        public override bool IsHandled()
        {
            return LeftOperand.IsHandled() && UpperBoundary.IsHandled() && LowerBoundary.IsHandled();
        }

        public IExpressionOperator LeftOperand
        {
            get;
            set;
        }

        public IExpressionOperator UpperBoundary
        {
            get;
            set;
        }

        public IExpressionOperator LowerBoundary
        {
            get;
            set;
        }

        public override void Clear()
        {
            if (LeftOperand.HasValue()) LeftOperand.Clear();
            if (UpperBoundary.HasValue()) UpperBoundary.Clear();
            if (LowerBoundary.HasValue()) LowerBoundary.Clear();
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            var operands = OperandFactory.CreateOperatorCollection(this);

            result = default(IExpressionFunction);

            if (ReadParameters(e, operands))
            {
                if (operands.Count != 2)
                {
                    throw new ExpressionParserException("Invalid parameter usage for the operator {0}".FormatInvariant(GetFunctionName()));
                }

                result = new BeetweenOperator(leftOperand, operands[0], operands[1])
                {
                    UseParentheses = operands.AllowMultiple
                };

                return true;
            }

            return false;
        }

        protected override bool ReadParameters(ITokenEnumerator e, IExpressionOperatorCollection operands)
        {
            if (!base.ReadParameters(e, operands) || operands.Count == 1)
            {
                IExpressionOperator o;
                var lowerBoundary = default(IExpressionOperator);

                operands.AllowMultiple = false;

                if (operands.Count == 1 && e.Current.Equals("And") && e.MoveNext())
                {
                    (lowerBoundary = operands.First()).Remove();
                }

                while (e.CanRead)
                {
                    o = Read(e, operands);
                    operands.Add(o);

                    if (lowerBoundary.HasValue())
                    {
                        if (e.Current.Any("And", "Or", ')'))
                        {
                            break;
                        }
                    }
                    else if (e.Current.Equals("And"))
                    {
                        if (operands.Count == 1)
                        {
                            (lowerBoundary = operands.First()).Remove();
                        }
                        else
                        {
                            return false;
                        }
                    }
                }

                if (operands.Count == 1)
                {
                    operands.AllowMultiple = true;
                    operands.Insert(0, lowerBoundary);
                    operands.AllowMultiple = false;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            return true;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            return BinaryOperator.Combine(BinaryOperatorType.And, new BinaryOperator(BinaryOperatorType.GreaterOrEqual, LeftOperand, LowerBoundary), new BinaryOperator(BinaryOperatorType.LessOrEqual, LeftOperand, UpperBoundary)).PutInstructions(e);
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            if (UseParentheses)
            {
                return string.Concat(LeftOperand.LegacyToString(visitor), ' ', GetFunctionName(), '(', LowerBoundary.LegacyToString(visitor), ", ", UpperBoundary.LegacyToString(visitor), ')');
            }
            else
            {
                return string.Concat(LeftOperand.LegacyToString(visitor), ' ', GetFunctionName(), ' ', LowerBoundary.LegacyToString(visitor), " And ", UpperBoundary.LegacyToString(visitor));
            }
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return LeftOperand;
            yield return LowerBoundary;
            yield return UpperBoundary;
        }
    }
}