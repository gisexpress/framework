//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection.Emit;

namespace System.Runtime
{
    public class InOperator : ExpressionFunction, IInOperator
    {
        public InOperator()
        {
            Operands = OperandFactory.Default.CreateOperatorCollection(this);
        }

        public InOperator(IExpressionOperator leftOperand, params object[] literals)
        {
            LeftOperand = leftOperand;
            Operands = OperandFactory.Default.CreateOperatorCollection(this, literals);
        }

        public override string GetFunctionName()
        {
            return "In";
        }

        public override bool IsEmpty()
        {
            return LeftOperand.IsNull() || Operands.Count == 0;
        }

        public override bool IsLogical()
        {
            return true;
        }

        public override bool IsHandled()
        {
            return LeftOperand.IsHandled() && Operands.All(o => o.IsHandled());
        }

        public IExpressionOperator LeftOperand
        {
            get;
            set;
        }

        public IExpressionOperatorCollection Operands
        {
            get;
            protected set;
        }

        public override void Clear()
        {
            if (LeftOperand.HasValue())
            {
                LeftOperand.Clear();
            }

            Operands.Clear();
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            var o = new InOperator();

            if (ReadParameters(e, o.Operands))
            {
                o.LeftOperand = leftOperand;
                result = o;
                return true;
            }

            result = default(IExpressionFunction);
            return false;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            e.Generator.Emit(OpCodes.Nop);

            if (Operands.Count == 1)
            {
                IExpressionOperator o = Operands[0];

                if (MethodCache.IDataRecordSet.IsAssignableFrom(o.ReturnType))
                {
                    LocalBuilder value = e.Generator.DeclareLocal(LeftOperand.PutInstructions(e));
                    e.Generator.Emit(OpCodes.Stloc, value);

                    o.PutInstructions(e);
                    e.Generator.Emit(OpCodes.Call, MethodCache.Data.AsEnumerable.MakeGenericMethod(value.LocalType));

                    e.Generator.Emit(OpCodes.Ldloc, value);
                    e.Generator.Emit(OpCodes.Call, MethodCache.Linq.Contains.MakeGenericMethod(value.LocalType));

                    return Types.Boolean;
                }
                else
                {
                    return new BinaryOperator(BinaryOperatorType.Equals, LeftOperand, o).PutInstructions(e);
                }
            }

            e.LoadArray(Operands);
            e.Generator.Emit(OpCodes.Box, LeftOperand.PutInstructions(e));
            e.Generator.Emit(OpCodes.Call, MethodCache.Linq.Contains.MakeGenericMethod(Types.Object));

            return Types.Boolean;
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            string s = string.Concat(LeftOperand.LegacyToString(visitor), ' ', GetFunctionName(), ' ');
            string arguments = Operands.LegacyToString(visitor);

            if (Operands.Count == 1 && Operands[0].IsGroup)
            {
                s = string.Concat(s, arguments);
            }
            else
            {
                s = string.Concat(s, '(', arguments, ')');
            }

            return s;
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return LeftOperand;

            foreach (IExpressionOperator item in Operands)
            {
                yield return item;
            }
        }
    }
}
