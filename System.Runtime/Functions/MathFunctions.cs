//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.Runtime
{
    internal static class MathFunctions
    {
        public const double PI = 3.14159;

        public static sbyte Abs(sbyte value) { return Math.Abs(value); }
        public static short Abs(short value) { return Math.Abs(value); }
        public static int Abs(int value) { return Math.Abs(value); }
        public static long Abs(long value) { return Math.Abs(value); }
        public static float Abs(float value) { return Math.Abs(value); }
        public static double Abs(double value) { return Math.Abs(value); }
        public static decimal Abs(decimal value) { return Math.Abs(value); }

        public static double Sqrt(short value) { return Math.Sqrt(value); }
        public static double Sqrt(int value) { return Math.Sqrt(value); }
        public static double Sqrt(long value) { return Math.Sqrt(value); }
        public static double Sqrt(float value) { return Math.Sqrt(value); }
        public static double Sqrt(double value) { return Math.Sqrt(value); }
        public static double Sqrt(decimal value) { return Math.Sqrt((double)value); }

        public static double Pow(short value) { return value * value; }
        public static double Pow(int value) { return value * value; }
        public static double Pow(long value) { return value * value; }
        public static double Pow(float value) { return value * value; }
        public static double Pow(double value) { return value * value; }
        public static double Pow(decimal value) { return (double)(value * value); }

        public static double Pow(decimal value, int pow) { return Math.Pow((double)value, pow); }
        public static double Pow(decimal value, decimal pow) { return Math.Pow((double)value, (double)pow); }

        public static double Pow(double value, int pow) { return Math.Pow(value, pow); }
        public static double Pow(double value, double pow) { return Math.Pow(value, pow); }

        public static double Sin(double value) { return Math.Sin(value); }
        public static double Cos(double value) { return Math.Cos(value); }
        public static double Tan(double value) { return Math.Tan(value); }
        public static double Acos(double value) { return Math.Acos(value); }
        public static double Asin(double value) { return Math.Asin(value); }
        public static double Atan(double value) { return Math.Atan(value); }
        public static double Atan2(double y, double x) { return Math.Atan2(y, x); }

        public static double Log(double value) { return Math.Log(value); }
        public static double Log(double value, double newBase) { return Math.Log(value, newBase); }
        public static double Log10(double value) { return Math.Log10(value); }

        public static byte Min(byte a, byte b) { return Math.Min(a, b); }
        public static sbyte Min(sbyte a, sbyte b) { return Math.Min(a, b); }
        public static short Min(short a, short b) { return Math.Min(a, b); }
        public static ushort Min(ushort a, ushort b) { return Math.Min(a, b); }
        public static int Min(int a, int b) { return Math.Min(a, b); }
        public static uint Min(uint a, uint b) { return Math.Min(a, b); }
        public static long Min(long a, long b) { return Math.Min(a, b); }
        public static ulong Min(ulong a, ulong b) { return Math.Min(a, b); }
        public static float Min(float a, float b) { return Math.Min(a, b); }
        public static double Min(double a, double b) { return Math.Min(a, b); }
        public static decimal Min(decimal a, decimal b) { return Math.Min(a, b); }

        public static byte Max(byte a, byte b) { return Math.Max(a, b); }
        public static sbyte Max(sbyte a, sbyte b) { return Math.Max(a, b); }
        public static short Max(short a, short b) { return Math.Max(a, b); }
        public static ushort Max(ushort a, ushort b) { return Math.Max(a, b); }
        public static int Max(int a, int b) { return Math.Max(a, b); }
        public static uint Max(uint a, uint b) { return Math.Max(a, b); }
        public static long Max(long a, long b) { return Math.Max(a, b); }
        public static ulong Max(ulong a, ulong b) { return Math.Max(a, b); }
        public static float Max(float a, float b) { return Math.Max(a, b); }
        public static double Max(double a, double b) { return Math.Max(a, b); }
        public static decimal Max(decimal a, decimal b) { return Math.Max(a, b); }

        public static double Round(double value) { return Math.Round(value); }
        public static decimal Round(decimal value) { return Math.Round(value); }

        public static double Round(double value, int digits) { return Math.Round(value, digits); }
        public static decimal Round(decimal value, int decimals) { return Math.Round(value, decimals); }

        public static double Ceiling(double value) { return Math.Ceiling(value); }
        public static decimal Ceiling(decimal value) { return Math.Ceiling(value); }

        public static double Floor(double value) { return Math.Floor(value); }
        public static decimal Floor(decimal value) { return Math.Floor(value); }

        public static double Truncate(double value) { return Math.Truncate(value); }
        public static decimal Truncate(decimal value) { return Math.Truncate(value); }

        public static int Sign(sbyte value) { return Math.Sign(value); }
        public static int Sign(short value) { return Math.Sign(value); }
        public static int Sign(int value) { return Math.Sign(value); }
        public static int Sign(long value) { return Math.Sign(value); }
        public static int Sign(float value) { return Math.Sign(value); }
        public static int Sign(double value) { return Math.Sign(value); }
        public static int Sign(decimal value) { return Math.Sign(value); }

        public static double Exp(double value) { return Math.Exp(value); }
    }
}
