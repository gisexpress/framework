//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace System.Runtime.IO
{
    internal static class Globals
    {
        static Globals()
        {
            LoadOpCodes();
        }

        public static OpCode[] MultiByteOpCodes;
        public static OpCode[] SingleByteOpCodes;
        public static Module[] Modules = null;
        public static Dictionary<int, object> Cache = new Dictionary<int, object>();

        public static void LoadOpCodes()
        {
            SingleByteOpCodes = new OpCode[0x100];
            MultiByteOpCodes = new OpCode[0x100];
            FieldInfo[] fields = typeof(OpCodes).GetFields();

            foreach (FieldInfo field in fields)
            {
                if (typeof(OpCode).Equals(field.FieldType))
                {
                    var code1 = (OpCode)field.GetValue(null);
                    var num2 = (ushort)code1.Value;

                    if (num2 < 0x100)
                    {
                        SingleByteOpCodes[num2] = code1;
                    }
                    else
                    {
                        if ((num2 & 0xff00) != 0xfe00)
                        {
                            throw new Exception("Invalid OpCode.");
                        }

                        MultiByteOpCodes[num2 & 0xff] = code1;
                    }
                }
            }
        }

        public static string ProcessSpecialTypes(string typeName)
        {
            string r = typeName;

            switch (typeName.ToLowerInvariant())
            {
                case "string":
                case "system.string":
                    return "string";
                case "int":
                case "int32":
                case "system.int32":
                    return "int";
            }

            return r;
        }
    }
}
