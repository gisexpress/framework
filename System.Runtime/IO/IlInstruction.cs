//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Globalization;
using System.Reflection;
using System.Reflection.Emit;

namespace System.Runtime.IO
{
    public class IlInstruction
    {
        public OpCode Code { get; set; }
        public object Operand { get; set; }
        public byte[] OperandData { get; set; }
        public int Offset { get; set; }

        public string GetCode()
        {
            MethodInfo method;
            ConstructorInfo constructor;

            string r = GetExpandedOffset(Offset) + " : " + Code;

            if (Operand.HasValue())
            {
                switch (Code.OperandType)
                {
                    case OperandType.InlineField:
                        var field = ((FieldInfo)Operand);
                        r += " " + Globals.ProcessSpecialTypes(field.FieldType.ToString()) + " " + Globals.ProcessSpecialTypes(field.ReflectedType.ToString()) + "::" + field.Name + "";
                        break;
                    case OperandType.InlineMethod:
                        if ((method = Operand as MethodInfo).HasValue())
                        {
                            r += " ";
                            if (!method.IsStatic) r += "instance ";
                            r += Globals.ProcessSpecialTypes(method.ReturnType.ToString()) + " " + Globals.ProcessSpecialTypes(method.ReflectedType.ToString()) + "::" + method.Name + "()";
                        }
                        else if ((constructor = Operand as ConstructorInfo).HasValue())
                        {
                            r += " ";
                            if (!constructor.IsStatic) r += "instance ";
                            r += "void " + Globals.ProcessSpecialTypes(constructor.ReflectedType.ToString()) + "::" + constructor.Name + "()";
                        }
                        break;
                    case OperandType.ShortInlineBrTarget:
                    case OperandType.InlineBrTarget:
                        r += " " + GetExpandedOffset((int)Operand);
                        break;
                    case OperandType.InlineType:
                        r += " " + Globals.ProcessSpecialTypes(Operand.ToString());
                        break;
                    case OperandType.InlineString:
                        if (Operand.ToString() == "\r\n") r += " \"\\r\\n\"";
                        else r += " \"" + Operand + "\"";
                        break;
                    case OperandType.ShortInlineVar:
                        r += Operand.ToString();
                        break;
                    case OperandType.InlineI:
                    case OperandType.InlineI8:
                    case OperandType.InlineR:
                    case OperandType.ShortInlineI:
                    case OperandType.ShortInlineR:
                        r = string.Concat(r, ' ', Operand.ToString());
                        break;
                    case OperandType.InlineTok:
                        var type = Operand as Type;
                        if (!ReferenceEquals(type, null)) r += type.FullName;
                        else r += "not supported";
                        break;

                    default:
                        r += "not supported"; break;
                }
            }

            return r;
        }

        static string GetExpandedOffset(long offset)
        {
            string r = offset.ToString(CultureInfo.InvariantCulture);

            for (int i = 0; r.Length < 4; i++)
            {
                r = "0" + r;
            }

            return r;
        }

        public override string ToString()
        {
            return string.Format("{0} {1} {2}", Code, Operand, OperandData.HasValue() ? BitConverter.ToString(OperandData) : null);
        }
    }
}