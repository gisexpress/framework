//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace System.Runtime
{
    public class OperandFactory : IOperandFactory
    {
        static OperandFactory()
        {
            Default = new OperandFactory();
        }

        public readonly static OperandFactory Default;

        public IExpressionOperator Parse(string expression, object component)
        {
            return ExpressionOperator.Parse(expression, component);
        }

        public IExpressionOperatorCollection CreateOperatorCollection()
        {
            return new ExpressionOperatorCollection { AllowMultiple = false };
        }

        public IExpressionOperatorCollection CreateOperatorCollection(IExpressionOperator operand)
        {
            return new ExpressionOperatorCollection(operand);
        }

        public IExpressionOperatorCollection CreateOperatorCollection(IExpressionOperator operand, params object[] args)
        {
            return new ExpressionOperatorCollection(operand, args);
        }

        public IValueOperand CreateValueOperand(object value)
        {
            return new ValueOperand(value);
        }

        public IOperandProperty CreateOperandProperty(string propertyName)
        {
            return new OperandProperty(propertyName);
        }

        public IInOperator CreateInOperator(IExpressionOperator leftOperand, object[] literals)
        {
            return new InOperator(leftOperand, literals);
        }

        public IExpressionOperator Combine(BinaryOperatorType operatorType, IExpressionOperator leftOperand, IExpressionOperator rightOperand)
        {
            return BinaryOperator.Combine(operatorType, leftOperand, rightOperand);
        }

        public IBinaryOperator CreateBinaryOperator(BinaryOperatorType operatorType, IExpressionOperator leftOperand, object literal)
        {
            return new BinaryOperator(operatorType, leftOperand, literal);
        }

        public IBinaryOperator CreateBinaryOperator(BinaryOperatorType operatorType, IExpressionOperator leftOperand, IExpressionOperator rightOperand)
        {
            return new BinaryOperator(operatorType, leftOperand, rightOperand);
        }
    }
}
