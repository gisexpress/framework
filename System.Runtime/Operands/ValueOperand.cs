//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Xml;

namespace System.Runtime
{
    internal class ValueOperand : ExpressionOperator, IValueOperand
    {
        public ValueOperand()
        {
        }

        public ValueOperand(object value)
        {
            Value = value;
            Quote = Quotes.Single;
        }

        public ValueOperand(object value, Quotes quoteType)
        {
            Value = value;
            Quote = quoteType;
        }

        public ValueOperand(Type declaringType, string memberName, params IExpressionOperator[] parameters)
        {
            DeclaringType = declaringType;
            AddWithArguments(memberName, OperandFactory.CreateOperatorCollection(this, parameters));
        }

        public ValueOperand(Type declaringType, string memberName, IExpressionOperatorCollection parameters)
        {
            DeclaringType = declaringType;
            AddWithArguments(memberName, parameters);
        }

        protected string MemberName;
        protected Type DeclaringType;
        protected SortedList<int, IExpressionOperatorCollection> ArgumentList;

        public override bool IsEmpty()
        {
            return Value.IsNull() && MemberName.IsNull();
        }

        public override bool IsMember()
        {
            return Quote == Quotes.None || Quote == Quotes.Property || Quote == Quotes.QuotesProperty;
        }

        public override bool IsConstant()
        {
            if (IsMember())
            {
                return (MemberName ?? Value as string).StartsWith("@");
            }

            return true;
        }

        public override bool IsLogical()
        {
            if (Types.Boolean.IsAssignableFrom(ReturnType))
            {
                return true;
            }

            return false;
        }

        public override bool IsHandled()
        {
            return Handled;
        }

        public override void Clear()
        {
            Value = default(object);
            MemberName = default(string);
            Quote = Quotes.None;
        }

        public override string Name
        {
            get
            {
                switch (Quote)
                {
                    case Quotes.Property:
                    case Quotes.QuotesProperty:
                        return base.Name ?? Value as string;
                }

                return base.Name;
            }
            set
            {
                base.Name = value;
            }
        }

        public object Value
        {
            get;
            set;
        }

        public override Type ReturnType
        {
            get
            {
                if (FuncReturnType.IsNull())
                {
                    ISupportProperty property;

                    if (string.IsNullOrEmpty(Name) || (property = (Component as ISupportProperty)) == null || (ReturnType = property.GetPropertyType(Name)) == null)
                    {
                        if (Value.HasValue())
                        {
                            return Value.GetType();
                        }
                    }
                }

                return FuncReturnType;
            }
        }

        public bool SupportsArguments
        {
            get
            {
                switch (Quote)
                {
                    case Quotes.Single:
                    case Quotes.Property:
                    case Quotes.QuotesProperty:
                        return true;
                }

                return false;
            }
        }

        public Quotes Quote
        {
            get;
            set;
        }

        public void Add(string name)
        {
            if (Value.IsNull())
            {
                MemberName = name;
            }
            else
            {
                MemberName = string.Concat(MemberName ?? Value as string, '.', name);
            }

            if (IsMember())
            {
                Value = MemberName;
            }
            else
            {
                Value = Value ?? name;
            }
        }

        public void AddWithArgument(string name, IExpressionOperator arg)
        {
            AddWithArguments(name, OperandFactory.CreateOperatorCollection(arg));
        }

        public void AddWithArguments(string name, IExpressionOperatorCollection args)
        {
            Add(name);
            ArgumentList = ArgumentList ?? new SortedList<int, IExpressionOperatorCollection>();
            ArgumentList.Add(MemberName.SplitList().Count - 1, args);
        }

        public IList<IExpressionOperatorCollection> Arguments
        {
            get { return ArgumentList.HasValue() ? ArgumentList.Values : default(IList<IExpressionOperatorCollection>); }
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            if (IsHandled())
            {
                e.LoadValue(true);
                return FuncReturnType = Types.Boolean;
            }

            Type returnType;

            if (IsMember())
            {
                string name = MemberName ?? Value as string;

                if (!string.IsNullOrEmpty(name))
                {
                    if (e.TryCallMember(name, out returnType, ParameterN, DeclaringType))
                    {
                        return returnType;
                    }
                }
            }
            else if (Quote == Quotes.Single)
            {
                if (!string.IsNullOrEmpty(MemberName) && MemberName.Contains("."))
                {
                    IEnumerator<string> memberNames = MemberName.SplitList().GetEnumerator();

                    if (memberNames.MoveNext())
                    {
                        returnType = e.LoadValue(Value);

                        if (memberNames.MoveNext())
                        {
                            e.MakeRef(returnType);

                            if (e.TryCallMembers(memberNames, out returnType, (index) => ParameterN(index + 1), returnType))
                            {
                                return returnType;
                            }
                        }
                    }
                }
            }

            return e.LoadValue(Value);
        }

        public IExpressionOperatorCollection ParameterN(int n)
        {
            if (ArgumentList.HasValue())
            {
                IExpressionOperatorCollection args;

                if (ArgumentList.TryGetValue(n, out args))
                {
                    return args;
                }
            }

            return default(IExpressionOperatorCollection);
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            if (!string.IsNullOrEmpty(MemberName))
            {
                return LegacyToString(visitor, (MemberName ?? Name ?? string.Empty).SplitList()).RemoveNullOrEmptyElements().Join(".");
            }

            if (visitor.IsNull())
            {
                switch (Type.GetTypeCode(Value.GetType()))
                {
                    case TypeCode.Int32:
                        return XmlConvert.ToString((int)Value);
                    case TypeCode.Int64:
                        return XmlConvert.ToString((long)Value);
                    case TypeCode.Single:
                        return XmlConvert.ToString((float)Value);
                    case TypeCode.Double:
                        return XmlConvert.ToString((double)Value);
                    case TypeCode.Decimal:
                        return XmlConvert.ToString((decimal)Value);
                }

                return QuoteToken.LegacyToString(Quote, Value);
            }

            return visitor.LegacyToString(this);
        }

        protected IEnumerable<string> LegacyToString(ILegacyToStringVisitor visitor, IList<string> properties)
        {
            IExpressionOperatorCollection args;

            for (int n = 0; n < properties.Count; n++)
            {
                string property = properties[n];

                if (ArgumentList.HasValue() && ArgumentList.TryGetValue(n, out args))
                {
                    if (visitor.IsNull())
                    {
                        yield return string.Concat(property, '(', args.LegacyToString(visitor), ')');
                    }
                    else
                    {
                        throw new NotSupportedException();
                        //yield return visitor.LegacyToString(new OperandProperty(property) { Arguments = args });
                    }
                }
                else
                {
                    if (visitor.IsNull())
                    {
                        yield return QuoteToken.LegacyToString(Quote, property);
                    }
                    else
                    {
                        yield return visitor.LegacyToString(new OperandProperty(property));
                    }
                }
            }
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield break;
        }
    }
}