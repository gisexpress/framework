//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.IO.Runtime;
using System.Linq;

namespace System.Runtime
{
    public abstract class ExpressionOperator : IExpressionOperator
    {
        protected bool Flag0 = true;
        protected bool Flag1 = true;

        protected Func<object> Func0;
        protected Func<object, object> Func1;

        protected Type FuncReturnType;

        public object Component
        {
            get;
            set;
        }

        public virtual string Name
        {
            get;
            set;
        }

        public abstract bool IsEmpty();

        public virtual bool IsAggregate()
        {
            return Enumerable.Any(this, e => e.IsAggregate());
        }

        public virtual bool IsConstant()
        {
            return false;
        }

        public virtual bool IsMember()
        {
            return false;
        }

        public virtual bool IsLogical()
        {
            return false;
        }

        public virtual bool IsHandled()
        {
            return Handled;
        }

        public virtual void Clear()
        {
            Flag0 = true;
            Flag1 = true;

            Func0 = default(Func<object>);
            Func1 = default(Func<object, object>);
        }

        public bool Handled
        {
            get;
            set;
        }

        public virtual bool IsGroup
        {
            get;
            set;
        }

        public virtual Type ReturnType
        {
            get
            {
                if (IsLogical())
                {
                    return Types.Boolean;
                }

                return FuncReturnType;
            }
            set
            {
                FuncReturnType = value;
            }
        }

        public IExpressionOperator Parent
        {
            get;
            set;
        }

        public IExpressionOperatorCollection Owner
        {
            get;
            set;
        }

        public bool Remove()
        {
            if (Owner.HasValue())
            {
                return Owner.Remove(this);
            }

            return false;
        }

        public static IExpressionOperator Parse(string s)
        {
            return Parse(s, default(object));
        }

        public static IExpressionOperator Parse(string s, object component)
        {
            return Read(ExpressionParser.Parse(s, component));
        }

        public static IExpressionOperator Read(ITokenEnumerator e)
        {
            return ExpressionParser.Read(e);
        }

        internal static IExpressionOperator Read(ITokenEnumerator e, IExpressionOperatorCollection operands)
        {
            return ExpressionParser.Read(e, operands);
        }

        protected virtual bool ReadParameters(ITokenEnumerator e, IExpressionOperatorCollection operands)
        {
            return operands.Read(e);
        }

        public object Evaluate()
        {
            if (Flag0)
            {
                CreateDelegate();
            }

            return Func0();
        }

        public object Evaluate(object component)
        {
            if (Flag1)
            {
                CreateDelegate(component);
            }

            return Func1(component);
        }

        public bool Validate()
        {
            return (bool)Evaluate();
        }

        public bool Validate(object component)
        {
            return (bool)Evaluate(component);
        }

        public virtual int ExecuteNonQuery(object component)
        {
            object r = Evaluate(component);

            if (r is int)
            {
                return (int)r;
            }

            return -1;
        }

        public virtual object ExecuteScalar(object component)
        {
            IDataRecord r = ExecuteReader(component).FirstOrDefault();

            if (r.IsNull())
            {
                return default(object);
            }

            return r[0];
        }

        public virtual IEnumerable<IDataRecord> ExecuteReader(object component)
        {
            return Evaluate(component) as IEnumerable<IDataRecord>;
        }

        public Func<object> CreateDelegate()
        {
            try
            {
                return Func0 ?? (Func0 = new ExpressionInstructionEventArgs(this).CreateDelegate(out FuncReturnType));
            }
            finally
            {
                Flag0 = false;
            }
        }

        public Func<object, object> CreateDelegate(object component)
        {
            try
            {
                return Func1 ?? (Func1 = new ExpressionInstructionEventArgs(this).CreateDelegate(component, out FuncReturnType));
            }
            finally
            {
                Flag1 = false;
            }
        }

        public Func<object, object> CreateDelegate(Type componentType)
        {
            try
            {
                return Func1 ?? (Func1 = new ExpressionInstructionEventArgs(this).CreateDelegate(componentType, out FuncReturnType));
            }
            finally
            {
                Flag1 = false;
            }
        }

        public Type PutInstructions(IInstructionEventArgs e)
        {
            if (!IsHandled())
            {
                e.Operand = this;
                return FuncReturnType = OnPutInstructions(e);
            }

            return default(Type);
        }

        public IEnumerable<T> OfType<T>(bool searchAllChildren) where T : IExpressionOperator
        {
            return AsEnumerable(this, searchAllChildren).OfType<T>();
        }

        protected IEnumerable<IExpressionOperator> AsEnumerable(IExpressionOperator operand, bool searchAllChildren)
        {
            foreach (IExpressionOperator item in operand)
            {
                item.Parent = operand;

                yield return item;

                if (searchAllChildren)
                {
                    foreach (IExpressionOperator child in AsEnumerable(item, true))
                    {
                        yield return child;
                    }
                }
            }
        }

        protected abstract Type OnPutInstructions(IInstructionEventArgs e);

        public string LegacyToString()
        {
            return LegacyToString(default(ILegacyToStringVisitor));
        }

        public string LegacyToString(ILegacyToStringVisitor visitor)
        {
            return OnLegacyToString(visitor);
        }

        protected virtual string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return this.Select(o => o.LegacyToString(visitor)).Join(" ");
        }

        public static implicit operator ExpressionOperator(string value)
        {
            return (ExpressionOperator)Parse(value);
        }

        public override string ToString()
        {
            return LegacyToString(default(ILegacyToStringVisitor));
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public abstract IEnumerator<IExpressionOperator> GetEnumerator();

        public IExpressionOperator Clone()
        {
            return ExpressionOperator.Parse(LegacyToString());
        }
    }
}
