//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;

namespace System.Runtime
{
    internal class AggregateFunction : ExpressionFunction, IExpressionFunctionCollection, IAggregateFunction
    {
        public AggregateFunction()
        {
        }

        public AggregateFunction(string name)
        {
            Function = (AggregateFunctions)Enum.Parse(typeof(AggregateFunctions), name);
        }

        public AggregateFunction(AggregateFunctions function)
        {
            Function = function;
        }

        public AggregateFunction(AggregateFunctions function, IExpressionOperator operand)
        {
            Function = function;
            Operand = operand;
            Operand.IsGroup = false;
        }

        protected AggregateFunctions Function;

        public override bool IsEmpty()
        {
            return Operand.IsNull() || Operand.IsEmpty();
        }

        public override string GetFunctionName()
        {
            return Enum.GetName(typeof(AggregateFunctions), Function);
        }

        public IEnumerable<string> GetFunctionNames()
        {
            foreach (string item in Enum.GetNames(typeof(AggregateFunctions)))
            {
                yield return item;
            }
        }

        public IExpressionOperator Operand
        {
            get;
            set;
        }

        public override bool IsAggregate()
        {
            return true;
        }

        public override bool HasLeftOperand()
        {
            return false;
        }

        public override Type ReturnType
        {
            get
            {
                switch (Function)
                {
                    case AggregateFunctions.Count: 
                        return Types.Int32;
                    
                    case AggregateFunctions.LongCount: 
                        return Types.Int64;
                }

                return Types.Decimal;
            }
            set
            {
                base.ReturnType = value;
            }
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            if (e.NextIs(Constants.Sql.KeywordAsteriskChar))
            {
                if (e.MoveNext(true) && e.MoveNext(true) && e.Current.Equals(')') && e.MoveNext(true))
                {
                    result = new AggregateFunction(Function, new AsteriskOperand());
                    return true;
                }
                else
                {
                    throw e.SyntaxError();
                }
            }

            var o = new MathFunction(GetFunctionName());

            if (ReadParameters(e, o.Parameters))
            {
                if (o.Parameters.Count == 2)
                {
                    result = o;
                    return true;
                }

                if (o.Parameters.Count != 1)
                {
                    throw new ExpressionParserException("Invalid parameter usage for the operator {0}".FormatInvariant(GetFunctionName()));
                }

                result = new AggregateFunction(Function, o.Parameters.First());
                return true;
            }

            result = default(IExpressionFunction);
            return false;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            e.Generator.Emit(OpCodes.Nop);
            e.Generator.Emit(OpCodes.Ldarg_0);

            switch (Function)
            {
                case AggregateFunctions.Count:
                    e.Generator.Emit(OpCodes.Call, GetMethod());
                    return Types.Int32;

                case AggregateFunctions.LongCount:
                    e.Generator.Emit(OpCodes.Call, GetMethod());
                    return Types.Int64;
            }

            int key = GetHashCode();

            if (DataRecord.Aggregates.ContainsKey(key))
            {
                DataRecord.Aggregates[key] = Operand;
            }
            else
            {
                DataRecord.Aggregates.Add(key, Operand);
            }

            e.Generator.Emit(OpCodes.Ldc_I4, key);
            e.Generator.Emit(OpCodes.Call, GetMethod());
            e.Generator.Emit(OpCodes.Unbox_Any, Types.Decimal);

            return Types.Decimal;
        }

        protected MethodInfo GetMethod()
        {
            switch (Function)
            {
                case AggregateFunctions.Count:
                    return MethodCache.Data.CountOrDefault;

                case AggregateFunctions.LongCount:
                    return MethodCache.Data.LongCountOrDefault;

                case AggregateFunctions.Avg:
                    return MethodCache.Data.AvgOrDefault;

                case AggregateFunctions.Max:
                    return MethodCache.Data.MaxOrDefault;

                case AggregateFunctions.Min:
                    return MethodCache.Data.MinOrDefault;

                case AggregateFunctions.Sum:
                    return MethodCache.Data.SumOrDefault;
            }

            throw new NotSupportedException();
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return string.Concat(GetFunctionName(), '(', Operand.LegacyToString(visitor), ')');
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Operand;
        }
    }
}
