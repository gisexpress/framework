//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;

namespace System.Runtime
{
    internal class AlterOperator : ExpressionFunction, IAlterOperator
    {
        public override bool IsEmpty()
        {
            return (Object.IsNull() || Object.IsEmpty()) || (Fields.IsNull() || Fields.IsEmpty());
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordAlter;
        }

        public override bool HasLeftOperand()
        {
            return false;
        }

        public IExpressionOperator Object
        {
            get;
            set;
        }

        public AlterOperation Operation
        {
            get;
            set;
        }

        public IExpressionOperatorCollection Fields
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            bool typeDefinition;
            var o = new AlterOperator();
            var operands = new ExpressionOperatorCollection();

            if (e.Current.Equals(Constants.Sql.KeywordTable))
            {
                e.MoveNext();
            }

            result = o;
            o.Object = Read(e, operands);
            o.Operation = GetOperation(e, out typeDefinition);
            o.Fields = new ExpressionOperatorCollection();

            if (e.Current.Equals(Constants.Sql.KeywordColumn))
            {
                e.MoveNext();
            }

            while (e.CanRead)
            {
                var member = new OperandMember();

                if (member.TryRead(e, operands, typeDefinition))
                {
                    o.Fields.Add(member);
                }

                if (e.Current.Equals(','))
                {
                    e.MoveNext();
                    continue;
                }

                break;
            }

            return o.Fields.Count > 0;
        }

        protected AlterOperation GetOperation(ITokenEnumerator e, out bool typeDefinition)
        {
            if (e.Current.Equals(Constants.Sql.KeywordAdd))
            {
                e.MoveNext();
                typeDefinition = true;
                return AlterOperation.Add;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordAlter))
            {
                e.MoveNext();
                typeDefinition = true;
                return AlterOperation.Alter;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordDrop))
            {
                e.MoveNext();
                typeDefinition = false;
                return AlterOperation.Drop;
            }

            throw e.SyntaxError();
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            throw new NotImplementedException();
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return GetLegacyStrings(visitor).Join(" ");
        }

        protected IEnumerable<string> GetLegacyStrings(ILegacyToStringVisitor visitor)
        {
            yield return Constants.Sql.KeywordAlter;
            yield return Constants.Sql.KeywordTable;
            yield return Object.LegacyToString(visitor);

            switch (Operation)
            {
                case AlterOperation.Add:
                    yield return Constants.Sql.KeywordAdd;
                    break;
                case AlterOperation.Alter:
                    yield return Constants.Sql.KeywordAlter;
                    yield return Constants.Sql.KeywordColumn;
                    break;
                case AlterOperation.Drop:
                    yield return Constants.Sql.KeywordDrop;
                    yield return Constants.Sql.KeywordColumn;
                    break;
            }

            yield return Fields.LegacyToString(visitor);
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Object;

            foreach (IExpressionOperator o in Fields)
            {
                yield return o;
            }
        }
    }
}
