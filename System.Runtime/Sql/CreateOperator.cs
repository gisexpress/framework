//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Reflection.Emit;

namespace System.Runtime
{
    internal class CreateOperator : ExpressionFunction, ICreateOperator
    {
        public override bool IsEmpty()
        {
            if (ObjectType == OperandObjectType.None)
            {
                return true;
            }

            if (ObjectType == OperandObjectType.Database)
            {
                return Object.IsNull() || Object.IsEmpty();
            }

            if (ObjectType == OperandObjectType.Table)
            {
                return (Object.IsNull() || Object.IsEmpty()) || (Fields.IsNull() || Fields.IsEmpty());
            }

            return (Object.IsNull() || Object.IsEmpty()) || (ObjectOn.IsNull() || ObjectOn.IsEmpty()) || (Fields.IsNull() || Fields.IsEmpty());
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordCreate;
        }

        public override bool HasLeftOperand()
        {
            return false;
        }

        public IValueOperand Object
        {
            get;
            set;
        }

        public IValueOperand ObjectOn
        {
            get;
            set;
        }

        public OperandObjectType ObjectType
        {
            get;
            set;
        }

        public IExpressionOperatorCollection Fields
        {
            get;
            set;
        }

        public string Arguments
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            bool typeDefinition;
            var o = new CreateOperator();
            var operands = new ExpressionOperatorCollection();

            result = o;

            o.ObjectType = GetOperation(e, out typeDefinition);
            o.Object = (IValueOperand)Read(e, operands);

            if (o.ObjectType == OperandObjectType.Database)
            {
                o.Arguments = e.ReadToEnd();
                return true;
            }
            else
            {
                if (!typeDefinition)
                {
                    if (e.Current.Equals(Constants.Sql.KeywordOn))
                    {
                        e.MoveNext();
                    }
                    else
                    {
                        throw e.SyntaxError();
                    }

                    o.ObjectOn = (IValueOperand)Read(e, operands);
                }

                if (e.Current.Equals('(') && e.MoveNext())
                {
                    o.Fields = new ExpressionOperatorCollection();

                    while (e.CanRead)
                    {
                        var member = new OperandMember();

                        if (member.TryRead(e, operands, typeDefinition))
                        {
                            o.Fields.Add(member);
                        }

                        if (e.Current.Equals(','))
                        {
                            e.MoveNext();
                            continue;
                        }

                        if (e.Current.Equals(')'))
                        {
                            e.MoveNext();
                            o.Arguments = e.ReadToEnd();
                            return true;
                        }

                        break;
                    }
                }

                throw e.SyntaxError();
            }
        }

        protected OperandObjectType GetOperation(ITokenEnumerator e, out bool typeDefinition)
        {
            if (e.Current.Equals(Constants.Sql.KeywordTable))
            {
                e.MoveNext();
                typeDefinition = true;
                return OperandObjectType.Table;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordDatabase))
            {
                e.MoveNext();
                typeDefinition = false;
                return OperandObjectType.Database;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordIndex))
            {
                e.MoveNext();
                typeDefinition = false;
                return OperandObjectType.Index;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordPrimary) && e.MoveNext() && e.Current.Equals(Constants.Sql.KeywordIndex))
            {
                e.MoveNext();
                typeDefinition = false;
                return OperandObjectType.PrimaryIndex;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordUnique) && e.MoveNext() && e.Current.Equals(Constants.Sql.KeywordIndex))
            {
                e.MoveNext();
                typeDefinition = false;
                return OperandObjectType.UniqueIndex;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordSpatial) && e.MoveNext() && e.Current.Equals(Constants.Sql.KeywordIndex))
            {
                e.MoveNext();
                typeDefinition = false;
                return OperandObjectType.SpatialIndex;
            }

            throw e.SyntaxError();
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            if (ObjectType == OperandObjectType.Database)
            {
                e.Generator.Emit(OpCodes.Ldarg_0);
                e.Generator.Emit(OpCodes.Ldstr, Object.Name);
                e.Generator.Emit(OpCodes.Ldstr, Arguments ?? string.Empty);
                e.Generator.Emit(OpCodes.Call, e.ComponentType.GetMethod("CreateDatabase"));
                e.Generator.Emit(OpCodes.Ldc_I4, 1);

                return Types.Int32;
            }
            //else if (ObjectType == OperandObjectType.Table)
            //{
            //    MethodInfo methodCreateTable = e.ComponentType.GetMethod("CreateTable");
            //    MethodInfo methodAddColumn = methodCreateTable.ReturnType.GetMethod("AddColumn");

            //    LocalBuilder table = e.Generator.DeclareLocal(methodCreateTable.ReturnType);

            //    e.Generator.Emit(OpCodes.Ldarg_0);
            //    e.Generator.Emit(OpCodes.Ldstr, Object.Name);
            //    e.Generator.Emit(OpCodes.Call, e.ComponentType.GetMethod("CreateTable"));
            //    e.Generator.Emit(OpCodes.Stloc, table);

            //    foreach (IOperandMember member in Fields)
            //    {
            //        e.Generator.Emit(OpCodes.Nop);
            //        e.Generator.Emit(OpCodes.Ldloc, table);
            //        e.Generator.Emit(OpCodes.Ldstr, member.Member.Name);
            //        e.Generator.Emit(OpCodes.Ldstr, member.MemberType.Name);
            //        e.LoadArray(member.MemberTypeParameters);
            //        e.LoadValue(member.IsNullable);
            //        e.LoadValue(member.IsIdentity);
            //        e.LoadArray(member.IdentityParameters);
            //        e.Generator.Emit(OpCodes.Call, methodAddColumn);
            //        e.Generator.Emit(OpCodes.Pop);
            //    }

            //    e.Generator.Emit(OpCodes.Ldc_I4, 1);

            //    return Types.Int32;
            //}

            throw new NotImplementedException();
        }

        public override int ExecuteNonQuery(object component)
        {
            var command = component as SqnDbCommand;
            
            switch (ObjectType)
            {
                case OperandObjectType.Table:
                    command.CreateTable(this);
                    return 0;
                case OperandObjectType.Index:
                case OperandObjectType.SpatialIndex:
                    command.CreateIndex(this);
                    return 0;
            }

            return base.ExecuteNonQuery(component);
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return GetLegacyStrings(visitor).Join(" ");
        }

        protected IEnumerable<string> GetLegacyStrings(ILegacyToStringVisitor visitor)
        {
            yield return Constants.Sql.KeywordCreate;

            switch (ObjectType)
            {
                case OperandObjectType.Database:
                    yield return Constants.Sql.KeywordDatabase;
                    yield return Object.LegacyToString(visitor);
                    if (!string.IsNullOrEmpty(Arguments)) yield return Arguments;
                    yield break;
                case OperandObjectType.Table:
                    yield return Constants.Sql.KeywordTable;
                    break;
                case OperandObjectType.Index:
                    yield return Constants.Sql.KeywordIndex;
                    break;
                case OperandObjectType.UniqueIndex:
                    yield return Constants.Sql.KeywordUnique;
                    yield return Constants.Sql.KeywordIndex;
                    break;
                case OperandObjectType.PrimaryIndex:
                    yield return Constants.Sql.KeywordPrimary;
                    yield return Constants.Sql.KeywordIndex;
                    break;
                case OperandObjectType.SpatialIndex:
                    yield return Constants.Sql.KeywordSpatial;
                    yield return Constants.Sql.KeywordIndex;
                    break;
            }

            yield return Object.LegacyToString(visitor);

            if (ObjectOn.HasValue())
            {
                yield return Constants.Sql.KeywordOn;
                yield return ObjectOn.LegacyToString(visitor);
            }

            if (Fields.HasValue())
            {
                yield return string.Concat("(", Fields.LegacyToString(visitor), ")");
            }

            if (!string.IsNullOrEmpty(Arguments))
            {
                yield return Arguments;
            }
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Object;

            foreach (IExpressionOperator o in Fields)
            {
                yield return o;
            }
        }
    }
}
