//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;

namespace System.Runtime
{
    internal class DropOperator : ExpressionFunction, IDropOperator
    {
        public override bool IsEmpty()
        {
            return ObjectType != OperandObjectType.None && (Object.IsNull() || Object.IsEmpty());
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordDrop;
        }

        public override bool HasLeftOperand()
        {
            return false;
        }

        public IExpressionOperator Object
        {
            get;
            set;
        }

        public IExpressionOperator ObjectOn
        {
            get;
            set;
        }

        public OperandObjectType ObjectType
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            var o = new DropOperator();
            var operands = new ExpressionOperatorCollection();

            result = o;

            o.ObjectType = GetOperation(e);

            if (o.ObjectType == OperandObjectType.None)
            {
                return false;
            }

            o.Object = Read(e, operands);

            if (o.ObjectType == OperandObjectType.Index)
            {
                if (e.Current.Equals(Constants.Sql.KeywordOn))
                {
                    e.MoveNext();
                }
                else
                {
                    return false;
                }

                o.ObjectOn = Read(e, operands);
            }

            return true;
        }

        protected OperandObjectType GetOperation(ITokenEnumerator e)
        {
            if (e.Current.Equals(Constants.Sql.KeywordTable))
            {
                e.MoveNext();
                return OperandObjectType.Table;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordIndex))
            {
                e.MoveNext();
                return OperandObjectType.Index;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordDatabase))
            {
                e.MoveNext();
                return OperandObjectType.Database;
            }

            return OperandObjectType.None;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            throw new NotImplementedException();
        }

        public override int ExecuteNonQuery(object component)
        {
            var command = component as SqnDbCommand;
            command.DropIndex(this);
            return 0;
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return GetLegacyStrings(visitor).Join(" ");
        }

        protected IEnumerable<string> GetLegacyStrings(ILegacyToStringVisitor visitor)
        {
            yield return Constants.Sql.KeywordDrop;

            switch (ObjectType)
            {
                case OperandObjectType.Database:
                    yield return Constants.Sql.KeywordDatabase;
                    yield return Object.LegacyToString(visitor);
                    break;
                case OperandObjectType.Table:
                    yield return Constants.Sql.KeywordTable;
                    yield return Object.LegacyToString(visitor);
                    break;
                case OperandObjectType.Index:
                    yield return Constants.Sql.KeywordIndex;
                    yield return Object.LegacyToString(visitor);
                    yield return Constants.Sql.KeywordOn;
                    yield return ObjectOn.LegacyToString(visitor);
                    break;
            }
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Object;

            if (ObjectOn.HasValue())
            {
                yield return ObjectOn;
            }
        }
    }
}
