//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace System.Runtime
{
    internal class FromExpressionOperator : ExpressionOperator, ISelectExpressionOperator
    {
        public FromExpressionOperator()
        {
        }

        public FromExpressionOperator(IExpressionOperator o)
        {
            Operand = o;
        }

        public override bool IsEmpty()
        {
            return Operand.IsNull() || Operand.IsEmpty();
        }

        public override bool IsAggregate()
        {
            return Operand.IsAggregate();
        }

        public override string Name
        {
            get
            {
                if (Alias.IsNull())
                {
                    return Operand.Name;
                }

                return Alias.Name;
            }
            set
            {
                if (Alias.IsNull())
                {
                    Operand.Name = value;
                }
                else
                {
                    Alias.Name = value;
                }
            }
        }

        public bool AsKeyword
        {
            get;
            set;
        }

        public IValueOperand Alias
        {
            get;
            set;
        }

        public IExpressionOperator Operand
        {
            get;
            set;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            return Operand.PutInstructions(e);
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return GetLegacyStrings(visitor).Join(" ");
        }

        protected IEnumerable<string> GetLegacyStrings(ILegacyToStringVisitor visitor)
        {
            yield return Operand.LegacyToString(visitor);

            if (AsKeyword)
            {
                yield return Constants.Sql.KeywordAs;
            }

            if (Alias.HasValue())
            {
                yield return Alias.LegacyToString(visitor);
            }
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Operand;
        }
    }
}
