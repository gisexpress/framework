//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;

namespace System.Runtime
{
    internal class GroupOperator : ExpressionFunction, IGroupOperator
    {
        public GroupOperator()
        {
            Operands = OperandFactory.Default.CreateOperatorCollection(this);
        }

        public override bool IsEmpty()
        {
            return Operands.Count == 0;
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordGroup;
        }

        public IExpressionOperatorCollection Operands
        {
            get;
            protected set;
        }

        public IExpressionOperatorCollection HavingOperands
        {
            get;
            protected set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            var selectOperand = leftOperand as SelectOperator;

            if (selectOperand.HasValue() && e.Current.Equals(Constants.Sql.KeywordBy) && e.MoveNext())
            {
                var group = new GroupOperator();

                while (e.CanRead)
                {
                    IExpressionOperator o = Read(e, group.Operands);

                    group.Operands.Add(o);

                    if (e.Current.Equals(Constants.Sql.KeywordHaving) && e.MoveNext())
                    {
                        group.HavingOperands = OperandFactory.Default.CreateOperatorCollection(this);

                        while ((o = Read(e, group.HavingOperands)).HasValue())
                        {
                            group.HavingOperands.Add(o);

                            if (e.Current.Equals(Constants.Sql.KeywordOrder))
                            {
                                break;
                            }
                        }
                    }

                    if (e.Current.Equals(','))
                    {
                        e.MoveNext();
                    }

                    if (e.Current.Equals(Constants.Sql.KeywordOrder))
                    {
                        break;
                    }
                }

                if (group.Operands.Count > 0)
                {
                    selectOperand.GroupBy = group;
                    result = selectOperand;
                    return true;
                }
            }
            else
            {
                throw e.SyntaxError();
            }

            result = default(IExpressionFunction);
            return false;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            throw new NotImplementedException();
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            string r = string.Concat(Constants.Sql.KeywordGroup, " ", Constants.Sql.KeywordBy, " ", base.OnLegacyToString(visitor));

            if (HavingOperands.HasValue())
            {
                r = string.Concat(r, " ", Constants.Sql.KeywordHaving, " ", HavingOperands.LegacyToString(visitor));
            }

            return r;
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            foreach (IExpressionOperator o in Operands)
            {
                yield return o;
            }
        }
    }
}
