//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Reflection.Emit;

namespace System.Runtime
{
    internal class IsOperator : ExpressionFunction
    {
        public override bool IsEmpty()
        {
            return LeftOperand.IsNull() || LeftOperand.IsEmpty();
        }

        public override bool IsLogical()
        {
            return true;
        }

        public override string GetFunctionName()
        {
            return "Is";
        }

        public IExpressionOperator LeftOperand
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            if (e.Current.Equals(Constants.Sql.DbNull))
            {
                e.MoveNext();
                result = new IsOperator { LeftOperand = leftOperand };
                return true;
            }
            else if (e.Current.Equals(Constants.Sql.KeywordNot) && e.NextIs(Constants.Sql.DbNull))
            {
                e.MoveNext();
                e.MoveNext();
                result = new IsOperator { LeftOperand = new UnaryOperator(UnaryOperatorType.Not, leftOperand) };
                return true;
            }

            result = default(IExpressionFunction);
            return false;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            Type returnType = LeftOperand.PutInstructions(e);

            if (returnType.IsValueType)
            {
                LocalBuilder local = e.Generator.DeclareLocal(returnType);
                e.Generator.Emit(OpCodes.Ldloca, local);
                e.Generator.Emit(OpCodes.Initobj, returnType);
                e.Generator.Emit(OpCodes.Ldloc, local);
                e.Generator.Emit(OpCodes.Ceq);
            }
            else
            {
                e.Generator.Emit(OpCodes.Ldsfld, MethodCache.Data.DBNull);
                e.Generator.Emit(OpCodes.Ceq);
            }

            return Types.Boolean;
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return string.Concat(LeftOperand.LegacyToString(visitor), " ", Constants.Sql.KeywordIs, " ", Constants.Sql.DbNull);
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return LeftOperand;
        }
    }
}
