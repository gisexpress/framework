//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;

namespace System.Runtime
{
    internal class JoinOperator : ExpressionFunction, IJoinOperator
    {
        internal JoinType iType;

        public override bool IsEmpty()
        {
            return Operand.IsNull() || Operand.IsEmpty();
        }

        public override bool IsHandled()
        {
            return Operand.IsHandled();
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordJoin;
        }

        public JoinType Type
        {
            get { return iType; }
            set { iType = value; }
        }

        public IExpressionOperator Outer
        {
            get;
            set;
        }

        public IExpressionOperator Inner
        {
            get;
            set;
        }

        public IExpressionOperator Operand
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            throw new NotSupportedException();
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            throw new NotSupportedException();
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return string.Concat(Outer.LegacyToString(visitor), " ", Constants.Sql.KeywordJoin, " ", Inner.LegacyToString(visitor), " ", Constants.Sql.KeywordOn, " ", Operand.LegacyToString(visitor));
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Outer;
            yield return Inner;
            yield return Operand;
        }
    }
}
