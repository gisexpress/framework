//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.IO;
using System.Reflection.Emit;

namespace System.Runtime
{
    internal class OperandMember : ValueOperand, IOperandMember
    {
        public bool IsKey
        {
            get;
            set;
        }

        public bool NullKeyword
        {
            get;
            set;
        }

        public bool IsNullable
        {
            get;
            set;
        }

        public bool IsIdentity
        {
            get;
            set;
        }

        public IValueOperand Member
        {
            get;
            set;
        }

        public IValueOperand MemberType
        {
            get;
            set;
        }

        public IExpressionOperatorCollection IdentityParameters
        {
            get;
            set;
        }

        public IExpressionOperatorCollection MemberTypeParameters
        {
            get;
            set;
        }

        public override string Name
        {
            get { return Member.Name; }
            set { Member.Name = value; }
        }

        internal bool TryRead(ITokenEnumerator e, ExpressionOperatorCollection operands, bool typeDefinition)
        {
            IsNullable = true;
            Member = (IValueOperand)Read(e, operands);

            if (typeDefinition)
            {
                if (e.Current is WordToken)
                {
                    MemberType = (IValueOperand)Read(e, operands);

                    if (e.Current.Equals('('))
                    {
                        MemberTypeParameters = new ExpressionOperatorCollection();

                        if (!ReadParameters(e, MemberTypeParameters))
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    throw e.SyntaxError();
                }

                if (e.Current.Equals(Constants.Sql.DbNull))
                {
                    e.MoveNext();
                    IsNullable = true;
                    NullKeyword = true;
                }
                else if (e.Current.Equals(Constants.Sql.KeywordNot))
                {
                    if (e.ReadNext(Constants.Sql.DbNull))
                    {
                        e.MoveNext();
                        IsNullable = false;
                    }
                    else
                    {
                        throw e.SyntaxError();
                    }
                }

                if (e.Current.Equals(Constants.Sql.KeywordIdentity))
                {
                    e.MoveNext();
                    IsIdentity = true;

                    if (e.Current.Equals('('))
                    {
                        IdentityParameters = new ExpressionOperatorCollection();

                        if (!ReadParameters(e, IdentityParameters))
                        {
                            return false;
                        }
                    }
                }

                if (e.Current.Equals(Constants.Sql.KeywordPrimary))
                {
                    e.MoveNext();

                    if (e.Current.Equals(Constants.Sql.KeywordKey))
                    {
                        e.MoveNext();
                    }

                    IsKey = true;
                }
            }

            return true;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            e.Generator.Emit(OpCodes.Ldstr, Name);
            return Types.String;
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return GetLegacyStrings(visitor).Join(" ");
        }

        protected IEnumerable<string> GetLegacyStrings(ILegacyToStringVisitor visitor)
        {
            yield return Member.LegacyToString(visitor);

            if (MemberType.HasValue())
            {
                if (MemberTypeParameters.HasValue() && MemberTypeParameters.Count > 0)
                {
                    yield return string.Concat(MemberType.LegacyToString(visitor), '(', MemberTypeParameters.LegacyToString(visitor), ')');
                }
                else
                {
                    yield return MemberType.LegacyToString(visitor);
                }

                if (IsNullable)
                {
                    if (NullKeyword)
                    {
                        yield return Constants.Sql.DbNull;
                    }
                }
                else
                {
                    yield return Constants.Sql.KeywordNot;
                    yield return Constants.Sql.DbNull;
                }

                if (IsIdentity)
                {
                    if (IdentityParameters.HasValue() && IdentityParameters.Count > 0)
                    {
                        yield return string.Concat(Constants.Sql.KeywordIdentity, '(', IdentityParameters.LegacyToString(visitor), ')');
                    }
                    else
                    {
                        yield return Constants.Sql.KeywordIdentity;
                    }
                }

                if (IsKey)
                {
                    yield return Constants.Sql.KeywordPrimary;
                    yield return Constants.Sql.KeywordKey;
                }
            }
        }
    }
}
