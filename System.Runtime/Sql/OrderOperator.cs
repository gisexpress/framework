//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;

namespace System.Runtime
{
    internal class OrderOperator : ExpressionFunction, IOrderOperator
    {
        static OrderOperator()
        {
            GetRows = typeof(SelectOperator.DataRecordSet).GetField("Rows", BindingFlags.NonPublic | BindingFlags.Instance);
            EvaluateOrderN = typeof(SelectOperator.DataRecordSet).GetMethod("EvaluateOrderN", BindingFlags.NonPublic | BindingFlags.Instance);
        }

        protected static readonly FieldInfo GetRows;
        protected static readonly MethodInfo EvaluateOrderN;

        public override bool IsEmpty()
        {
            return Operands.IsNull() || Operands.Count == 0;
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordOrder;
        }

        public List<IOrderOperand> Operands
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            var selectOperand = leftOperand as SelectOperator;

            if (selectOperand.HasValue() && e.Current.Equals(Constants.Sql.KeywordBy) && e.MoveNext())
            {
                var operands = OperandFactory.Default.CreateOperatorCollection(this);
                var orderOperator = new OrderOperator { Operands = new List<IOrderOperand>() };

                while (e.CanRead)
                {
                    IExpressionOperator o = Read(e, operands);

                    if (e.Current.Equals(Constants.Sql.KeywordOrderAsc))
                    {
                        e.MoveNext();
                        orderOperator.Operands.Add(new OrderOperand(o, ListSortDirection.Ascending) { AscKeyword = true });
                    }
                    else if (e.Current.Equals(Constants.Sql.KeywordOrderDesc))
                    {
                        e.MoveNext();
                        orderOperator.Operands.Add(new OrderOperand(o, ListSortDirection.Descending));
                    }
                    else
                    {
                        operands.Add(o);
                    }

                    if (e.Current.Equals(','))
                    {
                        e.MoveNext();
                    }

                    if (e.Current.Equals(')'))
                    {
                        break;
                    }
                }

                while (operands.Count > 0)
                {
                    IExpressionOperator operand = operands.First();
                    orderOperator.Operands.Add(new OrderOperand(operand));
                    operands.RemoveAt(0);
                }

                if (orderOperator.Operands.Count > 0)
                {
                    foreach (ISelectExpressionOperator property in selectOperand.Fields.OfType<ISelectExpressionOperator>())
                    {
                        if (property.Alias.HasValue())
                        {
                            IOrderOperand operand = orderOperator.Operands.FirstOrDefault(o => o.Operand.Name.Equals(property.Name));

                            if (operand.HasValue())
                            {
                                operand.Name = property.Name;
                                operand.Operand = property;
                            }
                        }
                    }

                    selectOperand.OrderBy = orderOperator;
                    result = selectOperand;
                    return true;
                }
            }
            else
            {
                throw e.SyntaxError();
            }

            result = default(IExpressionFunction);
            return false;
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            int n = 0;

            e.Generator.Emit(OpCodes.Ldarg_0);
            e.Generator.Emit(OpCodes.Ldfld, GetRows);

            foreach (IOrderOperand item in Operands)
            {
                e.Generator.Emit(OpCodes.Ldarg_0);
                e.Generator.Emit(OpCodes.Ldc_I4, n);
                e.Generator.Emit(OpCodes.Call, MethodCache.MakeGenericMethod(EvaluateOrderN, item.ReturnType));
                e.Generator.Emit(OpCodes.Call, MethodCache.GetProperty(MethodCache.MakeGenericType(Types.ComparerT, item.ReturnType), "Default").GetGetMethod());

                if (n == 0)
                {
                    if (item.SortDirection == ListSortDirection.Ascending)
                    {
                        e.Generator.Emit(OpCodes.Call, MethodCache.Linq.OrderBy.MakeGenericMethod(MethodCache.IRelationalDataRecord, item.ReturnType));
                    }
                    else
                    {
                        e.Generator.Emit(OpCodes.Call, MethodCache.Linq.OrderByDescending.MakeGenericMethod(MethodCache.IRelationalDataRecord, item.ReturnType));
                    }
                }
                else
                {
                    if (item.SortDirection == ListSortDirection.Ascending)
                    {
                        e.Generator.Emit(OpCodes.Call, MethodCache.Linq.ThenBy.MakeGenericMethod(MethodCache.IRelationalDataRecord, item.ReturnType));
                    }
                    else
                    {
                        e.Generator.Emit(OpCodes.Call, MethodCache.Linq.ThenByDescending.MakeGenericMethod(MethodCache.IRelationalDataRecord, item.ReturnType));
                    }
                }

                n++;
            }

            return MethodCache.IEnumerableRelationalDataRecord;
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return string.Concat(Constants.Sql.KeywordOrder, " ", Constants.Sql.KeywordBy, " ", this.Select(o => o.LegacyToString(visitor)).Join(", "));
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            foreach (IExpressionOperator o in Operands)
            {
                yield return o;
            }
        }
    }
}
