//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace System.Runtime
{
    partial class SelectOperator
    {
        partial class DataRecordSet
        {
            protected internal class SelectExpressionOperatorCollection : ExpressionOperatorCollection, ISelectExpressionOperatorCollection
            {
                public SelectExpressionOperatorCollection(DataRecordSet e)
                {
                    bool isEmpty = e.From.Count == 0;
                    bool isSingle = e.From.Count == 1;

                    IDataTable dataSourceDefault = e.From.FirstOrDefault();

                    foreach (IExpressionOperator o in e.Operand.Fields)
                    {
                        if (isEmpty == false && o is AsteriskOperand)
                        {
                            IDataTable dataSource;

                            if (string.IsNullOrEmpty(o.Name))
                            {
                                dataSource = dataSourceDefault;
                            }
                            else if (e.From.TryGetValue(o.Name, out dataSource))
                            {
                                // continue
                            }
                            else
                            {
                                throw new ExpressionParserException("PrefixDoesntMatch".FormatInvariant(o.Name));
                            }

                            if (isSingle)
                            {
                                AddFields(dataSource, true);
                            }
                            else if (dataSource.IsNull())
                            {
                                foreach (DataTable item in e.From)
                                {
                                    AddFields(item, false);
                                }
                            }
                            else
                            {
                                AddFields(dataSource, false);
                            }

                            continue;
                        }

                        if (isSingle)
                        {
                            if (o is IValueOperand)
                            {
                                string value;

                                if (dataSourceDefault.GetFieldNameWithoutPrefix(o.Name, out value))
                                {
                                    o.Name = value;
                                }
                            }
                        }

                        Add(o as ISelectExpressionOperator ?? new SelectExpressionOperator(o));
                    }
                }

                void AddFields(IDataTable dataSource, bool isSingle)
                {
                    foreach (IMemberAccessor member in dataSource.GetProperties())
                    {
                        if (isSingle)
                        {
                            Add(new SelectExpressionOperator(new OperandProperty(member.Name) { MemberType = member.PropertyType }));
                        }
                        else
                        {
                            Add(new SelectExpressionOperator(new OperandProperty(string.Concat(dataSource.Name, '.', member.Name)) { MemberType = member.PropertyType }));
                        }
                    }
                }

                protected bool Aggregate;

                public bool IsAggregate()
                {
                    return Aggregate;
                }

                public new ISelectExpressionOperator this[string name]
                {
                    get { return (ISelectExpressionOperator)base[name]; }
                }

                protected override void InsertItem(int index, IExpressionOperator item)
                {
                    if ((item as ISelectExpressionOperator).IsAggregate())
                    {
                        Aggregate = true;
                    }

                    base.InsertItem(index, item);
                }

                public override string LegacyToString(ILegacyToStringVisitor visitor)
                {
                    return string.Concat(Constants.Sql.KeywordSelect, " ", base.LegacyToString(visitor));
                }

                public new IEnumerator<IMemberAccessor> GetEnumerator()
                {
                    return Items.Cast<IMemberAccessor>().GetEnumerator();
                }
            }
        }
    }
}