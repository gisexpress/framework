//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;

namespace System.Runtime
{
    partial class SelectOperator
    {
        protected internal partial class DataRecordSet : IDataRecordSet, IDataRecord, ISupportInstructions, ICloneable
        {
            static DataRecordSet()
            {
                MethodGetParameters = typeof(DataRecordSet).GetProperty("Parameters").GetGetMethod();
            }

            public DataRecordSet(IDataSet dataSet, SelectOperator operand)
            {
                DataSet = dataSet;
                Operand = operand;
                From = new TableCollection(DataSet, this);
                Fields = new SelectExpressionOperatorCollection(this);
            }

            protected static readonly MethodInfo MethodGetParameters;

            protected readonly IDataSet DataSet;
            protected readonly SelectOperator Operand;

            protected TableCollection From;
            protected ISelectExpressionOperatorCollection Fields;

            protected IRelationalDataRecord First;
            [Obfuscation(Exclude = true)]
            protected IEnumerable<IRelationalDataRecord> Rows;
            protected IEnumerator<IRelationalDataRecord> Enumerator;

            protected bool SubQueriesFlag;
            protected List<SelectOperator> SubQueries;
            protected List<IAggregateFunction> AggregateFuncs;

            public int FieldCount
            {
                get { return Fields.Count; }
            }

            [Obfuscation(Exclude = true)]
            public IDataParameterCollection Parameters
            {
                get { return DataSet.Parameters; }
            }

            public MemberAccessorCollection Properties
            {
                get { return new MemberAccessorCollection(Fields.Select(e => new MemberAccessor(e.Name, e.ReturnType) as IMemberAccessor)); }
            }

            public void Reset()
            {
                Enumerator = AsEnumerable().GetEnumerator();
            }

            public bool MoveNext()
            {
                return Enumerator.MoveNext();
            }

            object IEnumerator.Current
            {
                get { return this; }
            }

            public IDataRecord Current
            {
                get { return this; }
            }

            public string GetName(int i)
            {
                return Fields[i].Name;
            }

            public int GetOrdinal(string name)
            {
                return Fields.IndexOf(Fields[name]);
            }

            public object GetValue(int i)
            {
                return EvaluateInternal(Fields[i], Enumerator.Current);
            }

            public object this[int i]
            {
                get { return EvaluateInternal(Fields[i], Enumerator.Current); }
            }

            public object this[string name]
            {
                get { return EvaluateInternal(Fields[name], Enumerator.Current); }
            }

            #region IDataRecord

            bool IDataRecord.GetBoolean(int i)
            {
                return (bool)GetValue(i);
            }

            byte IDataRecord.GetByte(int i)
            {
                return (byte)GetValue(i);
            }

            long IDataRecord.GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
            {
                throw new NotSupportedException();
            }

            char IDataRecord.GetChar(int i)
            {
                return (char)GetValue(i);
            }

            long IDataRecord.GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
            {
                throw new NotSupportedException();
            }

            IDataReader IDataRecord.GetData(int i)
            {
                throw new NotSupportedException();
            }

            string IDataRecord.GetDataTypeName(int i)
            {
                throw new NotSupportedException();
            }

            DateTime IDataRecord.GetDateTime(int i)
            {
                return (DateTime)GetValue(i);
            }

            decimal IDataRecord.GetDecimal(int i)
            {
                return (decimal)GetValue(i);
            }

            double IDataRecord.GetDouble(int i)
            {
                return (double)GetValue(i);
            }

            Type IDataRecord.GetFieldType(int i)
            {
                return Fields[i].ReturnType ?? Types.Object;
            }

            float IDataRecord.GetFloat(int i)
            {
                return (float)GetValue(i);
            }

            Guid IDataRecord.GetGuid(int i)
            {
                return (Guid)GetValue(i);
            }

            short IDataRecord.GetInt16(int i)
            {
                return (short)GetValue(i);
            }

            int IDataRecord.GetInt32(int i)
            {
                return (int)GetValue(i);
            }

            long IDataRecord.GetInt64(int i)
            {
                return (long)GetValue(i);
            }

            string IDataRecord.GetString(int i)
            {
                return (string)GetValue(i);
            }

            int IDataRecord.GetValues(object[] values)
            {
                for (int i = 0; i < Math.Min(values.Length, FieldCount); i++)
                {
                    values[i] = GetValue(i);
                }

                return values.Length;
            }

            bool IDataRecord.IsDBNull(int i)
            {
                return GetValue(i).IsNullOrDBNull();
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                return GetEnumerator();
            }

            #endregion

            #region ITypedList

            string ITypedList.GetListName(PropertyDescriptor[] listAccessors)
            {
                return string.Empty;
            }

            PropertyDescriptorCollection ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors)
            {
                throw new NotImplementedException();
            }

            #endregion

            [Obfuscation(Exclude = true)]
            public T ExecuteScalar<T>()
            {
                using (IEnumerator<IDataRecord> e = GetEnumerator())
                {
                    if (e.MoveNext())
                    {
                        return (T)e.Current.GetValue(0);
                    }
                }

                return default(T);
            }

            protected void Group()
            {
                if (Operand.GroupBy.IsNull())
                {
                    Rows = Enumerable.Repeat(new RelationalDataRecord(Rows), 1);
                }
                else
                {
                    foreach (IExpressionOperator operand in Operand.GroupBy.Operands)
                    {
                        Rows = Rows.GroupBy(row => operand.Evaluate(row), (key, rows) => { return new RelationalDataRecord(rows, operand.Name, key); });
                    }

                    if (Operand.GroupBy.HavingOperands.HasValue())
                    {
                        foreach (IExpressionOperator operand in Operand.GroupBy.HavingOperands)
                        {
                            Rows = Rows.Where(row => (bool)operand.Evaluate(row));
                        }
                    }
                }
            }

            protected IEnumerable<IRelationalDataRecord> Sort()
            {
                var orderedRows = default(IOrderedEnumerable<IRelationalDataRecord>);

                foreach (IOrderOperand item in Operand.OrderBy.Operands)
                {
                    if (orderedRows.IsNull())
                    {
                        if (item.SortDirection == ListSortDirection.Ascending)
                        {
                            orderedRows = Rows.OrderBy(row => EvaluateInternal(item.Operand, row));
                        }
                        else
                        {
                            orderedRows = Rows.OrderByDescending(row => EvaluateInternal(item.Operand, row));
                        }
                    }
                    else
                    {
                        if (item.SortDirection == ListSortDirection.Ascending)
                        {
                            orderedRows = orderedRows.ThenBy(row => EvaluateInternal(item.Operand, row));
                        }
                        else
                        {
                            orderedRows = orderedRows.ThenByDescending(row => EvaluateInternal(item.Operand, row));
                        }
                    }
                }

                return orderedRows ?? Rows;
            }

            [Obfuscation(Exclude = true)]
            protected Func<IRelationalDataRecord, TValue> EvaluateOrderN<TValue>(int n)
            {
                return new Func<IRelationalDataRecord, TValue>(row => (TValue)EvaluateInternal(Operand.OrderBy.Operands[n], row));
            }

            [Obfuscation(Exclude = true)]
            protected IEnumerable<IRelationalDataRecord> AsEnumerable()
            {
                if (Rows.IsNull())
                {
                    Rows = From.GetRows();
                    First = Rows.FirstOrDefault();

                    if (First.HasValue())
                    {
                        SubQueries = Operand.OfType<SelectOperator>(true).Where(o => IsSelfChild(o)).Distinct().ToList();
                        AggregateFuncs = Operand.OfType<IAggregateFunction>(true).Where(o => IsSelfChild(o)).Distinct().ToList();
                        SubQueriesFlag = SubQueries.Count > 0;

                        if (AggregateFuncs.Count > 0 || SubQueriesFlag)
                        {
                            AggregateFuncs.ForEach(o => o.Operand.Evaluate(First));

                            if (SubQueriesFlag)
                            {
                                SubQueries.ForEach(o => o.IsSubQuery = true);
                                SubQueries.ForEach(o => o.ParentRow = First);
                                SubQueries.ForEach(o => o.Evaluate(DataSet));
                            }
                        }

                        if (Operand.Where.HasValue() && !Operand.Where.IsHandled())
                        {
                            Rows = Rows.Where(row => (bool)EvaluateInternal(Operand.Where, row));
                        }

                        if (Fields.IsAggregate() || Operand.GroupBy.HasValue() || Operand.Distinct)
                        {
                            Rows = Rows.Select(row => row.Clone());

                            if (Operand.Distinct)
                            {
                                Rows = Rows.GroupBy(r => Hash.Get(Operand.Fields.Select(e => e.Evaluate(r)))).Select(r => r.First());
                            }
                            else
                            {
                                Group();
                            }

                            if (Operand.OrderBy.HasValue())
                            {
                                First = Rows.FirstOrDefault();
                                Rows = Sort();
                            }
                        }
                        else if (Operand.OrderBy.HasValue())
                        {
                            Rows = Rows.Select(row => row.Clone());
                            Rows = Sort();
                        }
                    }
                    else if (Fields.IsAggregate())
                    {
                        return new IRelationalDataRecord[] { new RelationalDataRecord() };
                    }
                }

                return Rows;
            }

            protected bool IsSelfChild(IExpressionOperator o)
            {
                IExpressionOperator parent = o.Parent;

                while (true)
                {
                    if (parent.IsNull())
                    {
                        return false;
                    }

                    if (parent is ISelectOperator)
                    {
                        break;
                    }

                    parent = parent.Parent;
                }

                return Operand == parent;
            }

            protected object EvaluateInternal(IExpressionOperator operand, IRelationalDataRecord row)
            {
                row.DataSet = DataSet;

                if (SubQueriesFlag)
                {
                    SubQueries.ForEach(o => o.ParentRow = row);
                }

                if (Operand.IsSubQuery)
                {
                    row.Parent = Operand.ParentRow;
                }

                row.Parameters = DataSet.Parameters;

                return operand.Evaluate(row);
            }

            int ISupportInstructions.PutMemberInstructions(IInstructionEventArgs e, string name, IEnumerator<string> members, out Type returnType)
            {
                if (name.StartsWith(RelationalDataRecord.ParameterPrefix))
                {
                    var parameter = Parameters[name] as IDbDataParameter;

                    if (parameter.HasValue())
                    {
                        e.Generator.Emit(OpCodes.Ldarg_0);
                        e.Generator.Emit(OpCodes.Call, MethodGetParameters);
                        e.Generator.Emit(OpCodes.Ldstr, name);
                        e.Generator.Emit(OpCodes.Call, MethodCache.DataCommand.ParametersIndexer);
                        e.Generator.Emit(OpCodes.Castclass, Types.IDataParameter);
                        e.Generator.Emit(OpCodes.Call, MethodCache.DataCommand.GetParameterValue);

                        returnType = parameter.Value.GetType();
                        e.Generator.Emit(OpCodes.Unbox_Any, returnType);

                        return 1;
                    }
                }

                returnType = default(Type);
                return 0;
            }

            public IEnumerator<IDataRecord> GetEnumerator()
            {
                Reset();
                return this;
            }

            public IEnumerable<T> AsEnumerable<T>()
            {
                using (IEnumerator<IDataRecord> e = GetEnumerator())
                {
                    while (e.MoveNext())
                    {
                        yield return (T)e.Current.GetValue(0);
                    }
                }
            }

            public object Clone()
            {
                return Enumerator.Current.Clone();
            }

            public override int GetHashCode()
            {
                return Enumerator.Current.Row.GetHashCode();
            }

            public void Dispose()
            {
                GC.SuppressFinalize(this);
            }
        }
    }
}