//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace System.Runtime
{
    partial class SelectOperator
    {
        partial class DataRecordSet
        {
            protected class JoinPair
            {
                public DataTable Outer;
                public DataTable Inner;

                public IExpressionOperator OuterCriteria;
                public IExpressionOperator InnerCriteria;

                public IExpressionOperator OuterOperand;
                public IExpressionOperator InnerOperand;

                public static List<JoinPair> GetJoinPairs(IEnumerable<DataTable> tables, List<IExpressionOperator> operands)
                {
                    var pairs = new List<JoinPair>();
                    var tableSet = new Dictionary<IDataTable, int>();
                    var joinOperands = new List<IBinaryOperator>(GetJoinOperands(operands));

                    foreach (DataTable outer in tables)
                    {
                        foreach (DataTable inner in tables)
                        {
                            if (outer == inner)
                            {
                                continue;
                            }

                            IExpressionOperator outerOperand;
                            IExpressionOperator innerOperand;

                            if (FindJoinOperands(operands, joinOperands, outer, inner, out outerOperand, out innerOperand))
                            {
                                int n;

                                if (tableSet.TryGetValue(outer, out n))
                                {
                                    tableSet[outer] = n + 1;
                                }
                                else
                                {
                                    tableSet.Add(outer, 1);
                                }

                                if (tableSet.TryGetValue(inner, out n))
                                {
                                    tableSet[inner] = n + 1;
                                }
                                else
                                {
                                    tableSet.Add(inner, 1);
                                }

                                pairs.Add(new JoinPair { Outer = outer, Inner = inner, OuterOperand = outerOperand, InnerOperand = innerOperand });
                            }
                        }
                    }

                    foreach (JoinPair pair in pairs)
                    {
                        pair.OuterCriteria = FindCriteria(pair.Outer, joinOperands);
                        pair.InnerCriteria = FindCriteria(pair.Inner, joinOperands);

                        if (tableSet[pair.Outer] < tableSet[pair.Inner])
                        {
                            pair.Inverse();
                        }
                    }

                    return pairs.OrderByDescending(pair => tableSet[pair.Outer]).ToList();
                }

                public static IEnumerable<IBinaryOperator> GetJoinOperands(IList<IExpressionOperator> operands)
                {
                    return operands.SelectMany(e => e.OfType<ValueOperand>(true)).Where(o => o.Parent is IBinaryOperator).Select(o => (IBinaryOperator)o.Parent).Distinct();
                }

                protected static bool FindJoinOperands(List<IExpressionOperator> operands, IList<IBinaryOperator> joinOperands, IDataTable outer, IDataTable inner, out IExpressionOperator outerOperand, out IExpressionOperator innerOperand)
                {
                    int n = 0;
                    string value;

                    while (joinOperands.Count > n)
                    {
                        IBinaryOperator o = joinOperands[n++];

                        if (outer.GetFieldNameWithoutPrefix(o.LeftOperand.Name, out value))
                        {
                            outerOperand = o.LeftOperand;

                            if (inner.GetFieldNameWithoutPrefix(o.RightOperand.Name, out value))
                            {
                                o.Handled = true;
                                innerOperand = o.RightOperand;

                                operands.Remove(o);
                                joinOperands.Remove(o);

                                return true;
                            }
                        }

                        if (inner.GetFieldNameWithoutPrefix(o.LeftOperand.Name, out value))
                        {
                            innerOperand = o.LeftOperand;

                            if (outer.GetFieldNameWithoutPrefix(o.RightOperand.Name, out value))
                            {
                                o.Handled = true;
                                outerOperand = o.RightOperand;

                                operands.Remove(o);
                                joinOperands.Remove(o);

                                return true;
                            }
                        }
                    }

                    outerOperand = default(IExpressionOperator);
                    innerOperand = default(IExpressionOperator);

                    return false;
                }

                public static IExpressionOperator FindCriteria(DataTable table, IEnumerable<IBinaryOperator> operands)
                {
                    var criteria = default(IExpressionOperator);

                    foreach (IBinaryOperator o in operands.Where(e => e.IsConstant()))
                    {
                        string field;

                        if (o.LeftOperand is IBinaryOperator || o.RightOperand is IBinaryOperator)
                        {
                            continue;
                        }

                        if (table.Name.EqualsIgnoreCase(o.Name) || table.GetFieldNameWithoutPrefix(o.Name, out field) || table.IsMember(o.Name))
                        {
                            criteria = o.Clone();
                            o.Handled = true;
                        }
                    }

                    return criteria;
                }

                protected void Inverse()
                {
                    DataTable o = Outer;
                    IExpressionOperator oo = OuterOperand;

                    Outer = Inner;
                    Inner = o;

                    OuterOperand = InnerOperand;
                    InnerOperand = oo;
                }

                public override string ToString()
                {
                    return string.Concat(OuterOperand.LegacyToString(), " ? ", InnerOperand.LegacyToString());
                }
            }
        }
    }
}