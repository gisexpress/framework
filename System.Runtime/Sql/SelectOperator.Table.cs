//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;

namespace System.Runtime
{
    partial class SelectOperator
    {
        partial class DataRecordSet
        {
            protected class DataTable : DataSource
            {
                public DataTable(IDataSet dataSet, IExpressionOperator operand)
                    : base(dataSet, operand.Name)
                {
                    Operand = operand;
                }

                IEnumerable<IDataRecord> Rows;
                readonly IExpressionOperator Operand;

                public override IEnumerable<IDataRecord> GetRows()
                {
                    return Rows ?? (Rows = GetRowsInternal());
                }

                IEnumerable<IDataRecord> GetRowsInternal()
                {
                    ISelectExpressionOperator select;

                    if ((select = Operand as ISelectExpressionOperator).HasValue())
                    {
                        if (select.Operand is ISelectOperator)
                        {
                            return select.Operand.Evaluate(DataSet) as IEnumerable<IDataRecord>;
                        }
                        
                        if (select.Operand is IValueOperand)
                        {
                            return DataSet.GetRows(select.Operand.Name);
                        }
                    }

                    return base.GetRows() ?? Operand.Evaluate(DataSet) as IEnumerable<IDataRecord>;
                }

                public override MemberAccessorCollection GetProperties()
                {
                    var e = Operand as ISelectExpressionOperator;

                    if (e.HasValue())
                    {
                        if (e.Operand is ISelectOperator)
                        {
                            return ((IDataRecordSet)e.Operand.Evaluate(DataSet)).Properties;
                        }

                        if (e.Operand is IValueOperand)
                        {
                            return DataSet.GetProperties(e.Operand.Name);
                        }
                    }

                    return base.GetProperties();
                }
            }
        }
    }
}