//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;

namespace System.Runtime
{
    internal class UpdateOperator : ExpressionFunction, IUpdateOperator
    {
        public override bool IsEmpty()
        {
            return (Table.IsNull() || Table.IsEmpty()) || (Fields.IsNull() || Fields.IsEmpty()) || (Values.IsNull() || Values.IsEmpty());
        }

        public override string GetFunctionName()
        {
            return Constants.Sql.KeywordUpdate;
        }

        public override bool HasLeftOperand()
        {
            return false;
        }

        public IExpressionOperator Table
        {
            get;
            set;
        }

        public IExpressionOperatorCollection Fields
        {
            get;
            set;
        }

        public IExpressionOperatorCollection Values
        {
            get;
            set;
        }

        public IWhereOperator Where
        {
            get;
            set;
        }

        public override bool TryParse(ITokenEnumerator e, IExpressionOperator leftOperand, out IExpressionFunction result)
        {
            var o = new UpdateOperator();
            var operands = new ExpressionOperatorCollection();

            result = o;
            o.Table = Read(e, operands);

            if (e.Current.Equals(Constants.Sql.KeywordSet) && e.MoveNext())
            {
                o.Fields = new ExpressionOperatorCollection();
                o.Values = new ExpressionOperatorCollection();

                while (e.CanRead)
                {
                    o.Fields.Add(Read(e, operands));

                    if (e.Current.Equals('=') && e.MoveNext())
                    {
                        o.Values.Add(Read(e, operands));
                    }

                    if (e.Current.Equals(',') && e.MoveNext())
                    {
                        continue;
                    }

                    if (e.Current.Equals(Constants.Sql.KeywordWhere))
                    {
                        o.Where = new WhereOperator { Operand = Read(e) };
                        break;
                    }
                }

                if (o.Fields.Count != o.Values.Count)
                {
                    throw new DataException("ColumnsValuesMatchException");
                }

                return true;
            }

            throw e.SyntaxError();
        }

        protected override Type OnPutInstructions(IInstructionEventArgs e)
        {
            throw new NotImplementedException();
        }

        public override int ExecuteNonQuery(object component)
        {
            throw new NotImplementedException();
        }

        protected override string OnLegacyToString(ILegacyToStringVisitor visitor)
        {
            return GetLegacyStrings(visitor).Join(" ");
        }

        protected IEnumerable<string> GetLegacyStrings(ILegacyToStringVisitor visitor)
        {
            yield return Constants.Sql.KeywordUpdate;
            yield return Table.LegacyToString(visitor);

            yield return Constants.Sql.KeywordSet;
            yield return Enumerable.Range(0, Fields.Count).Select((n) => string.Concat(Fields[n].LegacyToString(visitor), " = ", Values[n].LegacyToString(visitor))).Join(", ");

            if (Where.IsNull())
            {
                yield break;
            }

            yield return Where.LegacyToString(visitor);
        }

        public override IEnumerator<IExpressionOperator> GetEnumerator()
        {
            yield return Table;

            foreach (IExpressionOperator o in Fields)
            {
                yield return o;
            }

            foreach (IExpressionOperator o in Values)
            {
                yield return o;
            }

            yield return Where;
        }
    }
}
