//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Reflection;
using System.Web;

namespace System.Security.Accounts
{
    public sealed class AccountManager
    {
        public AccountManager()
            : this(default(string))
        {
        }

        public AccountManager(string fileName)
        {
            FileName = fileName ?? HttpContext.Current.Server.MapPath(DefaultFile);
            Component = new AccountManagerInternal(Assembly.GetCallingAssembly(), FileName);
        }

        private readonly string FileName;
        private readonly AccountManagerInternal Component;
        private readonly static string DefaultFile = "~/App_Data/Accounts.xml";

        public AccountDataSet Data
        {
            get { return Component.Data; }
        }

        public Guid CreateUser(string userName, string password)
        {
            var user = Component.CreateUser(userName, password);

            if (user.HasValue())
            {
                Component.Save();
                return user.Id;
            }

            return Guid.Empty;
        }

        public Guid CreateSubscription(string userName, string licenseName, int days, int expirationDays)
        {
            Guid id = Component.CreateSubscription(userName, licenseName, days, expirationDays);

            if (!id.IsEmpty())
            {
                Component.Save();
            }

            return id;
        }

        public byte[] CreateLicence(string data)
        {
            byte[] licenseBytes;

            if (Component.ActivateUser(data, out licenseBytes))
            {
                Component.Save();
            }

            return licenseBytes;
        }

        public byte[] GetSubscriptionBytes(string data)
        {
            byte[] licenseBytes;

            if (Component.GetSubscriptionBytes(data, out licenseBytes))
            {
                Component.Save();
            }

            return licenseBytes;
        }

        public void Save()
        {
            Component.Save();
        }
    }
}
