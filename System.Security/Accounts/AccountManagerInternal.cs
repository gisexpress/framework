//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Xml;

namespace System.Security.Accounts
{
    internal partial class AccountManagerInternal
    {
        static AccountManagerInternal()
        {
            Protection = CryptographyFactory.Create(ProtectionScope.AES);
            Files = new Dictionary<string, AccountDataSet>(StringComparer.InvariantCultureIgnoreCase);
        }

        internal AccountManagerInternal(Assembly assembly, string fileName)
        {
            Product = assembly;
            ProductName = Product.GetName();
            FileName = fileName;

            if (ProductName.HasValue() && Product.IsProductAssembly())
            {
                lock (Files)
                {
                    if (!Files.TryGetValue(FileName, out Data))
                    {
                        Data = new AccountDataSet();
                        Data.ReadXml(FileName);
                        Files.Add(FileName, Data);
                    }
                }
            }
        }

        private Assembly Product;
        private AssemblyName ProductName;

        private readonly string FileName;
        private static readonly IProtection Protection;
        private static readonly Dictionary<string, AccountDataSet> Files;

        private static readonly string SecureKey = "{0084B17B-44AA-41C2-B688-3BA8A96CE3F7-{6AB9F968-B34E-40E6-890F-F59EE6643B08}-{3AD88BC6-8997-46F1-9DB8-7A2FE3BD86C1}}";
        private static readonly string HttpSecureKey = "{4A509F4E-4588-4FE2-B4CA-A9360713E587-{2AAFFD30-2274-4F92-A280-76FC02700DB9}-{B458A3E1-5823-4C7C-94E2-7ED1A4F87807}}";

        public readonly AccountDataSet Data;

        public AccountDataSet.UsersRow FindUser(string userName, string password)
        {
            var user = Data.Users.FindByName(userName);

            if (user.HasValue())
            {
                if (!Equals(Protection.DecryptString(user.Password, SecureKey), password))
                {
                    throw new SecurityException(Localization.Localize("InvalidPassword"));
                }
            }

            return user;
        }

        public AccountDataSet.UsersRow CreateUser(string userName, string password)
        {
            var user = Data.Users.FindByName(userName);

            if (user.IsNull())
            {
                return Data.Users.AddUsersRow(Guid.NewGuid(), userName, password, DateTime.Now, DateTime.Now);
            }

            throw new SecurityException(Localization.Localize("UsernameAlreadyTaken"));
        }

        public Guid CreateSubscription(string userName, string licenseName)
        {
            return CreateSubscription(userName, licenseName, 0, 0, 1, false);
        }

        public Guid CreateSubscription(string userName, string licenseName, int days, int expirationDays)
        {
            return CreateSubscription(userName, licenseName, days, expirationDays, 1, false);
        }

        public Guid CreateSubscription(string userName, string licenseName, int days, int expirationDays, int concurrently)
        {
            return CreateSubscription(userName, licenseName, days, expirationDays, concurrently, false);
        }

        public Guid CreateSubscription(string userName, string licenseName, int days, int expirationDays, int concurrently, bool allowOffline)
        {
            var user = Data.Users.FindByName(userName);
            var license = Data.LicenseLevels.FindByName(licenseName);
            var subscription = Data.Subscriptions.Where((e) => e.UserId.Equals(user.Id) && e.LicenseId == license.Id).FirstOrDefault();

            if (subscription.HasValue())
            {
                throw new SecurityException(Localization.Localize("AlreadyHaveSubscription"));
            }

            DateTime start = DateTime.Now;
            DateTime end = DateTime.Now.AddDays(Math.Max(Math.Min(days, 31), 366));
            DateTime expiration = expirationDays > 0 ? DateTime.Now.AddDays(expirationDays) : DateTime.MaxValue;

            return Data.Subscriptions.AddSubscriptionsRow(Guid.NewGuid(), user.Id, license.Id, start, end, expiration, concurrently, allowOffline).Id;
        }

        public bool ActivateUser(string data, out byte[] licenseBytes)
        {
            return ActivateInternal(data, true, out licenseBytes);
        }

        public bool DeactivateUser(string data)
        {
            byte[] licenseBytes;
            return ActivateInternal(data, false, out licenseBytes);
        }

        private bool ActivateInternal(string data, bool activate, out byte[] licenseBytes)
        {
            NameValueCollection values = HttpUtility.ParseQueryString(Protection.DecryptString(data, HttpSecureKey));

            var userName = values["user"] as string;
            var password = values["pass"] as string;
            var user = FindUser(userName, password);

            if (user.HasValue())
            {
                var productName = values["product"] as string;
                var product = Data.Products.FindByName(productName);

                if (product.HasValue())
                {
                    var clientId = default(Guid);
                    var cliendIdString = values["ClientId"] as string;
                    var clientValues = HttpUtility.ParseQueryString(values["data"]);

                    licenseBytes = null;

                    if (!string.IsNullOrEmpty(cliendIdString))
                    {
                        clientId = new Guid(cliendIdString);
                    }

                    foreach (var subscription in Data.Subscriptions.Where((e) => e.UserId.Equals(user.Id)).OrderByDescending(e => e.End))
                    {
                        foreach (var license in Data.LicenseLevels.Where((e) => e.ProductId == product.Id && e.Id == subscription.LicenseId))
                        {
                            if (activate)
                            {
                                int numClients = Data.Clients.Where(e => e.SubscriptionId.Equals(subscription.Id)).Count();

                                if (numClients < subscription.Concurrently)
                                {
                                    if (clientId.IsEmpty())
                                    {
                                        using (var e = new CreateLicenseEventArgs())
                                        {
                                            var r = Data.Clients.NewClientsRow();

                                            r.Id = Guid.NewGuid();
                                            r.SubscriptionId = subscription.Id;
                                            r.AccountDate = DateTime.Now;
                                            r.LoginDate = DateTime.Now;
                                            r.IsActivated = true;
                                            r.MachineName = clientValues["MachineName"];
                                            r.UserName = clientValues["UserName"];
                                            r.DomainName = clientValues["DomainName"];
                                            r.OSVersion = clientValues["OSVersion"];

                                            e.User = user;
                                            e.Product = product;
                                            e.Subscription = subscription;
                                            e.LicenseLevel = license;
                                            e.Client = r;

                                            Data.Clients.Rows.Add(r);

                                            licenseBytes = e.GetLicenseData();
                                            return true;
                                        }
                                    }
                                }
                                else
                                {
                                    throw new SecurityException(Localization.Localize("AllLicensesAreInUse"));
                                }
                            }
                            else
                            {
                                if (!clientId.IsEmpty())
                                {
                                    foreach (AccountDataSet.ClientsRow row in Data.Clients.Where(e => e.SubscriptionId == subscription.Id && e.Id == clientId))
                                    {
                                        row.IsActivated = false;
                                        return true;
                                    }

                                    return false;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                throw new SecurityException(Localization.Localize("InvalidUsernamePassword"));
            }

            throw new SecurityException(Localization.Localize("LicenseException"));
        }

        public bool GetSubscriptionBytes(string data, out byte[] licenseBytes)
        {
            Guid clientId;
            NameValueCollection values = HttpUtility.ParseQueryString(Protection.DecryptString(data, HttpSecureKey));

            if (Guid.TryParse(values["client"] as string, out clientId))
            {
                AccountDataSet.ClientsRow client = Data.Clients.FindById(clientId);

                if (client.HasValue())
                {
                    AccountDataSet.SubscriptionsRow subscription = Data.Subscriptions.FindById(client.SubscriptionId);

                    if (subscription.HasValue())
                    {
                        AccountDataSet.UsersRow user = Data.Users.FirstOrDefault(u => u.Id == subscription.UserId);

                        if (user.HasValue())
                        {
                            values.Clear();
                            values["End"] = XmlConvert.ToString(subscription.End, XmlDateTimeSerializationMode.Utc);
                            values["Expiration"] = XmlConvert.ToString(subscription.Expiration, XmlDateTimeSerializationMode.Utc);

                            user.LoginDate = DateTime.Now;
                            client.LoginDate = DateTime.Now;
                            licenseBytes = Protection.GetBytes(Protection.EncryptString(values.ToString(), HttpSecureKey));
                            return true;
                        }
                    }
                }
            }

            licenseBytes = null;
            return false;
        }

        public void DeleteUser(string userName, string password)
        {
            var user = FindUser(userName, password);

            if (user.HasValue())
            {
                user.Delete();
                user.AcceptChanges();
            }
            else
            {
                throw new SecurityException(Localization.Localize("InvalidUsernamePassword"));
            }
        }

        public void Save()
        {
            lock (Data)
            {
                Data.AcceptChanges();
                Data.WriteXml(FileName);
            }
        }
    }
}