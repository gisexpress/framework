//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Data.Common;

namespace System.Security.Accounts
{
    partial class AccountManagerInternal
    {
        internal class CreateLicenseEventArgs : IDisposable
        {
            public CreateLicenseEventArgs()
            {
                Builder = new DbConnectionStringBuilder();
            }

            protected internal DbConnectionStringBuilder Builder;
            protected internal AccountDataSet.UsersRow User;
            protected internal AccountDataSet.ProductsRow Product;
            protected internal AccountDataSet.SubscriptionsRow Subscription;
            protected internal AccountDataSet.LicenseLevelsRow LicenseLevel;
            protected internal AccountDataSet.ClientsRow Client;

            public byte[] GetLicenseData()
            {
                var license = new LicenseFile();

                license.ClientId = Client.Id;
                license.ProductId = Product.Id;
                license.LicenseId = LicenseLevel.Id;
                license.UniversalTime = DateTime.Now;
                license.SubscriptionStart = Subscription.Start;
                license.SubscriptionEnd = Subscription.End;
                license.Expiration = Subscription.Expiration;

                return license.GetBytes(ProtectionScope.AES);
            }

            public void Dispose()
            {
                Builder.Clear();
                Builder = null;

                User = null;
                Product = null;
                Subscription = null;
                LicenseLevel = null;
                Client = null;

                GC.SuppressFinalize(this);
            }
        }
    }
}