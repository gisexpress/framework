//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace System.Security
{
    internal class LicenseLevels
    {
        static LicenseLevels()
        {
            Items = new Dictionary<string, SystemLicense>(10, StringComparer.InvariantCultureIgnoreCase);

            Add<EnterpriseLicense>();
            Add<ProfessionalLicense>();
            Add<EvaluationLicense>();
            Add<SubscriptionLicense>();
            Add<SystemLicense>();
        }

        static readonly Dictionary<string, SystemLicense> Items;

        internal static License CreateLicense(LicenseContext context, Type type, object instance, bool allowExceptions)
        {
            if (type.HasValue())
            {
                IList<LicenseLevelAttribute> levels = type.GetAttributes<LicenseLevelAttribute>().OrderByDescending(level => level.Order).ToList();

                Debug.Assert(levels.Count > 0);

                foreach (var level in levels.OrderByDescending(level => level.Order))
                {
                    SystemLicense value;

                    if (Items.TryGetValue(level.Id.ToString(), out value))
                    {
                        if (value.IsValid())
                        {
                            return value;
                        }
                    }
                }
            }
            else
            {
                Debug.Fail("Unspecified license level");
            }

            return default(License);
        }

        static void Add<TLicense>() where TLicense : SystemLicense
        {
            var level = Activator.CreateInstance(typeof(TLicense), true) as SystemLicense;

            if (level.HasValue())
            {
                Items.Add(level.LicenseKey, level);
            }
        }
    }
}
