//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Security.Accounts;
using System.Windows.Forms;

namespace System.Security
{
    [Obfuscation(Exclude = true)]
    internal class Network : INetwork
    {
        Network()
        {
            ComponentEnabledSet = OnComponentEnabledSet;
            Components = new Dictionary<Control, InternetStatus>();

            if (DeveloperEnvironment.MSFramework || OSEnvironment.IsUnix)
            {
                NetworkChange.NetworkAddressChanged += OnNetworkAddressChanged;
            }
        }

        static Network()
        {
            Current = new Network();
        }

        protected static readonly Network Current;

        protected InternetStatus? Status;
        protected readonly Action<Control, bool> ComponentEnabledSet;
        protected readonly Dictionary<Control, InternetStatus> Components;

        public DateTime GetNetworkTime()
        {
            DateTime value;
            
            if (NetworkTime.GetNetworkTime(out value))
            {
                return value;
            }

            return DateTime.Now;
        }

        public InternetStatus InternetConnectivity
        {
            get
            {
                if (Status.HasValue)
                {
                    lock (Current)
                    {
                        if (Status.HasValue)
                        {
                            return Status.Value;
                        }
                    }
                }

                BeginCheckInternetConnectivity();
                return (Status = InternetStatus.Checking).Value;
            }
        }

        public void EnabledWhenInternetStatusIs(Control component, InternetStatus value)
        {
            if (!Components.ContainsKey(component))
            {
                Components.Add(component, value);

                component.Enabled = (InternetConnectivity == value);

                component.EnabledChanged += (sender, e) =>
                {
                    if (component.Enabled && !component.InvokeRequired)
                    {
                        component.Enabled = InternetConnectivity == value;
                    }
                };

                component.Disposed += (sender, e) =>
                {
                    Components.Remove((Control)sender);
                };
            }
        }

        protected void CheckInternetConnectivity()
        {
            if (Status != InternetStatus.Checking)
            {
                OnInternetStatusChanged(InternetStatus.Checking);
                BeginCheckInternetConnectivity();
            }
        }

        protected virtual void OnInternetStatusChanged(InternetStatus value)
        {
            Status = value;
            
            Components.Cast<KeyValuePair<Control, InternetStatus>>().ForEach(e =>
            {
                e.Key.Invoke(ComponentEnabledSet, e.Key, e.Value == value);
            });
        }

        protected virtual void OnComponentEnabledSet(Control component, bool value)
        {
            component.Enabled = value;
        }

        protected virtual void OnNetworkAddressChanged(object sender, EventArgs e)
        {
            CheckInternetConnectivity();
        }

        protected void BeginCheckInternetConnectivity()
        {
            var worker = new BackgroundWorker();

            worker.DoWork += InternetConnectivityDoWork;
            worker.RunWorkerAsync();
        }

        protected void InternetConnectivityDoWork(object sender, DoWorkEventArgs e)
        {
            using (sender as IDisposable)
            {
                DateTime value;

                if (NetworkTime.GetNetworkTime(out value))
                {
                    AccountManagerInternal.LicenseFile.Current.Update(value);

                    if (AccountManagerInternal.LicenseFile.Current.IsValid())
                    {
                        OnInternetStatusChanged(InternetStatus.Connected);
                    }
                    else
                    {
                        SystemLicense.Kill();
                    }
                }
                else
                {
                    OnInternetStatusChanged(InternetStatus.Disconnected);
                }
            }
        }
    }
}
