//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2017. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Reflection;
using System.Security;

namespace System
{
    internal static class ReflectionExtensions
    {
        static ReflectionExtensions()
        {
            AllowedKeys = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
            LicensedAssemblies = new Dictionary<string, LicensedAssembly>(StringComparer.InvariantCultureIgnoreCase);

            // Microsoft
            AllowedKeys.Add("0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");
            AllowedKeys.Add("002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");
            AllowedKeys.Add("0024000004800000940000000602000000240000525341310004000001000100272736AD6E5F9586BAC2D531EABC3ACC666C2F8EC879FA94F8F7B0327D2FF2ED523448F83C3D5C5DD2DFC7BC99C5286B2C125117BF5CBE242B9D41750732B2BDFFE649C6EFB8E5526D526FDD130095ECDB7BF210809C6CDAD8824FAA9AC0310AC3CBA2AA0523567B2DFA7FE250B30FACBD62D4EC99B94AC47C7D3B28F1F6E4C8");

            // Mono
            AllowedKeys.Add("002400000480000094000000060200000024000052534131000400000100010079159977D2D03A8E6BEA7A2E74E8D1AFCC93E8851974952BB480A12C9134474D04062447C37E0E68C080536FCF3C3FBE2FF9C979CE998475E506E8CE82DD5B0F350DC10E93BF2EEECF874B24770C5081DBEA7447FDDAFA277B22DE47D6FFEA449674A4F9FCCF84D15069089380284DBDD35F46CDFF12A1BD78E4EF0065D016DF");

            // SQLite
            AllowedKeys.Add("002400000480000094000000060200000024000052534131000400000100010005A288DE5687C4E1B621DDFF5D844727418956997F475EB829429E411AFF3E93F97B70DE698B972640925BDD44280DF0A25A843266973704137CBB0E7441C1FE7CAE4E2440AE91AB8CDE3933FEBCB1AC48DD33B40E13C421D8215C18A4349A436DD499E3C385CC683015F886F6C10BD90115EB2BD61B67750839E3A19941DC9C");

            // GISExpress
            AllowedKeys.Add(ProductKey);
            AllowedKeys.Add(ProductAlternateKey);

            LicensedAssemblies.Add("0024000004800000940000000602000000240000525341310004000001000100254FB29016A5A8E8B933A9C793944DDCCE9CBE5DAE0333DDB5E1BA0E6AE44E6B093B62E29EC733C843DD89D7B482DA11DF5D28030FD40620FEDD3B2E70B6069BE761FD2AE9375EF75B2239B15D68D3216F492FAAF44926598E2A8CE7E1B780AFF18266F376361D9541A288993BCBAFEDFFC78399FF27C462C68BA4E6F72FFCE7", default(LicensedAssembly));
        }

        private static readonly ISet<string> AllowedKeys;
        private static readonly IDictionary<string, LicensedAssembly> LicensedAssemblies;

        private static readonly string ProductKey = "0024000004800000940000000602000000240000525341310004000001000100E32F109775C329B96921453F6D3151C790526CD7DCC180ED99AF14E4FB3531A634A11680FA4CD2B3C5BA2EBF9099C6D5A731F71587CFFD61CDCD73D77522C1B96945ED398D82DAAFDF770C2D0DDC1977AECC3F8EBC235F92642787CEEE9706D3D0B503061611893E38D4B300191B161E0AFE2D18F9E8FBBBF2875F1DD5CDD5E2";
        private static readonly string ProductAlternateKey = "00240000048000009400000006020000002400005253413100040000010001007F7756FD343B20B814327E1DDE4C19E048B0633F961055BDF63775962FA609007C057B5BBD3C785014996D34F37EA79F038CEB960086FA0C30FC674D9CC3952677B13B3E2690A3C79BF9CB8979D93383FED79A816607EC465A16482E96FEA52274854CC7F9DAF4E9F5038EA2F06EAD28302835824DC23F6A3ACB7259E4A175BB";

        public static bool IsProductAssembly(this Assembly assembly)
        {
            string key = GetPublicKey(assembly.GetName());

            if (ProductKey.Equals(key) || ProductAlternateKey.Equals(key))
            {
                var company = assembly.GetAttribute<AssemblyCompanyAttribute>();
                var product = assembly.GetAttribute<AssemblyProductAttribute>();
                var copyright = assembly.GetAttribute<AssemblyCopyrightAttribute>();

                if (company.HasValue() && company.Company.Equals("GISExpress"))
                {
                    if (product.HasValue() && product.Product.Equals("GISExpress"))
                    {
                        if (copyright.HasValue() && copyright.Copyright.Equals("Copyright © GISExpress 2015-2017. All Rights Reserved."))
                        {
                            return true;
                        }
                    }
                }
            }

            SystemLicense.Kill();
            return false;
        }

        public static bool IsSystemAssembly(this Assembly assembly)
        {
            var key = default(string);
            var name = assembly.GetName();

            if (assembly.IsDynamic)
            {
                if (assembly.FullName.StartsWith("Microsoft."))
                {
                    return true;
                }

                if (assembly.FullName == "Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")
                {
                    return true;
                }
            }

            //#if ReleaseMode
            //            if (assembly.EntryPoint.IsNotNull())
            //            {
            //                if (!assembly.IsProductAssembly())
            //                {
            //                    return false;
            //                }
            //            }
            //#endif

            if (name.HasValue() && name.Flags.HasFlag(AssemblyNameFlags.PublicKey))
            {
                LicensedAssembly value;

                if (AllowedKeys.Contains(key = GetPublicKey(name)))
                {
                    return true;
                }

                if (LicensedAssemblies.TryGetValue(key = GetPublicKey(name), out value))
                {
                    if (value.IsNull())
                    {
                        LicensedAssemblies[key] = new LicensedAssembly(assembly);
                        return true;
                    }
                    else if (value.Assembly.Equals(assembly) || value.IsReference(assembly))
                    {
                        return true;
                    }
                }

                Print(name, key);

                switch (key = GetPublicKeyToken(name))
                {
                    // Microsoft
                    case "B77A5C561934E089":
                        return true;

                    // Mono
                    case "0738EB9F132ED756":
                        return true;
                }

                Print(name, key);
            }

            return false;
        }

        static string GetPublicKey(this AssemblyName value)
        {
            return ToInvariantString(value.GetPublicKey());
        }

        static string GetPublicKeyToken(this AssemblyName value)
        {
            return ToInvariantString(value.GetPublicKeyToken());
        }

        static string ToInvariantString(this byte[] bytes)
        {
            return BitConverter.ToString(bytes).Replace("-", string.Empty);
        }

        static void Print(AssemblyName value, string key)
        {
            string.Concat(value.Name, " : ", key).Print();
        }
    }
}
