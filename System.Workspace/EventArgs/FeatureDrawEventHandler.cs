//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Geometries;
using System.Workspace.Drawing;

namespace System.Workspace
{
    public delegate void FeatureDrawEventHandler(FeatureDrawEventArgs e);

    public class FeatureDrawEventArgs : CancelEventArgs, IDisposable
    {
        internal FeatureDrawEventArgs()
        {
        }

        internal void Reset()
        {
            Cancel = false;
            RaiseEvents = true;
            Id = null;
            GeometryValue = null;
        }

        protected object Id;
        protected IGeometry GeometryValue;

        public MapLayer Layer
        {
            get;
            internal set;
        }

        public MapCanvas Canvas
        {
            get;
            internal set;
        }

        public PaintStyle Style
        {
            get;
            set;
        }

        public IFeatureRecord Feature
        {
            get;
            internal set;
        }

        public bool RaiseEvents
        {
            get;
            set;
        }

        public bool IsSelected
        {
            get { return Layer.Selection.IsSelected(FeatureId); }
        }

        public object FeatureId
        {
            get { return Id ?? (Id = Feature.GetFeatureId()); }
            set { Id = value; }
        }

        public IGeometry Geometry
        {
            get { return GeometryValue ?? (GeometryValue = Feature.GetGeometry().Transform(Layer.Transform)); }
            set { GeometryValue = value; }
        }

        public void Dispose()
        {
            Id = null;
            GeometryValue = null;
            GC.SuppressFinalize(this);
        }
    }
}
