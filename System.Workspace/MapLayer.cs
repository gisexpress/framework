//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.CoordinateSystems;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Geometries;
using System.Resources;
using System.Windows.Forms;
using System.Workspace.Drawing;
using System.Xml;

namespace System.Workspace
{
    [DebuggerDisplay("{Name}")]
    public abstract class MapLayer : DataCommand, IKeyedObject, ISupportInitialize, ISupportTransactionLog, ISupportComponentActions, IDisposable
    {
        protected internal MapLayer(string prefix, string localName, string namespaceURI, XmlDocument doc) : base(prefix, localName, namespaceURI, doc)
        {
            Selection = new MapLayerSelection();
            DrawEventArgs = new FeatureDrawEventArgs();
        }

        public event EventHandler Disposed;

        protected IGeometry IconGeometry;
        protected FeatureDrawEventArgs DrawEventArgs;
        protected MapLayerCollection LayerItems;
        protected PaintStyleCollection StyleItems;

        internal IPropertyDescriptor Property;

        public object Component
        {
            get { return this; }
        }

        public MapLayer Parent
        {
            get { return (MapLayer)ParentNode; }
        }

        public MapWorkspace Workspace
        {
            get { return this as MapWorkspace ?? OwnerDocument.DocumentElement[Constants.Xml.Document] as MapWorkspace; }
        }

        public bool ReadOnly
        {
            get { return Get(Constants.Xml.ReadOnly, true); }
            set { Set(Constants.Xml.ReadOnly, value); }
        }

        public bool Removable
        {
            get { return Get(Constants.Xml.Removable, true); }
            set { Set(Constants.Xml.Removable, value); }
        }

        public virtual bool FeatureSupport
        {
            get { return false; }
        }

        public virtual bool TransactionSupport
        {
            get { return FeatureSupport; }
        }

        public virtual bool StyleSupport
        {
            get { return false; }
        }

        public virtual void BeginInit()
        {
        }

        public virtual void EndInit()
        {
        }

        public MapLayer NewLayer()
        {
            return (MapLayer)OwnerDocument.CreateElement(Constants.Xml.Folder);
        }

        public MapLayer AddNewLayer()
        {
            MapLayer item = NewLayer();

            item.Name = Workspace.GetLayers().GetName();

            if (this is MapWorkspace)
            {
                AppendChild(item);
            }
            else
            {
                ParentNode.AppendChild(item);
            }

            return item;
        }

        public void Active()
        {
            Workspace.ActiveLayer = Name;
        }

        public bool IsActive()
        {
            if (Workspace.ActiveLayer == Name)
            {
                return true;
            }

            return false;
        }

        public void Refresh()
        {
            IconGeometry = default;
        }

        public MapLayerSelection Selection
        {
            get;
            protected set;
        }

        public ICoordinateSystem CoordinateSystem
        {
            get { return OnFindCoordinateSystem(); }
        }

        public virtual MapLayerCollection Layers
        {
            get { return LayerItems ?? (LayerItems = new MapLayerCollection(OwnerDocument) { ParentNode = this }); }
        }

        public virtual PaintStyleCollection Styles
        {
            get { return StyleItems ?? (StyleItems = new PaintStyleCollection(OwnerDocument) { ParentNode = this }); }
        }

        protected virtual ICoordinateSystem OnFindCoordinateSystem()
        {
            return default;
        }

        public IFeature CreateFeature()
        {
            return OnCreateFeature();
        }

        protected virtual IFeature OnCreateFeature()
        {
            if (FeatureSupport)
            {
                return NewFeature();
            }

            return default;
        }

        public IEnumerable<IFeature> GetSelectedFeatures()
        {
            if (Visibility && FeatureSupport)
            {
                if (Selection.IsAll())
                {
                    foreach (IFeature item in GetFeatures())
                    {
                        yield return item;
                    }
                }
                else
                {
                    foreach (object featureId in Selection)
                    {
                        yield return FindFeature(featureId);
                    }
                }
            }
        }

        protected virtual int OnExecuteDelete(IFeature feature)
        {
            if (FeatureSupport)
            {
                return ExecuteDelete(feature);
            }

            return 0;
        }

        protected internal virtual bool OnRender(MapCanvas canvas)
        {
            if (Visibility && Parent.Visibility)
            {
                //if (SupportStyles == false || Styles.Default.IsVisible(canvas.Graphics.Transform.CurrentScale))
                {
                    Workspace.OnBeginDrawLayer(this);

                    if (OnRenderFeatures(canvas, canvas.Graphics.Transform.Bounds))
                    {
                        return true;
                    }

                    return false;
                }
            }

            return true;
        }

        protected virtual bool OnRenderFeatures(MapCanvas canvas, IEnvelope bounds)
        {
            if (FeatureSupport)
            {
                int n = 0;

                foreach (IFeatureRecord feature in GetFeatures(bounds))
                {
                    if (Workspace.CancellationPending)
                    {
                        return false;
                    }

                    RenderFeature(feature, canvas);

                    if (++n > 0x100)
                    {
                        n = 0;
                        Workspace.ReportProgress();
                    }
                }
            }

            return true;
        }

        public void RenderFeature(IFeature feature)
        {
            RenderFeature(feature, Workspace.Canvas, default);
        }

        public void RenderFeature(IFeature feature, PaintStyle style)
        {
            RenderFeature(feature, Workspace.Canvas, style);
        }

        public void RenderFeature(IFeatureRecord feature, MapCanvas canvas)
        {
            RenderFeature(feature, canvas, default);
        }

        public void RenderFeature(IFeatureRecord feature, MapCanvas canvas, PaintStyle style)
        {
            if (DrawEventArgs == null)
            {
                return;
            }

            DrawEventArgs.Reset();
            DrawEventArgs.Layer = this;
            DrawEventArgs.Canvas = canvas;
            DrawEventArgs.Feature = feature;

            if (StyleSupport)
            {
                DrawEventArgs.Style = style ?? Workspace.Styles[feature[Constants.Xml.StyleUrl]] ?? Workspace.Styles[Name, true];
            }
            else
            {
                DrawEventArgs.Style = default;
            }

            Workspace.OnRenderFeature(DrawEventArgs);

            if (DrawEventArgs.Cancel)
            {
                return;
            }

            OnRenderFeature(DrawEventArgs);
        }

        protected virtual void OnRenderFeature(FeatureDrawEventArgs e)
        {
            if (e.IsSelected || e.Geometry == null)
            {
                return;
            }

            e.Canvas.Graphics.Draw(e.Geometry, e.Style, e.RaiseEvents);
        }

        public IFeature ImportFeature(IFeature feature)
        {
            return OnImportFeature(feature);
        }

        protected virtual IFeature OnImportFeature(IFeature feature)
        {
            IFeature featureNew = CreateFeature();

            featureNew.BeginEdit();
            feature.CopyTo(featureNew);

            if (!feature.Detached)
            {
                featureNew.SetFeatureId(null);
                featureNew.EndEdit();
            }

            return featureNew;
        }

        public Bitmap GetIcon(int size)
        {
            return GetIcon(default, size, size);
        }

        public Bitmap GetIcon(int width, int height)
        {
            return GetIcon(default, width, height);
        }

        public Bitmap GetIcon(PaintStyle style, int size)
        {
            return GetIcon(style, size, size);
        }

        public Bitmap GetIcon(PaintStyle style, int width, int height)
        {
            if (StyleSupport)
            {
                style = style ?? Workspace.Styles[Name, true];

                using (var e = new PaintLayerIconEventArgs(style, width, height))
                {
                    OnPaintIcon(e);
                    return e.Image;
                }
            }

            return default;
        }

        protected virtual void OnPaintIcon(PaintLayerIconEventArgs e)
        {
            if (IconGeometry.HasValue())
            {
                OnPaintIcon(e, IconGeometry);
            }
            else
            {
                foreach (IFeatureRecord feature in GetFeatures())
                {
                    OnPaintIcon(e, IconGeometry = feature.GetGeometry());
                    break;
                }
            }

            if (e.Handled)
            {
                return;
            }

            OnPaintPolygonSymbol(e);
        }

        protected void OnPaintIcon(PaintLayerIconEventArgs e, IGeometry geometry)
        {
            if (geometry is ILinearRing || geometry is IMultiPolygon)
            {
                e.Handled = true;
                OnPaintPolygonSymbol(e);
            }
            else if (geometry is ILineString || geometry is IMultiLineString)
            {
                e.Handled = true;
                OnPaintLineSymbol(e);
            }
            else if (geometry is IPoint || geometry is IMultiPoint)
            {
                e.Handled = true;
                OnPaintPointSymbol(e);
            }
        }

        protected virtual void OnPaintPointSymbol(PaintLayerIconEventArgs e)
        {
            using (var path = new GraphicsPath())
            {
                var p1 = new Point(e.Width / 2, 4);
                var p2 = new Point(e.Width - 4, e.Height / 2);
                var p3 = new Point(e.Width / 2, e.Height - 4);
                var p4 = new Point(4, e.Height / 2);

                path.AddLine(p1, p2);
                path.AddLine(p2, p3);
                path.AddLine(p3, p4);
                path.CloseFigure();

                FillPath(e.Graphics, e.Style.PolyStyle.GetBrush(), path);
                DrawPath(e.Graphics, ApplicationAppereance.Pens.Border, path);
            }
        }

        protected virtual void OnPaintLineSymbol(PaintLayerIconEventArgs e)
        {
            using (var path = new GraphicsPath())
            {
                path.AddRectangle(2, e.Height / 2 - 2, e.Width - 4, 4);

                using (var brush = new SolidBrush(e.Style.PolyStyle.Color))
                {
                    FillPath(e.Graphics, brush, path);
                }

                DrawPath(e.Graphics, ApplicationAppereance.Pens.Border, path);
            }
        }

        protected virtual void OnPaintPolygonSymbol(PaintLayerIconEventArgs e)
        {
            using (var path = new GraphicsPath())
            {
                int r = e.Width / 5;

                path.AddRectangle(r, r, e.Width - 2 * r, e.Height - 2 * r);

                FillPath(e.Graphics, e.Style.PolyStyle.GetBrush(), path);
                DrawPath(e.Graphics, ApplicationAppereance.Pens.Border, path);
            }
        }

        protected void DrawPath(Graphics g, Pen pen, GraphicsPath path)
        {
            if (pen.HasValue())
            {
                g.TryDrawPath(pen, path);
            }
        }

        protected void FillPath(Graphics g, Brush brush, GraphicsPath path)
        {
            if (brush.HasValue())
            {
                g.TryFillPath(brush, path);
            }
        }

        public new bool Remove()
        {
            if (Removable)
            {
                ParentNode.RemoveChild(this);
                return true;
            }

            return false;
        }

        public void InsertBefore(MapLayer item)
        {
            if (item.Remove())
            {
                ParentNode.InsertBefore(item, this);
            }
        }

        public void InsertAfter(MapLayer item)
        {
            if (item.Remove())
            {
                ParentNode.InsertAfter(item, this);
            }
        }

        public object UserData
        {
            get;
            set;
        }

        public IEnumerable<IComponentAction> GetActions()
        {
            yield return new ComponentAction { Name = "ZoomToExtent", Image = Images016.Fit, Perform = PerformZoomToExtent, CanPerform = CanPerformZoomToExtent };
            yield return new ComponentAction { Name = "AddNewLayer", Image = Images016.NewItem, Perform = PerformAddNewLayer, Shortcut = Shortcut.CtrlN, BeginGroup = true };
            yield return new ComponentAction { Name = "AddNewExistingLayer", Image = Images016.ExistingItem, Perform = PerformAddNewItem };
            yield return new ComponentAction { Name = "Remove", Image = Images016.Delete, Perform = PerformRemove, CanPerform = CanPerformRemove, Shortcut = Shortcut.Del, BeginGroup = true };
            yield return new ComponentAction { Name = "ReName", Image = Images016.Rename, Perform = PerformRename, CanPerform = CanPerformRename, Shortcut = Shortcut.F2};

            //Actions.Add("AddNewCategory", Images016.NewFolder, PerformAddNewCategory);
            //Actions.Add("AddNewShpLayer", default(Image), PerformAddNewShpItem);
            //Actions.Add("AddNewKmlLayer", default(Image), PerformAddNewKmlItem);
        }

        protected void PerformAddNewLayer(object sender)
        {
            AddNewLayer();
            ((PropertyGridEdit)sender).Refresh(true);
        }

        protected void PerformAddNewItem(object sender)
        {
            var owner = sender as Control;

            if (owner.HasValue())
            {
                using (var form = new MapLayerDialog())
                {
                    form.Workspace = Workspace;

                    if (form.ShowDialog(owner.FindForm() ?? owner) == DialogResult.OK)
                    {
                        var layerEdit = form.PropertiesControl as MapLayerControl;

                        if (layerEdit.HasValue())
                        {
                            layerEdit.CreateLayers(this);
                        }
                    }
                }
            }
        }

        protected bool CanPerformZoomToExtent(object sender)
        {
            IEnvelope bounds = GetBounds();

            if (bounds.IsNull() || bounds.IsEmpty())
            {
                return false;
            }

            return true;
        }

        protected void PerformZoomToExtent(object sender)
        {
            Workspace.ZoomTo(GetBounds().Zoom(110));
            Workspace.Render();
        }

        protected bool CanPerformRename(object sender)
        {
            return !ReadOnly;
        }

        protected void PerformRename(object sender)
        {
            ((PropertyGridEdit)sender).SelectedItem.BeginLabelEdit();
        }

        protected bool CanPerformRemove(object sender)
        {
            return Removable;
        }

        protected void PerformRemove(object sender)
        {
            Remove();
            ((PropertyGridEdit)sender).Refresh(true);
        }

        public object CreateEdit()
        {
            var edit = new GlyphButtonEdit();

            edit.GlyphButtons.Clear();
            edit.GlyphButtons.Add(GlyphButtonType.Check, Visibility);
            edit.GlyphButtons.Add(GlyphButtonType.Radio, IsActive());
            edit.GlyphButtons.Add(GlyphButtonType.Glyph, GetIcon(16));
            edit.GlyphButtons.Add(GlyphButtonType.Ellipsis);
            edit.GlyphButtons.ButtonClick += OnButtonClick;

            return edit;
        }

        void OnButtonClick(object sender, EventArgs e)
        {
            var button = sender as GlyphButton;

            switch (button.ButtonType)
            {
                case GlyphButtonType.Check:
                    Visibility = button.Value;
                    Workspace.Render();
                    break;

                case GlyphButtonType.Radio:
                    Active();
                    break;

                case GlyphButtonType.Glyph:
                    var colorEdit = new ColorDropDownEdit();
                    Point screenLocation = button.Parent.PointToScreen(button.Location);
                    screenLocation.Offset(0, 17);
                    colorEdit.ShowPopup(screenLocation);
                    colorEdit.SelectedColorChanged += c =>
                    {
                        PaintStyle value = Workspace.Styles[Name, true];
                        value.LineStyle.Color = c;
                        value.PolyStyle.Color = c;
                        button.Image = GetIcon(16);
                        Workspace.Render();
                    };
                    break;

                case GlyphButtonType.Ellipsis:
                    new ApplicationForm { }.ShowDialog();
                    break;
            }
        }

        public override XmlNode AppendChild(XmlNode newChild)
        {
            return OnInsert(base.AppendChild(newChild));
        }

        public override XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
        {
            return OnInsert(base.InsertAfter(newChild, refChild));
        }

        public override XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
        {
            return OnInsert(base.InsertBefore(newChild, refChild));
        }

        public override XmlNode RemoveChild(XmlNode oldChild)
        {
            var item = oldChild as MapLayer;

            if (item == null)
            {
                return base.RemoveChild(oldChild);
            }

            Workspace.OnLayerCollectionChanged(CollectionChangeAction.Remove, item);
            return base.RemoveChild(oldChild);
        }

        protected virtual XmlNode OnInsert(XmlNode newChild)
        {
            var item = newChild as MapLayer;

            if (item == null)
            {
                return newChild;
            }

            Workspace.OnLayerCollectionChanged(CollectionChangeAction.Add, item);
            return item;
        }

        public override int GetHashCode()
        {
            return Name.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            var other = obj as MapLayer;

            if (other == null)
            {
                return false;
            }

            return GetHashCode() == other.GetHashCode();
        }

        public override string ToString()
        {
            return string.Empty;
        }

        protected virtual void OnDisposing()
        {
        }

        public override void Dispose()
        {
            Selection.DisposeSafely();
            DrawEventArgs.DisposeSafely();

            Selection = null;
            DrawEventArgs = null;
            UserData = null;
            IconGeometry = null;

            OnDisposing();

            Disposed.InvokeSafely(this, EventArgs.Empty);
            Disposed = null;

            GC.SuppressFinalize(this);
        }
    }
}
