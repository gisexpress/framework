//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace System.Workspace
{
    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
    public abstract class MapLayerAttribute : Attribute
    {
        protected static readonly SortedDictionary<Guid, MapLayerAttribute> RegisteredComponents;

        static MapLayerAttribute()
        {
            RegisteredComponents = new SortedDictionary<Guid, MapLayerAttribute>();

            foreach (MapLayerAttribute attribute in typeof(MapLayerAttribute).Assembly.FindAttributes<MapLayerAttribute>("System.*.dll", "(Layer)"))
            {
                if (typeof(MapLayer).IsAssignableFrom(attribute.LayerType))
                {
                    RegisteredComponents.Add(attribute.LayerType.GUID, attribute);
                }
            }
        }

        public virtual bool IsBrowsable
        {
            get { return true; }
        }

        public virtual int Popularity
        {
            get { return 0; }
        }

        public abstract Type LayerType
        {
            get;
        }

        public virtual string DisplayName
        {
            get { return Localize("DisplayName"); }
        }

        public virtual string Description
        {
            get { return Localize("Description"); }
        }

        public abstract Image Image
        {
            get;
        }

        [Browsable(false)]
        public override object TypeId
        {
            get { return base.TypeId; }
        }

        public Control CreateControl()
        {
            return OnCreateControl();
        }

        public static MapLayer Create(Type type, params object[] args)
        {
            return (MapLayer)Activator.CreateInstance(type, args);
        }

        public static MapLayer Create(string clsId, params object[] args)
        {
            if (string.IsNullOrEmpty(clsId))
            {
                return default;
            }

            return Create(Guid.Parse(clsId), args);
        }

        public static MapLayer Create(Guid clsId, params object[] args)
        {
            MapLayerAttribute attribute;

            if (RegisteredComponents.TryGetValue(clsId, out attribute))
            {
                return Create(attribute.LayerType, args);
            }

            return default;
        }

        public static MapLayerAttribute[] GetRegisteredLayers()
        {
            return RegisteredComponents.Values.ToArray();
        }

        protected abstract MapLayerControl OnCreateControl();

        protected string Localize(string key)
        {
            return Localization.Localize("MapLayer({0}).{1}".FormatInvariant(LayerType.GUID, key));
        }
    }
}
