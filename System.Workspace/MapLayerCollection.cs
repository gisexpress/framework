//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Xml;

namespace System.Workspace
{
    public class MapLayerCollection : XmlElementCollectionBase<MapLayer>
    {
        public MapLayerCollection(XmlDocument document) : base(document, Constants.Xml.Folder)
        {
        }

        //public void AddRange(params MapLayer[] layers)
        //{
        //    foreach (MapLayer item in layers)
        //    {
        //        Add(item);
        //    }
        //}

        //protected override string GetKeyForItem(MapLayer item)
        //{
        //    return item.Name;
        //}

        //protected override void ClearItems()
        //{
        //    base.ClearItems();
        //    //Category.Workspace.InvokeChanged(CollectionChangeAction.Refresh, default(MapLayer));
        //}

        //protected override void InsertItem(int index, MapLayer item)
        //{
        //    //if (item.HasValue())
        //    //{
        //    //    using (item.Begin())
        //    //    {
        //    //        var isNew = default(bool);

        //    //        if (item.Id.IsEmpty())
        //    //        {
        //    //            isNew = true;
        //    //            item.Id = Guid.NewGuid();

        //    //            if (item.SupportStyles)
        //    //            {
        //    //                item.Workspace.Styles.AddNewStyle(item.Name);
        //    //            }
        //    //        }

        //    //        item.Remove();
        //    //        item.Category = Category;

        //    //        if (isNew)
        //    //        {
        //    //            if (string.IsNullOrEmpty(item.Name) || Category.Workspace.GetLayers().Any(layer => layer.Name.EqualsIgnoreCase(item.Name)))
        //    //            {
        //    //                item.Name = Category.Workspace.GetLayers().GetName(Localization.Localize("Layer"));
        //    //            }
        //    //        }

        //    //        if (item.OnAddProject())
        //    //        {
        //    //            item.Actions.Clear();
        //    //            item.OnRegisterActions();

        //    //            base.InsertItem(index, item);

        //    //            Category.Workspace.InvokeChanged(CollectionChangeAction.Add, item);
        //    //        }
        //    //    }
        //    //}
        //}

        //protected override void SetItem(int index, MapLayer item)
        //{
        //    base.SetItem(index, item);
        //    //Category.Workspace.InvokeChanged(CollectionChangeAction.Refresh, item);
        //}

        //protected override void RemoveItem(int index)
        //{
        //    MapLayer item = base[index];
        //    base.RemoveItem(index);
        //    //Category.Workspace.InvokeChanged(CollectionChangeAction.Remove, item);
        //}
    }
}
