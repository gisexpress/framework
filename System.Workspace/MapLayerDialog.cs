//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace System.Workspace
{
    [Guid("A497A62D-78C8-403D-BE1C-EEB4B6936CC7")]
    internal class MapLayerDialog : AddNewItemDialog
    {
        public MapLayerDialog()
        {
            List.RowHeight = 54;

            foreach (MapLayerAttribute item in MapLayerAttribute.GetRegisteredLayers().Where(e => e.IsBrowsable).OrderByDescending(e => e.Popularity))
            {
                List.Rows.Add(item, item.DisplayName, item.Image);
            }

            List.View.SelectedIndexChanged += OnSelectedIndexChanged;
        }

        public MapWorkspace Workspace
        {
            get;
            set;
        }

        [ConfigurationValue]
        public Guid SelectedLayerId
        {
            get { return SelectedLayer.HasValue() ? SelectedLayer.LayerType.GUID : Guid.Empty; }
            set { List.EditValue = MapLayerAttribute.GetRegisteredLayers().FirstOrDefault(e => e.LayerType.GUID.Equals(value)); }
        }

        public MapLayerAttribute SelectedLayer
        {
            get { return List.EditValue as MapLayerAttribute; }
        }

        protected void OnSelectedIndexChanged(object sender, EventArgs e)
        {
            MapLayerAttribute item = SelectedLayer;

            if (item.HasValue())
            {
                Header.Caption = item.DisplayName;
                Header.Title = item.Description;

                //if (LicenseManager.IsLicensed(item.LayerType))
                //{
                    Footer.Buttons["OK"].Enabled = true;
                    PropertiesControl = item.CreateControl();

                    var edit = PropertiesControl as MapLayerControl;

                    if (edit.HasValue())
                    {
                        edit.Dock = DockStyle.Fill;
                        edit.Workspace = Workspace;
                    }
                //}
                //else
                //{
                //    Footer.Buttons["OK"].Enabled = false;

                //    PropertiesControl = new RichTextEdit
                //    {
                //        ReadOnly = true,
                //        FontSize = 9.25F,
                //        Dock = DockStyle.Fill,
                //        Padding = new Padding(6),
                //        RtfText = Localization.Localize("LicenseException.Rtf")
                //    };
                //}
            }
        }
    }
}
