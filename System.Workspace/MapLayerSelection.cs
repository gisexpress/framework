//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace System.Workspace
{
    public class MapLayerSelection : IEnumerable, IDisposable
    {
        public MapLayerSelection()
        {
            IncludedFeatures = new HashSet<object>();
            ExcludedFeatures = new HashSet<object>();
        }

        protected bool All;
        protected HashSet<object> IncludedFeatures;
        protected HashSet<object> ExcludedFeatures;

        public bool IsEmpty()
        {
            return !All && IncludedFeatures.Count == 0;
        }

        public void Clear()
        {
            All = false;
            IncludedFeatures.Clear();
            ExcludedFeatures.Clear();
        }

        public void SelectAll()
        {
            All = true;
            IncludedFeatures.Clear();
            ExcludedFeatures.Clear();
        }

        public void ReverseSelection()
        {
            if (IncludedFeatures.Count > 0)
            {
                All = true;
                IncludedFeatures.ForEach(item => ExcludedFeatures.Add(item));
                IncludedFeatures.Clear();
            }
            else
            {
                All = false;
                ExcludedFeatures.ForEach(item => IncludedFeatures.Add(item));
                ExcludedFeatures.Clear();
            }
        }

        public bool IsAll()
        {
            return All;
        }

        public bool IsSelectedAll()
        {
            return All && ExcludedFeatures.Count == 0;
        }

        public bool IsSelected(object featureId)
        {
            return (All || IncludedFeatures.Contains(featureId)) && ExcludedFeatures.Contains(featureId) == false;
        }

        public bool Add(object featureId)
        {
            if (featureId.HasValue())
            {
                if (All)
                {
                    if (ExcludedFeatures.Remove(featureId))
                    {
                        return true;
                    }
                }

                return IncludedFeatures.Add(featureId);
            }

            return false;
        }

        public bool Remove(object featureId)
        {
            if (All)
            {
                return ExcludedFeatures.Add(featureId);
            }

            return IncludedFeatures.Remove(featureId);
        }

        public IEnumerator GetEnumerator()
        {
            foreach (object item in IncludedFeatures.ToArray())
            {
                if (ExcludedFeatures.Contains(item))
                {
                    continue;
                }

                yield return item;
            }
        }

        public void Dispose()
        {
            IncludedFeatures = null;
            ExcludedFeatures = null;
            GC.SuppressFinalize(this);
        }
    }
}
