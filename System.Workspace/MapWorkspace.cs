//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.CoordinateSystems;
using System.Data;
using System.Drawing;
using System.Geometries;
using System.Linq;
using System.Threading;
using System.Workspace.Drawing;
using System.Xml;

namespace System.Workspace
{
    public class MapWorkspace : MapLayer, ISupportTransactionLog, ISupportInitialize, IDisposable, ICloneable
    {
        public MapWorkspace(XmlDocument document) : base(string.Empty, Constants.Xml.Document, Constants.Xml.NamespaceURI, document)
        {
            Canvas = new MapCanvas(this);
            Properties = new PropertyNodeCollection();
            CurrentWindow = Factory.Create<IEnvelope>();

            Worker = new BackgroundWorker
            {
                WorkerReportsProgress = true,
                WorkerSupportsCancellation = true
            };

            Worker.DoWork += OnRender;
            Worker.ProgressChanged += OnRenderProgressChanged;
            Worker.RunWorkerCompleted += OnRenderCompleted;
        }

        public readonly IPropertyCollection Properties;

        public event Action<MapWorkspace> BeginRender;
        public event Action<MapWorkspace, MapLayer> BeginLayerRender;
        public event FeatureDrawEventHandler FeatureRender;
        public event Action<RenderCompletedEventArgs> RenderCompleted;
        public event Action<RenderProgressChangedEventArgs> RenderProgressChanged;
        public event Action<CollectionChangeAction, MapLayer> LayerCollectionChanged;

        protected int Init;
        protected bool ReDraw;
        protected BackgroundWorker Worker;

        public readonly MapCanvas Canvas;
        public readonly IEnvelope CurrentWindow;

        public string ActiveLayer
        {
            get;
            set;
        }

        public new int Srid
        {
            get { return CoordinateSystem == null ? 0 : (int)CoordinateSystem.Authority; }
            set { CoordinateSystem = CoordinateSystemFactory.Create(value); }
        }

        public IGeometryFactory Factory
        {
            get { return OwnerDocument.Factory; }
        }

        public new ICoordinateSystem CoordinateSystem
        {
            get;
            protected set;
        }

        public bool SelectionIsEmpty
        {
            get { return GetLayers().All(item => item.Selection.IsEmpty()); }
        }

        public IEnumerable<MapLayer> GetLayers()
        {
            return GetLayers(Layers);
        }

        IEnumerable<MapLayer> GetLayers(IEnumerable<MapLayer> layers)
        {
            foreach (MapLayer item in layers)
            {
                yield return item;

                foreach (MapLayer child in GetLayers(item.Layers))
                {
                    yield return child;
                }
            }
        }

        public bool SelectedAll
        {
            get { return GetLayers().All(item => item.Selection.IsSelectedAll()); }
        }

        public override void BeginInit()
        {
            Init++;
        }

        public override void EndInit()
        {
            Init--;

            if (Init == 0)
            {
                foreach(MapLayer item in GetLayers())
                {
                    OnLayerCollectionChanged(CollectionChangeAction.Add, item);
                }

                Render();
            }
        }

        public override IFeature NewFeature()
        {
            throw new NotImplementedException();
        }

        public override IFeature FindFeature(object featureId)
        {
            throw new NotImplementedException();
        }

        public override IEnumerable<IFeature> GetFeatures(IEnvelope bounds)
        {
            foreach (MapLayer layer in GetLayers())
            {
                foreach (IFeature feature in layer.GetFeatures(bounds))
                {
                    yield return feature;
                }
            }
        }

        public new IEnumerable<MapFeature> GetSelectedFeatures()
        {
            foreach (MapLayer layer in GetLayers())
            {
                foreach (IFeature feature in layer.GetSelectedFeatures())
                {
                    yield return new MapFeature(layer, feature);
                }
            }
        }

        public MapLayer FindLayer(string name)
        {
            return GetLayers().FirstOrDefault(item => item.Name.EqualsIgnoreCase(name));
        }

        public MapLayer GetActiveLayer()
        {
            return GetLayers().FirstOrDefault(item => item.Name == ActiveLayer);
        }

        public void SetActiveLayer(MapLayer layer)
        {
            if (layer.HasValue())
            {
                ActiveLayer = layer.Name;
            }
        }

        public override IEnvelope GetBounds(ICoordinateSystem target)
        {
            IEnvelope e = Factory.Create<IEnvelope>();

            foreach (MapLayer layer in GetLayers())
            {
                e = e.Union(layer.GetBounds(target ?? CoordinateSystem));
            }

            return e;
        }

        public new bool Normalize()
        {
            return Canvas.Normalize();
        }

        public bool ZoomToExtent()
        {
            return Canvas.ZoomToExtent();
        }

        public bool Zoom(int percent)
        {
            return Canvas.Zoom(percent);
        }

        public bool ZoomTo(RectangleF rect)
        {
            return Canvas.ZoomTo(rect);
        }

        public bool ZoomTo(IEnvelope bounds)
        {
            return Canvas.ZoomTo(bounds);
        }

        public bool IsBusy
        {
            get { return Worker.HasValue() && Worker.IsBusy; }
        }

        public bool CancellationPending
        {
            get { return Worker.HasValue() && Worker.CancellationPending; }
        }

        public void CancelAsync()
        {
            if (Worker == null)
            {
                return;
            }

            Worker.CancelAsync();
        }

        public void ReportProgress()
        {
            ReportProgress(default);
        }

        public void ReportProgress(int percentProgress)
        {
            if (Worker.HasValue() && Worker.IsBusy)
            {
                Worker.ReportProgress(percentProgress);
            }
        }

        public void Render()
        {
            if (IsBusy)
            {
                ReDraw = true;
                Worker.CancelAsync();
            }
            else
            {
                if (Worker.HasValue())
                {
                    Worker.RunWorkerAsync();
                }
                else
                {
                    OnRender(this, default);
                }
            }
        }

        protected virtual void OnRender(object sender, DoWorkEventArgs e)
        {
            if (Canvas.HasValue())
            {
                if (Init == 0 && Canvas.Graphics.Transform.IsEmpty() == false)
                {
                    CurrentWindow.SetNull();
                    CurrentWindow.ExpandToInclude(Canvas.Graphics.Transform.Bounds);
                    OnRender(Canvas);
                }
            }
        }

        protected new void OnRender(MapCanvas c)
        {
            if (c.Graphics.Transform.IsEmpty())
            {
                return;
            }

            c.Clear();

            if (CoordinateSystem.HasValue())
            {
                c.Graphics.Transform.Unit = CoordinateSystem.GetUnit();
            }

            BeginRender.InvokeSafely(this);

            foreach (MapLayer current in GetLayers())
            {
                if (CancellationPending)
                {
                    ReportProgress();
                    break;
                }

                if (current.OnRender(c))
                {
                    continue;
                }

                ReportProgress();
                break;
            }

            if (Thread.CurrentThread.IsBackground)
            {
                return;
            }

            RenderCompleted.InvokeSafely<RenderCompletedEventArgs>(this, c, null, false);
        }

        protected virtual void OnRenderProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            RenderProgressChanged.InvokeSafely<RenderProgressChangedEventArgs>(e.ProgressPercentage);
        }

        protected virtual void OnRenderCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            RenderCompleted.InvokeSafely<RenderCompletedEventArgs>(this, Canvas, e.Error, ReDraw);

            if (ReDraw)
            {
                ReDraw = false;
                Render();
            }
        }

        internal void OnBeginDrawLayer(MapLayer layer)
        {
            BeginLayerRender.InvokeSafely(this, layer);
        }

        internal void InvokeChanged(CollectionChangeAction action, MapLayer item)
        {
            OnLayerCollectionChanged(action, item);
            LayerCollectionChanged.InvokeSafely(action, item);
        }

        public void Insert(MapLayer layer, int index)
        {
            int n = 0, i = GetLayers().ToList().IndexOf(layer);

            foreach (MapLayer item in GetLayers())
            {
                if (item == layer)
                {
                    n++;
                    continue;
                }

                if (n++ == index)
                {
                    if (i < index)
                    {
                        item.InsertAfter(layer);
                    }
                    else
                    {
                        item.InsertBefore(layer);
                    }

                    break;
                }
            }
        }

        protected internal virtual void OnLayerCollectionChanged(CollectionChangeAction action, MapLayer item)
        {
            if (action == CollectionChangeAction.Add)
            {
                if (Init == 0 && string.IsNullOrEmpty(ActiveLayer))
                {
                    ActiveLayer = item.Name;
                }

                if (item.TransactionSupport)
                {
                    item.TransactionLog = TransactionLog;
                }

                if (item.Property == null)
                {
                    item.Property = Properties.Add(item.Name, item, item.Parent.Name);
                    item.Property.Editor = item.CreateEdit();
                    item.Property.CategoryChecked = item.Parent.Visibility;
                }
                else
                {
                    Properties.Insert(GetLayers().ToList().IndexOf(item), item.Property);
                }

                if (Init == 0 && Canvas.Graphics.Transform.Bounds.IsNull() && item.GetBounds().HasValue())
                {
                    if (ZoomToExtent())
                    {
                        Render();
                    }
                }
            }
            else if (action == CollectionChangeAction.Remove)
            {
                if (Init == 0 && item.IsActive())
                {
                    MapLayer first = GetLayers().FirstOrDefault();

                    if (first.HasValue())
                    {
                        ActiveLayer = first.Name;
                    }
                    else
                    {
                        ActiveLayer = default;
                    }
                }

                Properties.Remove(item.Name);
                item.TransactionLog = default;

                if (Init == 0)
                {
                    Render();
                }
            }
        }

        public override void Dispose()
        {
            BeginRender = null;
            BeginLayerRender = null;
            FeatureRender = null;
            RenderCompleted = null;
            RenderProgressChanged = null;
            LayerCollectionChanged = null;

            CancelAsync();
            Worker.DisposeSafely();
            Canvas.DisposeSafely();
            Worker = null;

            base.Dispose();

            foreach (MapLayer item in GetLayers())
            {
                item.Dispose();
            }

            GC.SuppressFinalize(this);
        }
    }
}
