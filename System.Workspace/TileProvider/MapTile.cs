//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Diagnostics;
using System.Drawing;
using System.Geometries;

namespace System.Workspace
{
    [DebuggerDisplay("Level {Level}, X {X}, Y {Y}")]
    public class MapTile : ICloneable, IDisposable
    {
        public MapTile(MapTileProvider provider)
        {
            Provider = provider;
        }

        protected MapTileProvider Provider;

        protected int ValueX;
        protected int ValueY;
        protected int SizeValue;
        protected int LevelValue;
        protected Bitmap ImageValue;
        protected IEnvelope BoundsValue;

        public bool IsValid
        {
            get { return Level >= 0 && Level <= 22 && (X >= 0 && X < Size) && (Y >= 0 && Y < Size); }
        }

        public int X
        {
            get { return ValueX; }
            set
            {
                ValueX = value;
                ImageValue = null;
                BoundsValue = null;
            }
        }

        public int Y
        {
            get { return ValueY; }
            set
            {
                ValueY = value;
                ImageValue = null;
                BoundsValue = null;
            }
        }

        public int Size
        {
            get { return SizeValue; }
            set { Level = (int)Math.Log(value, 2); }
        }

        public int Level
        {
            get { return LevelValue; }
            set
            {
                ImageValue = null;
                BoundsValue = null;
                SizeValue = 1 << (LevelValue = value);
            }
        }

        public Bitmap Image
        {
            get { return ImageValue ?? (ImageValue = Provider.DownloadImage(X, Y, Level)); }
        }

        public IEnvelope Bounds
        {
            get
            {
                if (BoundsValue == null)
                {
                    BoundsValue = GeometryFactory.Default.Create<IEnvelope>();
                    BoundsValue.Init(Provider.GetTileBounds(X, Y, Level));
                }

                return BoundsValue;
            }
        }

        public override int GetHashCode()
        {
            int n = Hash.Seed;

            unchecked
            {
                n = n * Hash.Step + X;
                n = n * Hash.Step + Y;
                n = n * Hash.Step + Level;
            }

            return n;
        }

        public override bool Equals(object obj)
        {
            if (obj.IsNull())
            {
                return false;
            }

            return GetHashCode() == obj.GetHashCode();
        }

        object ICloneable.Clone()
        {
            return Clone();
        }

        public MapTile Clone()
        {
            var c = MemberwiseClone() as MapTile;

            c.ImageValue = ImageValue.CloneSafely();
            c.BoundsValue = BoundsValue.CloneSafely();

            return c;
        }

        public void Dispose()
        {
            ImageValue.DisposeSafely();
            ImageValue = null;
            BoundsValue = null;
            GC.SuppressFinalize(this);
        }
    }
}
